# HashData 数据仓库指南
欢迎来到HashData数据仓库指南。HashData数据仓库是一个完全托管，PB级别的云端数据仓库服务。一个HashData数据仓库是一个由一组称之为节点的计算资源组成的集群。每个集群作为一个HashData数据仓库引擎，包含一个或多个数据库。

这个指南的目的是告诉你如何创建一个HashData数据仓库样例集群。你可以通过这个样例集群来测试HashData数据仓库服务。在这个教程中，你将执行如下步骤：

* 步骤1：先决条件
* 步骤2：启动HashData数据仓库样例集群
* 步骤3：授权连接样例集群
* 步骤4：连接样例集群
* 步骤5：将样例数据从对象存储加载到HashData数据仓库中
* 步骤6：寻找额外的资料和重设你的环境

这个教程的目的不是为了生产环境的，所以不会深入地讨论操作中的各种选项。当你完成了这个教程的所有步骤后，你能通过“额外资源”章节来定位关于集群计划、部署和维护，以及如何操作数据仓库中数据更深入的信息。


# 步骤1: 先决条件
在你启动一个HashData数据仓库集群前，确保在这个章节中满足如下前提条件：

* 注册青云账号
* 安装SQL客户端工具
* 确认防火墙规则

## 注册青云账号
你首先需要注册一个青云账号，如果还没有的话。如果你已经拥有了一个青云账号，那么你可以使用这个账号进行接下来的操作，从而跳过这个前提条件。

1. 打开链接[http://qingcloud.com](http://qingcloud.com)，点击注册。
2. 按照页面提示完成注册流程。

## 安装SQL客户端工具
你可以使用任何PostgreSQL兼容的客户端程序连接到HashData数据仓库，比如psql。此外，你还可以通过绝大部分使用标准数据库应用接口，如JDBC，ODBC的客户端程序连接到HashData数据仓库。最后，你还可以使用标准数据库应用接口开发自己的客户端程序来访问HashData数据仓库。由于HashData基于Greenplum Database，而后者又是基于PostgreSQL而来，所以你可以直接使用PostgreSQL驱动访问HashData。在这个教程中，我们将通过psql这个PostgreSQL的客户端程序演示如何连接到HashData数据仓库。

### 安装psql
1. 访问[PostgreSQL](http://postgresql.org)网站，根据你的操作系统下载安装包。
2. 访问[安装](http://www.postgresql.org/docs/9.5/static/tutorial-install.html)页面，安装PostgreSQL，后者会自动把客户端psql安装上。

## 确认防火墙规则
作为这个教程的一部分，当你启动一个HashData数据仓库集群的时候，你需要指定一个端口。另外，你需要在青云防火墙中添加一个下行规则从而允许外来连接通过这个端口访问你的数据仓库集群。

如果你的客户端机器在一个企业防火墙内，你需要找到一个开放的端口从而能够从客户端连接到数据仓库集群并且执行查询。如果你没有这方面的信息，你需要找到一个了解你们企业防火墙规则的人，并让他给你提供一个开放的端口。尽管HashData数据仓库使用6543作为默认端口，如果这个端口在你的防火墙中是不开放的，连接是无法建立的。由于HashData数据仓库一旦创建后，它的连接端口是不能再更改的，所以你需要指定一个合适的端口从而确保后续的连接操作能够顺利完成。

# 步骤2: 启动HashData数据仓库样例集群
完成上面的前提步骤后，现在你能够开始启动一个HashData数据仓库集群。

## 启动HashData数据仓库集群
1. 登陆青云控制台并打开数据仓库控制页面[数据仓库](https://console.qingcloud.com/gd1/DWs)。
2. 在主菜单中，你可以选择在那个数据中心创建你的数据仓库集群。在这个教程中，我们选择了广东1区。
3. 在主菜单中，展开大数据平台，选择数据仓库，进入HashData数据仓库控制台，点击创建。
4. 在集群的详情页面，输入下面信息然后点击继续：
	* 集群名字：输入examplecluster。
	* 数据库名字：让这个输入框空白。HashData数据仓库讲创建一个默认的名为postgres的数据库。
	* 数据库端口：指定数据库接受连接的开放端口。你需要在前面提到的先决条件步骤中决定这个端口。由于这个端口在集群创建后就不能再更改，所以你务必选择一个防火墙规则中开放的端口从而确保能够通过SQL客户端工具连接到数据仓库。在这个教程中，我们以9876
	* 超级用户名：输入masteruser。一旦数据仓库集群可用，你将通过这个用户名和密码连接到新创建的集群。
	* 超级用户密码和再次确认密码：输入超级用户的连接密码。
5. 在节点配置页中，输入下面信息然后点击继续：
	* 节点类型：dc1.large
	* 集群类型：单节点
6. 创建依赖资源：你需要有一个已连接到路由器的私有网络。你可以根据你已有资源的情况按如下步骤创建依赖资源：
	* 创建私有网络
	* 创建路由器
	* 连接路由器到私有网络
7. 在复核页面中，检查所有之前的选择，然后点击创建集群。
8. 确认页面出现。一般情况下，新的集群将会在几分钟内创建完成。点击关闭回到数据仓库主控制面板。
9. 在数据仓库主控制面板中，选择新创建的集群并且查看集群状态信息。在你连接数据仓库之前，一定要确认集群的状态是可用的，并且数据库的健康状态是正常。

# 步骤3: 授权连接样例集群
在前面的步骤中，你已经创建启动了你的HashData数据仓库集群。在你连接到数据仓库集群之前，你需要对上一步骤中创建的路由器进行相应的配置。

## 防火墙配置
在路由器的详情页面，点击选用的防火墙进入其详情页面，添加一条打开9876端口的下行规则，如下所示：

![Security Group Configuration](gsg-sgc.png)

这条下行规则允许你的SQL客户端工具能够访问路由器的9876端口。

## 路由器端口转发规则
回到路由器的详情页面，点击端口转发标签，添加一条9876端口的转发规则，如下所示：

![Router Forward Rule](gsg-rtr_rule.png)

这条转发规则确保在你访问路由器9876端口时，请求转发到HashData数据仓库集群的主节点9876端口。

## 配置公网IP
如果你的SQL客户端不在青云的网络里，你还需要申请一个公网IP地址，并绑定到前面步骤中创建的路由器。

# 步骤4: 连接样例集群
现在你可以通过SQL客户端工具连接到你的数据仓库集群，并且跑一条简单的查询语句来测试连接。你能够使用几乎所有与PostgreSQL兼容的SQL客户端工具。在这个教程中，你将使用在先决条件中安装的PostgreSQL自带的psql客户端。

## 确定连接IP地址和端口
数据仓库集群的IP地址可由配置公网IP步骤中确定。在剩下的教程中，我们用121.201.25.29作为例子。在集群主控制台，选择examplecluster进入详情页面。从详情页面中，你能看到端口：9876。

## 使用psql连接到集群
你可以通过下面命令连接到集群：

```
psql -d postgres -h 121.201.25.29 -p 9876 -U masteruser
```
然后根据提示输入登陆密码。

## 简单测试查询
登陆数据仓库后，你可以运行如下命令做一些简单的测试查询：

```
postgres=# CREATE TABLE foo (a INT, b INT);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
postgres=# INSERT INTO foo (SELECT i, i + 1 FROM generate_series(1, 10000) AS i);
INSERT 0 10000
postgres=# SELECT COUNT(*) FROM foo;
 count 
-------	
 10000
(1 row)

postgres=# SELECT SUM(a) FROM foo;
  sum
----------
 50005000
(1 row)
  
```

# 步骤5: 将样例数据从对象存储加载到HashData数据仓库中
现在你已经有了一个名为postgres的数据库，并且你已经成功地连接上它了。现在，你可以在数据库中创建一些新表，然后上传数据到这些表中，并尝试一些查询语句。为了方便你的测试，我们准备了一些样例数据在青云对象存储中。选择对象存储bucket所在的数据中心的时候，你需要确保所选的数据中心跟你启动数据仓库集群所在的数据中心是一样的。

1. 创建表

	拷贝并执行下面的建表语句在postgres数据库中创建相应的表对象。你可以通过HashData数据仓库开发者指南查看更详细的建表语法。请将其中的<access_key_id>和<secret_access_key>换成你的API access_key_id 和 secret_access_key。
	
```
CREATE TABLE NATION  ( 
	N_NATIONKEY  INTEGER NOT NULL,
    N_NAME       CHAR(25) NOT NULL,
    N_REGIONKEY  INTEGER NOT NULL,
    N_COMMENT    VARCHAR(152));
    
CREATE TABLE REGION  ( 
    R_REGIONKEY  INTEGER NOT NULL,
    R_NAME       CHAR(25) NOT NULL,
    R_COMMENT    VARCHAR(152));

CREATE TABLE PART  ( 
    P_PARTKEY     INTEGER NOT NULL,
    P_NAME        VARCHAR(55) NOT NULL,
    P_MFGR        CHAR(25) NOT NULL,
    P_BRAND       CHAR(10) NOT NULL,
    P_TYPE        VARCHAR(25) NOT NULL,
    P_SIZE        INTEGER NOT NULL,
    P_CONTAINER   CHAR(10) NOT NULL,
    P_RETAILPRICE DECIMAL(15,2) NOT NULL,
    P_COMMENT     VARCHAR(23) NOT NULL );

CREATE TABLE SUPPLIER ( 
    S_SUPPKEY     INTEGER NOT NULL,
    S_NAME        CHAR(25) NOT NULL,
    S_ADDRESS     VARCHAR(40) NOT NULL,
    S_NATIONKEY   INTEGER NOT NULL,
    S_PHONE       CHAR(15) NOT NULL,
    S_ACCTBAL     DECIMAL(15,2) NOT NULL,
    S_COMMENT     VARCHAR(101) NOT NULL);

CREATE TABLE PARTSUPP ( 
	PS_PARTKEY     INTEGER NOT NULL,
    PS_SUPPKEY     INTEGER NOT NULL,
    PS_AVAILQTY    INTEGER NOT NULL,
    PS_SUPPLYCOST  DECIMAL(15,2)  NOT NULL,
    PS_COMMENT     VARCHAR(199) NOT NULL );
    
CREATE TABLE CUSTOMER ( 
	C_CUSTKEY     INTEGER NOT NULL,
    C_NAME        VARCHAR(25) NOT NULL,
    C_ADDRESS     VARCHAR(40) NOT NULL,
    C_NATIONKEY   INTEGER NOT NULL,
    C_PHONE       CHAR(15) NOT NULL,
    C_ACCTBAL     DECIMAL(15,2)   NOT NULL,
    C_MKTSEGMENT  CHAR(10) NOT NULL,
    C_COMMENT     VARCHAR(117) NOT NULL);

CREATE TABLE ORDERS (
    O_ORDERKEY       INT8 NOT NULL,
    O_CUSTKEY        INTEGER NOT NULL,
    O_ORDERSTATUS    CHAR(1) NOT NULL,
    O_TOTALPRICE     DECIMAL(15,2) NOT NULL,
    O_ORDERDATE      DATE NOT NULL,
    O_ORDERPRIORITY  CHAR(15) NOT NULL,
    O_CLERK          CHAR(15) NOT NULL,
    O_SHIPPRIORITY   INTEGER NOT NULL,
    O_COMMENT        VARCHAR(79) NOT NULL);

CREATE TABLE LINEITEM ( 
	L_ORDERKEY    INT8 NOT NULL,
    L_PARTKEY     INTEGER NOT NULL,
    L_SUPPKEY     INTEGER NOT NULL,
    L_LINENUMBER  INTEGER NOT NULL,
    L_QUANTITY    DECIMAL(15,2) NOT NULL,
    L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,
    L_DISCOUNT    DECIMAL(15,2) NOT NULL,
    L_TAX         DECIMAL(15,2) NOT NULL,
    L_RETURNFLAG  CHAR(1) NOT NULL,
    L_LINESTATUS  CHAR(1) NOT NULL,
    L_SHIPDATE    DATE NOT NULL,
    L_COMMITDATE  DATE NOT NULL,
    L_RECEIPTDATE DATE NOT NULL,
    L_SHIPINSTRUCT CHAR(25) NOT NULL,
    L_SHIPMODE     CHAR(10) NOT NULL,
    L_COMMENT      VARCHAR(44) NOT NULL);
    
CREATE READABLE EXTERNAL TABLE e_NATION (LIKE NATION)
LOCATION ('qs://hashdatabucket.pek3a.qingstor.com/tpch/nation access_key_id=<access_key_id> secret_access_key=<secret_access_key>');
	
CREATE READABLE EXTERNAL TABLE e_REGION (LIKE REGION)
LOCATION ('qs://hashdatabucket.pek3a.qingstor.com/tpch/region access_key_id=<access_key_id> secret_access_key=<secret_access_key>');

CREATE READABLE EXTERNAL TABLE e_PART (LIKE PART)
LOCATION ('qs://hashdatabucket.pek3a.qingstor.com/tpch/part access_key_id=<access_key_id> secret_access_key=<secret_access_key>');
	
CREATE READABLE EXTERNAL TABLE e_SUPPLIER (LIKE SUPPLIER)
LOCATION ('qs://hashdatabucket.pek3a.qingstor.com/tpch/supplier access_key_id=<access_key_id> secret_access_key=<secret_access_key>');

CREATE READABLE EXTERNAL TABLE e_PARTSUPP (LIKE PARTSUPP)
LOCATION ('qs://hashdatabucket.pek3a.qingstor.com/tpch/partsupp access_key_id=<access_key_id> secret_access_key=<secret_access_key>');
	
CREATE READABLE EXTERNAL TABLE e_CUSTOMER (LIKE CUSTOMER)
LOCATION ('qs://hashdatabucket.pek3a.qingstor.com/tpch/customer access_key_id=<access_key_id> secret_access_key=<secret_access_key>');

CREATE READABLE EXTERNAL TABLE e_ORDERS (LIKE ORDERS)
LOCATION ('qs://hashdatabucket.pek3a.qingstor.com/tpch/orders access_key_id=<access_key_id> secret_access_key=<secret_access_key>');

CREATE READABLE EXTERNAL TABLE e_LINEITEM (LIKE LINEITEM)
LOCATION ('qs://hashdatabucket.pek3a.qingstor.com/tpch/lineitem access_key_id=<access_key_id> secret_access_key=<secret_access_key>');

```
2. 执行如下命令将保存在qingstor上面的数据拷贝插入到数据仓库表中。

```
INSERT INTO NATION SELECT * FROM e_NATION;
INSERT INTO REGION SELECT * FROM e_REGION;
INSERT INTO PART SELECT * FROM e_PART;
INSERT INTO SUPPLIER SELECT * FROM e_SUPPLIER;
INSERT INTO PARTSUPP SELECT * FROM e_PARTSUPP;
INSERT INTO CUSTOMER SELECT * FROM e_CUSTOMER;
INSERT INTO ORDERS SELECT * FROM e_ORDERS;
INSERT INTO LINEITEM SELECT * FROM e_LINEITEM;
```
3. 现在可以开始跑样例查询了。这里所采用的数据集和查询是商业智能计算测试TPC-H。TPC-H是美国交易处理效益委员会组织制定的用来模拟决策支持类应用的一个测试集。TPC-H实现了一个数据仓库，共包含8个基本表，其数据量可以设定从1G到3T不等。在这个样例中，我们选择了1G的数据集。TPC-H基准测试包括22个查询，其主要评价指标是各个查询的响应时间，即从提交查询到结果返回所需时间。这里只提供了前三条查询语句。关于TPC-H完整22条查询语句以及详细介绍可参考[TPC-H主页](http://www.tpc.org/tpch/)。

```
-- This query reports the amount of business that was billed, shipped, and returned.

select
        l_returnflag,
        l_linestatus,
        sum(l_quantity) as sum_qty,
        sum(l_extendedprice) as sum_base_price,
        sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
        sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
        avg(l_quantity) as avg_qty,
        avg(l_extendedprice) as avg_price,
        avg(l_discount) as avg_disc,
        count(*) as count_order
from
        lineitem

where
        l_shipdate <=  '1998-12-01'
group by
        l_returnflag,
        l_linestatus
order by
        l_returnflag,
        l_linestatus;

-- This query finds which supplier should be selected to place an order for a given part in a given region.

select
        s.s_acctbal,
        s.s_name,
        n.n_name,
        p.p_partkey,
        p.p_mfgr,
        s.s_address,
        s.s_phone,
        s.s_comment
from
        supplier s,
        partsupp ps,
        nation n,
        region r,
        part p,
        (select p_partkey, min(ps_supplycost) as min_ps_cost
                from
                        part,
                        partsupp ,
                        supplier,
                        nation,
                        region
                where
                        p_partkey=ps_partkey
                        and s_suppkey = ps_suppkey
                        and s_nationkey = n_nationkey
                        and n_regionkey = r_regionkey
                        and r_name = 'EUROPE'
                group by p_partkey ) g
where
        p.p_partkey = ps.ps_partkey
        and g.p_partkey = p.p_partkey
        and g. min_ps_cost = ps.ps_supplycost
        and s.s_suppkey = ps.ps_suppkey
        and p.p_size = 45
        and p.p_type like '%NICKEL'
        and s.s_nationkey = n.n_nationkey
        and n.n_regionkey = r.r_regionkey
        and r.r_name = 'EUROPE'
order by
        s.s_acctbal desc,
        n.n_name,
        s.s_name,
        p.p_partkey
LIMIT 100;

-- This query retrieves the 10 unshipped orders with the highest value.

select
        l_orderkey,
        sum(l_extendedprice * (1 - l_discount)) as revenue,
        o_orderdate,
        o_shippriority
from
        customer,
        orders,
        lineitem
where
        c_mktsegment = 'MACHINERY'
        and c_custkey = o_custkey
        and l_orderkey = o_orderkey
        and o_orderdate < '1995-03-15'
        and l_shipdate >  '1995-03-15'
group by
        l_orderkey,
        o_orderdate,
        o_shippriority
order by
        revenue desc,
        o_orderdate
LIMIT 10;
```

# 步骤6: 寻找额外的资料和重设你的环境

当你完成了这个入门教程后，你可以寻找更多额外的资料来学习和理解这个教程中介绍的概念，或者你可以将你的环境重置回原来的状态。如果你想尝试在其他学习资料中提到的任务，你可以让机器一直跑着。不过，需要注意的是，只要集群还跑着，你将一直被收取费用。

## 额外学习资料

我们建议您可以通过如下资料来学习和理解这个教程中介绍的概念：

* Hash Data Warehouse 集群管理概述
* Hash Data Warehouse 集群管理指南
* Hash Data Warehouse 数据库开发者指南

## 重置你的环境

当你完成了这个入门指南，你可以通过如下步骤重置你的环境：

* 删除步骤3中添加的防火墙规则和路由器转发规则。
* 删除样例集群。
