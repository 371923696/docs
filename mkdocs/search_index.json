{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\n\u60a8\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528 \nproduct-name\n \u4e48\uff1f\n\n\n\u5982\u679c\u60a8\u8fd8\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528 \nproduct-name\n\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u5148\u9605\u8bfb\u4e0b\u9762\u7684\u5185\u5bb9\u3002\n\n\n\n\n\u670d\u52a1\u4f18\u52bf\u548c\u8ba1\u8d39\u6807\u51c6\uff0d\u53c2\u9605 TODO \u6765\u4e86\u89e3 \nproduct-name\n \u7684\u4ea7\u54c1\u5b9a\u4f4d\uff0c\u670d\u52a1\u4f18\u52bf\u53ca\u76f8\u5173\u8ba1\u8d39\u6807\u51c6\u3002\n\n\n\u5165\u95e8\u4ecb\u7ecd\uff0dTODO\u5305\u542b\u4e86\u5b8c\u6210\u7684\u793a\u4f8b\uff0c\u5e2e\u52a9\u4ece\u521b\u5efa\nproduct-name\n\u6570\u636e\u4ed3\u5e93\u96c6\u7fa4\uff0c\u5230\u521b\u5efa\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u52a0\u8f7d\u6570\u636e\u5230\u6700\u540e\u7684\u6d4b\u8bd5\u67e5\u8be2\u53ca\u9a8c\u8bc1\u7ed3\u679c\u3002\n\n\n\n\n\u5728\u60a8\u9605\u8bfb\u5b8c\u5165\u95e8\u4ecb\u7ecd\u540e\uff0c\u4f60\u8fd8\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u7684\u6587\u6863\u6765\u66f4\u52a0\u6df1\u5165\u7684\u4e86\u89e3 \nproduct-name\n\n\n\n\nproduct-name\n \u7ba1\u7406\u624b\u518c\uff0d\u96c6\u7fa4\u7ba1\u7406\u624b\u518c\u4e3a\u60a8\u4ecb\u7ecd\u5982\u4f55\u521b\u5efa\u548c\u7ba1\u7406\nproduct-name\n\u96c6\u7fa4\u3002\n\n\n\n\n\u5982\u679c\u5177\u6709\u5176\u5b83\u5173\u7cfb\u578b\u6570\u636e\u5e93\u6d3b\u7740\u6570\u636e\u4ed3\u5e93\u5e94\u7528\u7684\u7ecf\u9a8c\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u6ce8\u610f\nproduct-name\n\u4e0e\u5176\u5b83\u4ea7\u54c1\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u533a\u522b\u3002\u60a8\u53ef\u4ee5\u53c2\u8003\u6700\u4f73\u5b9e\u8df5\u7ae0\u8282\u6765\u4e86\u89e3\u548c\u5b66\u4e60\u5982\u4f55\u66f4\u597d\u7684\u4f7f\u7528\nproduct-name\n\u6765\u52a0\u8f7d\u6570\u636e\u548c\u8bbe\u8ba1\u8868\u7ed3\u6784\u3002\n\n\nproduct-name\n \u662f\u57fa\u4e8e Greenplum 4.6.3.2 \u548c PostgreSQL 8.2.5 \u5f00\u53d1\u7684\u3002\n\n\n\u60a8\u662f\u6570\u636e\u5e93\u5f00\u53d1\u8005\u4e48\uff1f\n\n\n\u5982\u679c\u60a8\u662f\u4e00\u4f4d\u6570\u636e\u5e93\u7528\u6237\uff0c\u6570\u636e\u5e93\u8bbe\u8ba1\u8005\uff0c\u6216\u8005\u6570\u636e\u5e93\u5f00\u53d1\u8005\uff0c\u53c8\u6216\u662f\u6570\u636e\u5e93\u7ba1\u7406\u5458\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u8868\u683c\uff0c\u6765\u5e2e\u52a9\u60a8\u5feb\u901f\u5b9a\u4f4d\u60a8\u6240\u9700\u8981\u67e5\u627e\u7684\u76f8\u5173\u4fe1\u606f\u3002\n\n\n\n\n\n\n\n\n\u60a8\u9700\u8981\u7684\u4fe1\u606f\n\n\n\u63a8\u8350\u53c2\u8003\n\n\n\n\n\n\n\n\n\n\n\u5feb\u901f\u5730\u521b\u5efa\u5e76\u4f7f\u7528 \nproduct-name\n\n\n\n\n\n\n\n\n\u4e86\u89e3\u548c\u5b66\u4e60 \nproduct-name\n \u7684\u5185\u90e8\u67b6\u6784\n\n\n\n\n\n\n\n\n\u521b\u5efa\u6570\u636e\u5e93\uff0c\u8868\uff0c\u7528\u6237\uff0c\u53ca\u5176\u5b83\u6570\u636e\u5e93\u5bf9\u8c61\n\n\n\n\n\n\n\n\n\u5982\u4f55\u6b63\u786e\u7684\u8bbe\u8ba1\u8868\u6a21\u5f0f\n\n\n\n\n\n\n\n\n\u52a0\u8f7d\u6570\u636e\n\n\n\n\n\n\n\n\n\u7ba1\u7406\u7528\u6237, \u7528\u6237\u7ec4\u548c\u6570\u636e\u5e93\u5b89\u5168\n\n\n\n\n\n\n\n\n\u76d1\u63a7\u548c\u4f18\u5316\u7cfb\u7edf\u6027\u80fd\n\n\n\n\n\n\n\n\n\u7b2c\u4e09\u65b9\u652f\u6301\n\n\n\n\n\n\n\n\n\n\n\u9605\u8bfb\u524d\u9700\u8981\u505a\u7684\u51c6\u5907\u5de5\u4f5c\n\n\n\u5728\u6b63\u5f0f\u9605\u8bfb\u6587\u6863\u524d\uff0c\u60a8\u53ef\u4ee5\u5b8c\u6210\u4e0b\u9762\u7684\u4efb\u52a1\u6765\u52a0\u901f\u60a8\u5bf9 \nproduct-name\n \u7406\u89e3\u548c\u638c\u63e1\uff1a\n\n\n\n\n\u5b89\u88c5\u4e00\u4e2a SQL \u5ba2\u6237\u7aef\u7a0b\u5e8f\n\n\n\u542f\u52a8\u4e00\u4e2a \nproduct-name\n \u96c6\u7fa4\n\n\n\u4f7f\u7528 SQL \u5ba2\u6237\u7aef\u7a0b\u5e8f\u8fde\u63a5\u5230\u96c6\u7fa4\u7684 master \u8282\u70b9\n\n\n\n\n\u5982\u679c\u60a8\u9700\u8981\u5173\u4e8e\u4e0a\u9762\u6b65\u9aa4\u7684\u76f8\u5173\u64cd\u4f5c\u5e2e\u52a9\uff0c\u8bf7\u53c2\u9605\uff1a\ndoc-getting-started\n\u3002\n\n\n\u60a8\u6700\u597d\u4e86\u89e3 SQL \u5ba2\u6237\u7aef\u7a0b\u5e8f\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5e76\u638c\u63e1\u4e00\u4e9b\u57fa\u7840\u7684 SQL \u8bed\u8a00\u77e5\u8bc6\u3002", 
            "title": "\u6b22\u8fce\u4f7f\u7528"
        }, 
        {
            "location": "/#welcome", 
            "text": "", 
            "title": "Welcome"
        }, 
        {
            "location": "/#product-name", 
            "text": "\u5982\u679c\u60a8\u8fd8\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528  product-name \uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u5148\u9605\u8bfb\u4e0b\u9762\u7684\u5185\u5bb9\u3002   \u670d\u52a1\u4f18\u52bf\u548c\u8ba1\u8d39\u6807\u51c6\uff0d\u53c2\u9605 TODO \u6765\u4e86\u89e3  product-name  \u7684\u4ea7\u54c1\u5b9a\u4f4d\uff0c\u670d\u52a1\u4f18\u52bf\u53ca\u76f8\u5173\u8ba1\u8d39\u6807\u51c6\u3002  \u5165\u95e8\u4ecb\u7ecd\uff0dTODO\u5305\u542b\u4e86\u5b8c\u6210\u7684\u793a\u4f8b\uff0c\u5e2e\u52a9\u4ece\u521b\u5efa product-name \u6570\u636e\u4ed3\u5e93\u96c6\u7fa4\uff0c\u5230\u521b\u5efa\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u52a0\u8f7d\u6570\u636e\u5230\u6700\u540e\u7684\u6d4b\u8bd5\u67e5\u8be2\u53ca\u9a8c\u8bc1\u7ed3\u679c\u3002   \u5728\u60a8\u9605\u8bfb\u5b8c\u5165\u95e8\u4ecb\u7ecd\u540e\uff0c\u4f60\u8fd8\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u7684\u6587\u6863\u6765\u66f4\u52a0\u6df1\u5165\u7684\u4e86\u89e3  product-name   product-name  \u7ba1\u7406\u624b\u518c\uff0d\u96c6\u7fa4\u7ba1\u7406\u624b\u518c\u4e3a\u60a8\u4ecb\u7ecd\u5982\u4f55\u521b\u5efa\u548c\u7ba1\u7406 product-name \u96c6\u7fa4\u3002   \u5982\u679c\u5177\u6709\u5176\u5b83\u5173\u7cfb\u578b\u6570\u636e\u5e93\u6d3b\u7740\u6570\u636e\u4ed3\u5e93\u5e94\u7528\u7684\u7ecf\u9a8c\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u6ce8\u610f product-name \u4e0e\u5176\u5b83\u4ea7\u54c1\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u533a\u522b\u3002\u60a8\u53ef\u4ee5\u53c2\u8003\u6700\u4f73\u5b9e\u8df5\u7ae0\u8282\u6765\u4e86\u89e3\u548c\u5b66\u4e60\u5982\u4f55\u66f4\u597d\u7684\u4f7f\u7528 product-name \u6765\u52a0\u8f7d\u6570\u636e\u548c\u8bbe\u8ba1\u8868\u7ed3\u6784\u3002  product-name  \u662f\u57fa\u4e8e Greenplum 4.6.3.2 \u548c PostgreSQL 8.2.5 \u5f00\u53d1\u7684\u3002", 
            "title": "\u60a8\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528 &lt;&amp;product-name&gt; \u4e48\uff1f"
        }, 
        {
            "location": "/#_1", 
            "text": "\u5982\u679c\u60a8\u662f\u4e00\u4f4d\u6570\u636e\u5e93\u7528\u6237\uff0c\u6570\u636e\u5e93\u8bbe\u8ba1\u8005\uff0c\u6216\u8005\u6570\u636e\u5e93\u5f00\u53d1\u8005\uff0c\u53c8\u6216\u662f\u6570\u636e\u5e93\u7ba1\u7406\u5458\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u8868\u683c\uff0c\u6765\u5e2e\u52a9\u60a8\u5feb\u901f\u5b9a\u4f4d\u60a8\u6240\u9700\u8981\u67e5\u627e\u7684\u76f8\u5173\u4fe1\u606f\u3002     \u60a8\u9700\u8981\u7684\u4fe1\u606f  \u63a8\u8350\u53c2\u8003      \u5feb\u901f\u5730\u521b\u5efa\u5e76\u4f7f\u7528  product-name     \u4e86\u89e3\u548c\u5b66\u4e60  product-name  \u7684\u5185\u90e8\u67b6\u6784     \u521b\u5efa\u6570\u636e\u5e93\uff0c\u8868\uff0c\u7528\u6237\uff0c\u53ca\u5176\u5b83\u6570\u636e\u5e93\u5bf9\u8c61     \u5982\u4f55\u6b63\u786e\u7684\u8bbe\u8ba1\u8868\u6a21\u5f0f     \u52a0\u8f7d\u6570\u636e     \u7ba1\u7406\u7528\u6237, \u7528\u6237\u7ec4\u548c\u6570\u636e\u5e93\u5b89\u5168     \u76d1\u63a7\u548c\u4f18\u5316\u7cfb\u7edf\u6027\u80fd     \u7b2c\u4e09\u65b9\u652f\u6301", 
            "title": "\u60a8\u662f\u6570\u636e\u5e93\u5f00\u53d1\u8005\u4e48\uff1f"
        }, 
        {
            "location": "/#_2", 
            "text": "\u5728\u6b63\u5f0f\u9605\u8bfb\u6587\u6863\u524d\uff0c\u60a8\u53ef\u4ee5\u5b8c\u6210\u4e0b\u9762\u7684\u4efb\u52a1\u6765\u52a0\u901f\u60a8\u5bf9  product-name  \u7406\u89e3\u548c\u638c\u63e1\uff1a   \u5b89\u88c5\u4e00\u4e2a SQL \u5ba2\u6237\u7aef\u7a0b\u5e8f  \u542f\u52a8\u4e00\u4e2a  product-name  \u96c6\u7fa4  \u4f7f\u7528 SQL \u5ba2\u6237\u7aef\u7a0b\u5e8f\u8fde\u63a5\u5230\u96c6\u7fa4\u7684 master \u8282\u70b9   \u5982\u679c\u60a8\u9700\u8981\u5173\u4e8e\u4e0a\u9762\u6b65\u9aa4\u7684\u76f8\u5173\u64cd\u4f5c\u5e2e\u52a9\uff0c\u8bf7\u53c2\u9605\uff1a doc-getting-started \u3002  \u60a8\u6700\u597d\u4e86\u89e3 SQL \u5ba2\u6237\u7aef\u7a0b\u5e8f\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5e76\u638c\u63e1\u4e00\u4e9b\u57fa\u7840\u7684 SQL \u8bed\u8a00\u77e5\u8bc6\u3002", 
            "title": "\u9605\u8bfb\u524d\u9700\u8981\u505a\u7684\u51c6\u5907\u5de5\u4f5c"
        }, 
        {
            "location": "/overview/", 
            "text": "product-name\n \u7cfb\u7edf\u6982\u8ff0\n\n\n\u672c\u7ae0\u8282\u5c06\u4f1a\u4ecb\u7ecd\nproduce-name\n\u7684\u6a21\u5757\u53ca\u4e00\u4e9b\u5173\u952e\u7279\u6027\uff0c\u8ba9\u60a8\u5bf9\u672c\u4ea7\u54c1\u62e5\u6709\u66f4\u52a0\u6df1\u523b\u7684\u8ba4\u8bc6\u548c\u7406\u89e3\u3002\n\n\n\u672c\u7ae0\u8282\u6db5\u76d6\u4ee5\u4e0b\u5185\u5bb9:\n\n\n\n\nproduct-name\n \u67b6\u6784\n\n\n\u7ba1\u7406\u548c\u76d1\u63a7\u5de5\u5177\n\n\n\u5e76\u884c\u6570\u636e\u52a0\u8f7d\n\n\n\u7cfb\u7edf\u5197\u4f59\u548c\u5bb9\u9519\n\n\n\u7edf\u8ba1\u4fe1\u606f\n\n\n\n\nproduct-name\n \u67b6\u6784\n\n\ncompany-product-name\n \u662f\u4e3a\u4e86\u7ba1\u7406\u5927\u5bb9\u91cf\u5206\u6790\u578b\u6570\u636e\u4ed3\u5e93\u548c\u5546\u4e1a\u667a\u80fd\u5206\u6790\u4e1a\u52a1\u513f\u8bbe\u8ba1\u7684\u5927\u89c4\u6a21\u5e76\u884c\u5904\u7406\uff08MPP\uff09\u6570\u636e\u5e93\u670d\u52a1\u7cfb\u7edf\u3002\n\n\nMPP\uff08\u4e5f\u88ab\u79f0\u4f5c shared nothing \u67b6\u6784\uff09\u662f\u6307\u4e00\u4e2a\u7cfb\u7edf\u62e5\u6709\u4e24\u4e2a\u6216\u8005\u4e24\u4e2a\u4ee5\u4e0a\u7684\u5904\u7406\u5668\uff0c\u76f8\u4e92\u5408\u4f5c\u6765\u6267\u884c\u4efb\u52a1\u3002\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u914d\u6709\u72ec\u7acb\u7684\u5185\u5b58\uff0c\u64cd\u4f5c\u7cfb\u7edf\u548c\u78c1\u76d8\u3002\nproduct-name\n\u91c7\u7528\u9ad8\u6027\u80fd\u7684\u7cfb\u7edf\u67b6\u6784\u53ef\u4ee5\u5c06\u8bf7\u6c42\u5747\u5300\u5206\u6563\u5230\u5b58\u50a8 TB \u7ea7\u522b\u7684\u6570\u636e\u4ed3\u5e93\u4e0a\uff0c\u540c\u65f6\u5145\u5206\u5229\u7528\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u8d44\u6e90\uff0c\u5e76\u884c\u7684\u5904\u7406\u8bf7\u6c42\u3002\n\n\nproduct-name\n\u662f\u57fa\u4e8e PostgreSQL \u5f00\u6e90\u6570\u636e\u5e93\u6280\u672f\uff0c\u901a\u8fc7\u5bf9 PostgreSQL\u7684\u4fee\u6539\uff0c\u5f97\u5230\u7684\u5e76\u884c\u67b6\u6784\u6570\u636e\u5e93\u3002\u4ece\u7cfb\u7edf\u4fe1\u606f\u8868\uff0c\u4f18\u5316\u5668\uff0c\u67e5\u8be2\u6267\u884c\u5668\uff0c\u4e8b\u52a1\u7ba1\u7406\u7b49\u5404\u4e2a\u65b9\u9762\u90fd\u8fdb\u884c\u4e86\u4fee\u6539\u548c\u589e\u5f3a\uff0c\u6765\u6ee1\u8db3\u771f\u6b63\u5c06\u67e5\u8be2\u4ece\u5185\u90e8\u5e76\u884c\u8fd0\u884c\u5728\u591a\u4e2a\u8ba1\u7b97\u8282\u70b9\u4e0a\u3002\u901a\u8fc7\u5feb\u901f\u7684\u5185\u90e8\u8f6f\u4ef6\u6570\u636e\u4ea4\u4e92\u6a21\u5757\uff0c\u6ee1\u8db3\u7cfb\u7edf\u5728\u591a\u4e2a\u8282\u70b9\u95f4\u6570\u636e\u7684\u7a7f\u51fa\u548c\u5904\u7406\u8981\u6c42\uff0c\u4f7f\u5f97\u6574\u4e2a\u7cfb\u7edf\u5bf9\u5916\u6765\u770b\u50cf\u662f\u4e00\u4e2a\u8ba1\u7b97\u80fd\u529b\u7b49\u4e8e\u4e0a\u767e\u53f0\u673a\u5668\u7684\u5355\u4e00\u6570\u636e\u5e93\u7cfb\u7edf\u3002\n\n\nproduct-name\n \u7684 master \u8282\u70b9\u662f\u6574\u4e2a\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u5165\u53e3\u8282\u70b9\uff0c\u7528\u6237\u901a\u8fc7\u5ba2\u6237\u7aef\u8fde\u63a5 master \u6765\u63d0\u4ea4 SQL \u67e5\u8be2\u8bed\u53e5\u3002master\u8282\u70b9\u5c06\u4f1a\u534f\u8c03\u5176\u5b83\u8ba1\u7b97\u8282\u70b9\uff0c\u88ab\u79f0\u4e3a segment\uff0c\u6765\u901a\u8fc7\u5b58\u50a8\u548c\u5904\u7406\u7528\u6237\u7684\u6570\u636e\u3002\n\n\n\n\nMaster \u8282\u70b9\n\n\nproduct-name\n \u7684 master \u8282\u70b9\u662f\u6574\u4e2a\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u5165\u53e3\uff0c\u7528\u6765\u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u63a5\u6536SQL\u67e5\u8be2\uff0c\u5e76\u5c06\u4f5c\u4e1a\u5206\u53d1\u5230segment\u4e0a\u6267\u884c\u3002\n\n\nproduct-name\n \u7684\u7528\u6237\u53ef\u4ee5\u50cf\u4f7f\u7528 PostgreSQL \u4e00\u6837\uff0c\u901a\u8fc7 master \u8282\u70b9\u6765\u8bbf\u95ee \nproduct-name\n\u7cfb\u7edf\u3002\u76ee\u524d\u652f\u6301\u5ba2\u6237\u7aef\u7a0b\u5e8f psql \u6216\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3 ODBC \u6216 JDBC\u3002\n\n\nmaster\u8282\u70b9\u5b58\u50a8\u4e86\u63cf\u8ff0\u7cfb\u7edf\u5168\u5c40\u7ed3\u6784\u7684\u7cfb\u7edf\u4fe1\u606f\u8868\uff08global system catalog\uff09\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8868\u4e2d\u5b58\u50a8\u4e86\nproduct-name\n\u81ea\u5df1\u7684\u5143\u4fe1\u606f\uff08metadata\uff09\u3002master\u8282\u70b9\u6ca1\u6709\u5b58\u50a8\u7528\u6237\u6570\u636e\u7684\u4fe1\u606f\uff0c\u6240\u6709\u7684\u7528\u6237\u6570\u636e\u90fd\u5b58\u50a8\u5728 segment \u8282\u70b9\uff0cmaster \u8ba4\u8bc1\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5904\u7406\u5ba2\u6237\u63d0\u4ea4\u7684 SQL  \u547d\u4ee4\uff0c\u5c06\u67e5\u8be2\u5206\u53d1\u5230\u5b58\u50a8\u6570\u636e\u7684 segment \u8282\u70b9\uff0c\u534f\u8c03\u5404\u4e2a segment \u8282\u70b9\u6267\u884c\uff0c\u5e76\u6c47\u603b\u6267\u884c\u7ed3\u679c\uff0c\u6700\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7a0b\u5e8f\u3002\n\n\nSegment \u8282\u70b9\n\n\nproduct-name\n segment \u8282\u70b9\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u4e2a\u4fee\u6539\u7684 PostgreSQL \u6570\u636e\u5e93\uff0c\u6bcf\u4e2a segment \u90fd\u5b58\u50a8\u4e86\u4e00\u90e8\u5206\u7528\u6237\u6570\u636e\uff0c\u5e76\u4e3b\u8981\u8d1f\u8d23\u6267\u884c\u7528\u6237\u7684\u67e5\u8be2\u3002\n\n\n\u6bcf\u5f53\u7528\u6237\u8fde\u63a5\u5230 master \u8282\u70b9\uff0c\u5e76\u4e14\u53d1\u9001\u4e00\u4e2a\u67e5\u8be2\u65f6\uff0c\u6bcf\u4e2a segment \u8282\u70b9\u90fd\u4f1a\u521b\u5efa\u4e00\u4e9b\u8fdb\u7a0b\u6765\u5171\u540c\u5904\u7406\u6539\u67e5\u8be2\u3002\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u67e5\u8be2\u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003 TODO\u3002\n\n\n\u7528\u6237\u5b9a\u4e49\u7684\u6570\u636e\u8868\u548c\u76f8\u5e94\u7684\u7d22\u5f15\u5c06\u4f1a\u81ea\u52a8\u88ab\u5206\u6563\u5230 \nproduct-name\n \u7684\u8282\u70b9\u4e0a\uff0c\u6bcf\u4e2a segment \u4e0a\u90fd\u5b58\u50a8\u4e86\u4e00\u90e8\u5206\u7528\u6237\u6570\u636e\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6570\u636e\u662f\u4e0d\u76f8\u4ea4\u7684\u3002\n\n\n\u8f6f\u4ef6\u6570\u636e\u4ea4\u6362\u6a21\u5757\n\n\n\u8f6f\u4ef6\u6570\u636e\u4ea4\u6362\u6a21\u5757\u662f\nproduct-name\n \u67b6\u6784\u4e2d\u7684\u7f51\u7edc\u5c42\u3002\u6b64\u6a21\u5757\u8d1f\u8d23\u5904\u7406segment\u4e4b\u95f4\u548c\u7f51\u7edc\u4e4b\u95f4\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002\u6b64\u6a21\u5757\u9ed8\u8ba4\u4f7f\u7528\u7ecf\u8fc7\u6df1\u5ea6\u8c03\u4f18\u7684\u5e26\u6d41\u91cf\u63a7\u5236\u7684UDP\u534f\u8bae\u6765\u4f20\u8f93\u6570\u636e\u3002\u8fd9\u79cd\u7b97\u6cd5\u9664\u4e86\u63d0\u4f9bTCP\u534f\u8bae\u652f\u6301\u7684\u53ef\u9760\u6027\u5916\uff0c\u5728\u6027\u80fd\u548c\u6c34\u5e73\u6269\u5c55\u80fd\u529b\u90fd\u4f18\u4e8eTCP\u534f\u8bae\u3002\n\n\n\u7ba1\u7406\u548c\u76d1\u63a7\n\n\n\u6570\u636e\u5e93\u7ba1\u7406\n  gpstart\n  gpstop\n  gpcheck\n\n\n\u78c1\u76d8\u6269\u5bb9\n  gpfilespace\n\n\n\u6269\u5c55\n  gpexpand\n\n\nHA\n  gpinitstandby\n  gpactivatestandby\n\n\nReplica\n  gpaddmirrors\n  gprecoverseg\n\n\n\u7cfb\u7edf\u8868\n\n\n\u5e76\u884c\u6570\u636e\u52a0\u8f7d\n\n\n\u7cfb\u7edf\u5197\u4f59\u548c\u5bb9\u9519\n\n\n\u7edf\u8ba1\u4fe1\u606f", 
            "title": "<&product-name> \u7cfb\u7edf\u6982\u8ff0"
        }, 
        {
            "location": "/overview/#product-name", 
            "text": "\u672c\u7ae0\u8282\u5c06\u4f1a\u4ecb\u7ecd produce-name \u7684\u6a21\u5757\u53ca\u4e00\u4e9b\u5173\u952e\u7279\u6027\uff0c\u8ba9\u60a8\u5bf9\u672c\u4ea7\u54c1\u62e5\u6709\u66f4\u52a0\u6df1\u523b\u7684\u8ba4\u8bc6\u548c\u7406\u89e3\u3002  \u672c\u7ae0\u8282\u6db5\u76d6\u4ee5\u4e0b\u5185\u5bb9:   product-name  \u67b6\u6784  \u7ba1\u7406\u548c\u76d1\u63a7\u5de5\u5177  \u5e76\u884c\u6570\u636e\u52a0\u8f7d  \u7cfb\u7edf\u5197\u4f59\u548c\u5bb9\u9519  \u7edf\u8ba1\u4fe1\u606f", 
            "title": "&lt;&amp;product-name&gt; \u7cfb\u7edf\u6982\u8ff0"
        }, 
        {
            "location": "/overview/#product-name_1", 
            "text": "company-product-name  \u662f\u4e3a\u4e86\u7ba1\u7406\u5927\u5bb9\u91cf\u5206\u6790\u578b\u6570\u636e\u4ed3\u5e93\u548c\u5546\u4e1a\u667a\u80fd\u5206\u6790\u4e1a\u52a1\u513f\u8bbe\u8ba1\u7684\u5927\u89c4\u6a21\u5e76\u884c\u5904\u7406\uff08MPP\uff09\u6570\u636e\u5e93\u670d\u52a1\u7cfb\u7edf\u3002  MPP\uff08\u4e5f\u88ab\u79f0\u4f5c shared nothing \u67b6\u6784\uff09\u662f\u6307\u4e00\u4e2a\u7cfb\u7edf\u62e5\u6709\u4e24\u4e2a\u6216\u8005\u4e24\u4e2a\u4ee5\u4e0a\u7684\u5904\u7406\u5668\uff0c\u76f8\u4e92\u5408\u4f5c\u6765\u6267\u884c\u4efb\u52a1\u3002\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u914d\u6709\u72ec\u7acb\u7684\u5185\u5b58\uff0c\u64cd\u4f5c\u7cfb\u7edf\u548c\u78c1\u76d8\u3002 product-name \u91c7\u7528\u9ad8\u6027\u80fd\u7684\u7cfb\u7edf\u67b6\u6784\u53ef\u4ee5\u5c06\u8bf7\u6c42\u5747\u5300\u5206\u6563\u5230\u5b58\u50a8 TB \u7ea7\u522b\u7684\u6570\u636e\u4ed3\u5e93\u4e0a\uff0c\u540c\u65f6\u5145\u5206\u5229\u7528\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u8d44\u6e90\uff0c\u5e76\u884c\u7684\u5904\u7406\u8bf7\u6c42\u3002  product-name \u662f\u57fa\u4e8e PostgreSQL \u5f00\u6e90\u6570\u636e\u5e93\u6280\u672f\uff0c\u901a\u8fc7\u5bf9 PostgreSQL\u7684\u4fee\u6539\uff0c\u5f97\u5230\u7684\u5e76\u884c\u67b6\u6784\u6570\u636e\u5e93\u3002\u4ece\u7cfb\u7edf\u4fe1\u606f\u8868\uff0c\u4f18\u5316\u5668\uff0c\u67e5\u8be2\u6267\u884c\u5668\uff0c\u4e8b\u52a1\u7ba1\u7406\u7b49\u5404\u4e2a\u65b9\u9762\u90fd\u8fdb\u884c\u4e86\u4fee\u6539\u548c\u589e\u5f3a\uff0c\u6765\u6ee1\u8db3\u771f\u6b63\u5c06\u67e5\u8be2\u4ece\u5185\u90e8\u5e76\u884c\u8fd0\u884c\u5728\u591a\u4e2a\u8ba1\u7b97\u8282\u70b9\u4e0a\u3002\u901a\u8fc7\u5feb\u901f\u7684\u5185\u90e8\u8f6f\u4ef6\u6570\u636e\u4ea4\u4e92\u6a21\u5757\uff0c\u6ee1\u8db3\u7cfb\u7edf\u5728\u591a\u4e2a\u8282\u70b9\u95f4\u6570\u636e\u7684\u7a7f\u51fa\u548c\u5904\u7406\u8981\u6c42\uff0c\u4f7f\u5f97\u6574\u4e2a\u7cfb\u7edf\u5bf9\u5916\u6765\u770b\u50cf\u662f\u4e00\u4e2a\u8ba1\u7b97\u80fd\u529b\u7b49\u4e8e\u4e0a\u767e\u53f0\u673a\u5668\u7684\u5355\u4e00\u6570\u636e\u5e93\u7cfb\u7edf\u3002  product-name  \u7684 master \u8282\u70b9\u662f\u6574\u4e2a\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u5165\u53e3\u8282\u70b9\uff0c\u7528\u6237\u901a\u8fc7\u5ba2\u6237\u7aef\u8fde\u63a5 master \u6765\u63d0\u4ea4 SQL \u67e5\u8be2\u8bed\u53e5\u3002master\u8282\u70b9\u5c06\u4f1a\u534f\u8c03\u5176\u5b83\u8ba1\u7b97\u8282\u70b9\uff0c\u88ab\u79f0\u4e3a segment\uff0c\u6765\u901a\u8fc7\u5b58\u50a8\u548c\u5904\u7406\u7528\u6237\u7684\u6570\u636e\u3002", 
            "title": "&lt;&amp;product-name&gt; \u67b6\u6784"
        }, 
        {
            "location": "/overview/#master", 
            "text": "product-name  \u7684 master \u8282\u70b9\u662f\u6574\u4e2a\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u5165\u53e3\uff0c\u7528\u6765\u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u63a5\u6536SQL\u67e5\u8be2\uff0c\u5e76\u5c06\u4f5c\u4e1a\u5206\u53d1\u5230segment\u4e0a\u6267\u884c\u3002  product-name  \u7684\u7528\u6237\u53ef\u4ee5\u50cf\u4f7f\u7528 PostgreSQL \u4e00\u6837\uff0c\u901a\u8fc7 master \u8282\u70b9\u6765\u8bbf\u95ee  product-name \u7cfb\u7edf\u3002\u76ee\u524d\u652f\u6301\u5ba2\u6237\u7aef\u7a0b\u5e8f psql \u6216\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3 ODBC \u6216 JDBC\u3002  master\u8282\u70b9\u5b58\u50a8\u4e86\u63cf\u8ff0\u7cfb\u7edf\u5168\u5c40\u7ed3\u6784\u7684\u7cfb\u7edf\u4fe1\u606f\u8868\uff08global system catalog\uff09\uff0c\u8fd9\u4e9b\u4fe1\u606f\u8868\u4e2d\u5b58\u50a8\u4e86 product-name \u81ea\u5df1\u7684\u5143\u4fe1\u606f\uff08metadata\uff09\u3002master\u8282\u70b9\u6ca1\u6709\u5b58\u50a8\u7528\u6237\u6570\u636e\u7684\u4fe1\u606f\uff0c\u6240\u6709\u7684\u7528\u6237\u6570\u636e\u90fd\u5b58\u50a8\u5728 segment \u8282\u70b9\uff0cmaster \u8ba4\u8bc1\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5904\u7406\u5ba2\u6237\u63d0\u4ea4\u7684 SQL  \u547d\u4ee4\uff0c\u5c06\u67e5\u8be2\u5206\u53d1\u5230\u5b58\u50a8\u6570\u636e\u7684 segment \u8282\u70b9\uff0c\u534f\u8c03\u5404\u4e2a segment \u8282\u70b9\u6267\u884c\uff0c\u5e76\u6c47\u603b\u6267\u884c\u7ed3\u679c\uff0c\u6700\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7a0b\u5e8f\u3002", 
            "title": "Master \u8282\u70b9"
        }, 
        {
            "location": "/overview/#segment", 
            "text": "product-name  segment \u8282\u70b9\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u4e2a\u4fee\u6539\u7684 PostgreSQL \u6570\u636e\u5e93\uff0c\u6bcf\u4e2a segment \u90fd\u5b58\u50a8\u4e86\u4e00\u90e8\u5206\u7528\u6237\u6570\u636e\uff0c\u5e76\u4e3b\u8981\u8d1f\u8d23\u6267\u884c\u7528\u6237\u7684\u67e5\u8be2\u3002  \u6bcf\u5f53\u7528\u6237\u8fde\u63a5\u5230 master \u8282\u70b9\uff0c\u5e76\u4e14\u53d1\u9001\u4e00\u4e2a\u67e5\u8be2\u65f6\uff0c\u6bcf\u4e2a segment \u8282\u70b9\u90fd\u4f1a\u521b\u5efa\u4e00\u4e9b\u8fdb\u7a0b\u6765\u5171\u540c\u5904\u7406\u6539\u67e5\u8be2\u3002\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u67e5\u8be2\u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003 TODO\u3002  \u7528\u6237\u5b9a\u4e49\u7684\u6570\u636e\u8868\u548c\u76f8\u5e94\u7684\u7d22\u5f15\u5c06\u4f1a\u81ea\u52a8\u88ab\u5206\u6563\u5230  product-name  \u7684\u8282\u70b9\u4e0a\uff0c\u6bcf\u4e2a segment \u4e0a\u90fd\u5b58\u50a8\u4e86\u4e00\u90e8\u5206\u7528\u6237\u6570\u636e\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6570\u636e\u662f\u4e0d\u76f8\u4ea4\u7684\u3002", 
            "title": "Segment \u8282\u70b9"
        }, 
        {
            "location": "/overview/#_1", 
            "text": "\u8f6f\u4ef6\u6570\u636e\u4ea4\u6362\u6a21\u5757\u662f product-name  \u67b6\u6784\u4e2d\u7684\u7f51\u7edc\u5c42\u3002\u6b64\u6a21\u5757\u8d1f\u8d23\u5904\u7406segment\u4e4b\u95f4\u548c\u7f51\u7edc\u4e4b\u95f4\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002\u6b64\u6a21\u5757\u9ed8\u8ba4\u4f7f\u7528\u7ecf\u8fc7\u6df1\u5ea6\u8c03\u4f18\u7684\u5e26\u6d41\u91cf\u63a7\u5236\u7684UDP\u534f\u8bae\u6765\u4f20\u8f93\u6570\u636e\u3002\u8fd9\u79cd\u7b97\u6cd5\u9664\u4e86\u63d0\u4f9bTCP\u534f\u8bae\u652f\u6301\u7684\u53ef\u9760\u6027\u5916\uff0c\u5728\u6027\u80fd\u548c\u6c34\u5e73\u6269\u5c55\u80fd\u529b\u90fd\u4f18\u4e8eTCP\u534f\u8bae\u3002", 
            "title": "\u8f6f\u4ef6\u6570\u636e\u4ea4\u6362\u6a21\u5757"
        }, 
        {
            "location": "/overview/#_2", 
            "text": "\u6570\u636e\u5e93\u7ba1\u7406\n  gpstart\n  gpstop\n  gpcheck  \u78c1\u76d8\u6269\u5bb9\n  gpfilespace  \u6269\u5c55\n  gpexpand  HA\n  gpinitstandby\n  gpactivatestandby  Replica\n  gpaddmirrors\n  gprecoverseg  \u7cfb\u7edf\u8868", 
            "title": "\u7ba1\u7406\u548c\u76d1\u63a7"
        }, 
        {
            "location": "/overview/#_3", 
            "text": "", 
            "title": "\u5e76\u884c\u6570\u636e\u52a0\u8f7d"
        }, 
        {
            "location": "/overview/#_4", 
            "text": "", 
            "title": "\u7cfb\u7edf\u5197\u4f59\u548c\u5bb9\u9519"
        }, 
        {
            "location": "/overview/#_5", 
            "text": "", 
            "title": "\u7edf\u8ba1\u4fe1\u606f"
        }, 
        {
            "location": "/management/management-accessing-database/", 
            "text": "\u8bbf\u95ee\nproduct-name\n\n\n\u672c\u5c0f\u7ed3\u5411\u60a8\u4ecb\u7ecd\u4f7f\u7528\u4e0d\u540c\u5de5\u5177\u8fde\u63a5 \nproduct-name\n \u7cfb\u7edf\u4f1a\u8bdd\u7684\u65b9\u6cd5\u3002\n\n\n\u5efa\u7acb\u4f1a\u8bdd\n\n\nUsers can connect to Greenplum Database using a PostgreSQL-compatible client program, such as psql. Users and administrators always connect to Greenplum Database through the master; the segments cannot accept client connections.\nIn order to establish a connection to the Greenplum Database master, you will need to know the following connection information and configure your client program accordingly.\n\n\n\n\n\n\n\n\nConnection Parameter\n\n\nDescription\n\n\nEnvironment Variable\n\n\n\n\n\n\n\n\n\n\nApplication name\n\n\nThe application name that is connecting to the database. The default value, held in the application_name connection parameter is psql.\n\n\n$PGAPPNAME\n\n\n\n\n\n\nDatabase name\n\n\nThe name of the database to which you want to connect. For a newly initialized system, use the template1 database to connect for the first time.\n\n\n$PGDATABASE\n\n\n\n\n\n\nHost name\n\n\nThe host name of the Greenplum Database master. The default host is the local host.\n\n\n$PGHOST\n\n\n\n\n\n\nPort\n\n\nThe port number that the Greenplum Database master instance is running on. The default is 5432.\n\n\n$PGPORT\n\n\n\n\n\n\nUser name\n\n\nThe database user (role) name to connect as. This is not necessarily the same as your OS user name. Check with your Greenplum administrator if you are not sure what you database user name is. Note that every Greenplum Database system has one superuser account that is created automatically at initialization time. This account has the same name as the OS name of the user who initialized the Greenplum system (typically gpadmin).\n\n\n$PGUSER\n\n\n\n\n\n\n\n\n\u652f\u6301\u5ba2\u6237\u7aef\u5217\u8868\n\n\nUsers can connect to Greenplum Database using various client applications:\n\n A number of Greenplum Database Client Applications are provided with your Greenplum installation.\nThe psql client application provides an interactive command-line interface to Greenplum Database.\n\n pgAdmin III for Greenplum Database is an enhanced version of the popular management tool pgAdmin III. Since version 1.10.0, the pgAdmin III client available from PostgreSQL Tools includes support\nfor Greenplum-specific features. Installation packages are available for download from the pgAdmin download site .\n\n Using standard Database Application Interfaces, such as ODBC and JDBC, users can create their own client applications that interface to Greenplum Database. Because Greenplum Database is based on PostgreSQL, it uses the standard PostgreSQL database drivers.\n\n Most Third-Party Client Tools that use standard database interfaces, such as ODBC and JDBC, can be configured to connect to Greenplum Database.\n\n\nConnecting with psql\n\n\nDepending on the default values used or the environment variables you have set, the following examples show how to access a database via psql:\n\n\n$ psql -d gpdatabase -h master_host -p 5432 -U gpadmin\n\n$ psql gpdatabase\n\n$ psql\n\n\n\nIf a user-defined database has not yet been created, you can access the system by connecting to the template1 database. For example:\n\n\n$ psql template1\n\n\n\nAfter connecting to a database, psql provides a prompt with the name of the database to which psql is currently connected, followed by the string =\n (or =# if you are the database superuser). For example:\n\n\ngpdatabase=\n\n\n\n\nAt the prompt, you may type in SQL commands. A SQL command must end with a ; (semicolon) in order to be sent to the server and executed. For example:\n\n\n=\n SELECT * FROM mytable;\n\n\n\nSee the Greenplum Reference Guide for information about using the psql client application and SQL commands and syntax.\n\n\npgAdmin III for Greenplum Database\n\n\nIf you prefer a graphic interface, use pgAdmin III for Greenplum Database. This GUI client supports PostgreSQL databases with all standard pgAdmin III features, while adding support for Greenplum-specific features.\npgAdmin III for Greenplum Database supports the following Greenplum-specific features:\n\n\n\n\nExternal tables\n\n\nAppend-optimized tables, including compressed append-optimized tables\n\n\nTable partitioning\n\n\nResource queues\n\n\nGraphical EXPLAIN ANALYZE\n\n\nGreenplum server configuration parameters\n\n\n\n\nDatabase Application Interfaces\n\n\nYou may want to develop your own client applications that interface to Greenplum Database. PostgreSQL provides a number of database drivers for the most commonly used database application programming interfaces (APIs), which can also be used with Greenplum Database. These drivers are available as\na separate download. Each driver is an independent PostgreSQL development project and must be downloaded, installed and configured to connect to Greenplum Database. The following drivers are available:\n\n\n\n\n\n\n\n\nAPI\n\n\nPostgreSQL Driver\n\n\nDownload Link\n\n\n\n\n\n\n\n\n\n\nODBC\n\n\npgodbc\n\n\nAvailable in the Greenplum Database Connectivity package, which can be downloaded from https://network.pivotal.io/ products.\n\n\n\n\n\n\nJDBC\n\n\npgjdbc\n\n\nAvailable in the Greenplum Database Connectivity package, which can be downloaded from https://network.pivotal.io/ products.\n\n\n\n\n\n\nPerl DBI\n\n\npgperl\n\n\nhttp://search.cpan.org/dist/DBD-Pg/\n\n\n\n\n\n\nPython DBI\n\n\npygresql\n\n\nhttp://www.pygresql.org/\n\n\n\n\n\n\n\n\nGeneral instructions for accessing a Greenplum Database with an API are:\n1. Download your programming language platform and respective API from the appropriate source. For example, you can get the Java Development Kit (JDK) and JDBC API from Sun.\n\n\n\n\nWrite your client application according to the API specifications. When programming your application, be aware of the SQL support in Greenplum Database so you do not include any unsupported SQL syntax.\n\n\n\n\nDownload the appropriate PostgreSQL driver and configure connectivity to your Greenplum Database master instance. Greenplum Database provides a client tools package that contains the supported database drivers for Greenplum Database. Download the client tools package from Pivotal Network and documentation from Pivotal Documentation.\n\n\nThird-Party Client Tools\n\n\nMost third-party extract-transform-load (ETL) and business intelligence (BI) tools use standard database interfaces, such as ODBC and JDBC, and can be configured to connect to Greenplum Database. Pivotal has worked with the following tools on previous customer engagements and is in the process of becoming officially certified:\n\n\n\n\nBusiness Objects\n\n\nMicrostrategy\n\n\nInformatica Power Center\n\n\nMicrosoft SQL Server Integration Services (SSIS) and Reporting Services (SSRS)\n\n\nAscential Datastage\n\n\nSAS\n\n\nIBM Cognos\n\n\n\n\nPivotal Professional Services can assist users in configuring their chosen third-party tool for use with Greenplum Database.", 
            "title": "\u8bbf\u95ee\u6570\u636e\u5e93"
        }, 
        {
            "location": "/management/management-accessing-database/#product-name", 
            "text": "\u672c\u5c0f\u7ed3\u5411\u60a8\u4ecb\u7ecd\u4f7f\u7528\u4e0d\u540c\u5de5\u5177\u8fde\u63a5  product-name  \u7cfb\u7edf\u4f1a\u8bdd\u7684\u65b9\u6cd5\u3002", 
            "title": "\u8bbf\u95ee&lt;&amp;product-name&gt;"
        }, 
        {
            "location": "/management/management-accessing-database/#_1", 
            "text": "Users can connect to Greenplum Database using a PostgreSQL-compatible client program, such as psql. Users and administrators always connect to Greenplum Database through the master; the segments cannot accept client connections.\nIn order to establish a connection to the Greenplum Database master, you will need to know the following connection information and configure your client program accordingly.     Connection Parameter  Description  Environment Variable      Application name  The application name that is connecting to the database. The default value, held in the application_name connection parameter is psql.  $PGAPPNAME    Database name  The name of the database to which you want to connect. For a newly initialized system, use the template1 database to connect for the first time.  $PGDATABASE    Host name  The host name of the Greenplum Database master. The default host is the local host.  $PGHOST    Port  The port number that the Greenplum Database master instance is running on. The default is 5432.  $PGPORT    User name  The database user (role) name to connect as. This is not necessarily the same as your OS user name. Check with your Greenplum administrator if you are not sure what you database user name is. Note that every Greenplum Database system has one superuser account that is created automatically at initialization time. This account has the same name as the OS name of the user who initialized the Greenplum system (typically gpadmin).  $PGUSER", 
            "title": "\u5efa\u7acb\u4f1a\u8bdd"
        }, 
        {
            "location": "/management/management-accessing-database/#_2", 
            "text": "Users can connect to Greenplum Database using various client applications:  A number of Greenplum Database Client Applications are provided with your Greenplum installation.\nThe psql client application provides an interactive command-line interface to Greenplum Database.  pgAdmin III for Greenplum Database is an enhanced version of the popular management tool pgAdmin III. Since version 1.10.0, the pgAdmin III client available from PostgreSQL Tools includes support\nfor Greenplum-specific features. Installation packages are available for download from the pgAdmin download site .  Using standard Database Application Interfaces, such as ODBC and JDBC, users can create their own client applications that interface to Greenplum Database. Because Greenplum Database is based on PostgreSQL, it uses the standard PostgreSQL database drivers.  Most Third-Party Client Tools that use standard database interfaces, such as ODBC and JDBC, can be configured to connect to Greenplum Database.", 
            "title": "\u652f\u6301\u5ba2\u6237\u7aef\u5217\u8868"
        }, 
        {
            "location": "/management/management-accessing-database/#connecting-with-psql", 
            "text": "Depending on the default values used or the environment variables you have set, the following examples show how to access a database via psql:  $ psql -d gpdatabase -h master_host -p 5432 -U gpadmin\n\n$ psql gpdatabase\n\n$ psql  If a user-defined database has not yet been created, you can access the system by connecting to the template1 database. For example:  $ psql template1  After connecting to a database, psql provides a prompt with the name of the database to which psql is currently connected, followed by the string =  (or =# if you are the database superuser). For example:  gpdatabase=   At the prompt, you may type in SQL commands. A SQL command must end with a ; (semicolon) in order to be sent to the server and executed. For example:  =  SELECT * FROM mytable;  See the Greenplum Reference Guide for information about using the psql client application and SQL commands and syntax.", 
            "title": "Connecting with psql"
        }, 
        {
            "location": "/management/management-accessing-database/#pgadmin-iii-for-greenplum-database", 
            "text": "If you prefer a graphic interface, use pgAdmin III for Greenplum Database. This GUI client supports PostgreSQL databases with all standard pgAdmin III features, while adding support for Greenplum-specific features.\npgAdmin III for Greenplum Database supports the following Greenplum-specific features:   External tables  Append-optimized tables, including compressed append-optimized tables  Table partitioning  Resource queues  Graphical EXPLAIN ANALYZE  Greenplum server configuration parameters", 
            "title": "pgAdmin III for Greenplum Database"
        }, 
        {
            "location": "/management/management-accessing-database/#database-application-interfaces", 
            "text": "You may want to develop your own client applications that interface to Greenplum Database. PostgreSQL provides a number of database drivers for the most commonly used database application programming interfaces (APIs), which can also be used with Greenplum Database. These drivers are available as\na separate download. Each driver is an independent PostgreSQL development project and must be downloaded, installed and configured to connect to Greenplum Database. The following drivers are available:     API  PostgreSQL Driver  Download Link      ODBC  pgodbc  Available in the Greenplum Database Connectivity package, which can be downloaded from https://network.pivotal.io/ products.    JDBC  pgjdbc  Available in the Greenplum Database Connectivity package, which can be downloaded from https://network.pivotal.io/ products.    Perl DBI  pgperl  http://search.cpan.org/dist/DBD-Pg/    Python DBI  pygresql  http://www.pygresql.org/     General instructions for accessing a Greenplum Database with an API are:\n1. Download your programming language platform and respective API from the appropriate source. For example, you can get the Java Development Kit (JDK) and JDBC API from Sun.   Write your client application according to the API specifications. When programming your application, be aware of the SQL support in Greenplum Database so you do not include any unsupported SQL syntax.   Download the appropriate PostgreSQL driver and configure connectivity to your Greenplum Database master instance. Greenplum Database provides a client tools package that contains the supported database drivers for Greenplum Database. Download the client tools package from Pivotal Network and documentation from Pivotal Documentation.", 
            "title": "Database Application Interfaces"
        }, 
        {
            "location": "/management/management-accessing-database/#third-party-client-tools", 
            "text": "Most third-party extract-transform-load (ETL) and business intelligence (BI) tools use standard database interfaces, such as ODBC and JDBC, and can be configured to connect to Greenplum Database. Pivotal has worked with the following tools on previous customer engagements and is in the process of becoming officially certified:   Business Objects  Microstrategy  Informatica Power Center  Microsoft SQL Server Integration Services (SSIS) and Reporting Services (SSRS)  Ascential Datastage  SAS  IBM Cognos   Pivotal Professional Services can assist users in configuring their chosen third-party tool for use with Greenplum Database.", 
            "title": "Third-Party Client Tools"
        }, 
        {
            "location": "/management/management-defining-database-objects/", 
            "text": "\u5b9a\u4e49\u6570\u636e\u5e93\u5bf9\u8c61\n\n\n\u672c\u8282\u4ecb\u7ecd \nproduct-name\n \u652f\u6301\u7684\u6570\u636e\u5b9a\u4e49\u8bed\u8a00 (DDL) \u4ee5\u53ca\u5982\u4f55\u521b\u5efa\u548c\u7ba1\u7406\u6570\u636e\u5e93\u5bf9\u8c61\u3002\n\n\n\u5728 Greenplum Database \u4e2d\u521b\u5efa\u5bf9\u8c61\u5305\u62ec\u524d\u671f\u9009\u62e9\u6570\u636e\u5206\u5e03\u3001 \u5b58\u50a8\u9009\u9879\u3001 \u6570\u636e\u52a0\u8f7d\u548c\u5176\u4ed6\u4f1a\u5f71\u54cd\u60a8\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u8fd0\u884c\u6027\u80fd\u7684\u529f\u80fd\u3002\u4e86\u89e3\u53ef\u7528\u7684\u9009\u9879\u548c\u6570\u636e\u5e93\u5185\u90e8\u5982\u4f55\u652f\u6301\u8fd9\u4e9b\u9009\u9879\u5c06\u5e2e\u52a9\u60a8\u505a\u51fa\u6b63\u786e\u7684\u51b3\u5b9a\u3002\n\u5927\u90e8\u5206 Greenplum \u9ad8\u7ea7\u7279\u6027\u662f\u901a\u8fc7\u4f7f\u7528\u6269\u5c55\u7684 SQL CREATE DDL \u8bed\u53e5\u5b8c\u6210\u7684\u3002\n\n\n\u521b\u5efa\u548c\u7ba1\u7406\u6570\u636e\u5e93\n\n\nproduct-name\n \u652f\u6301\u521b\u5efa\u591a\u4e2a\u72ec\u7acb\u7684\u6570\u636e\u5e93\u5bf9\u6570\u636e\u8fdb\u884c\u9694\u79bb\u3002\u8fd9\u4e2a\u7279\u6027\u4e0e\u67d0\u4e9b\u6570\u636e\u5e93\u5e76\u4e0d\u76f8\u540c\uff0c\u4f8b\u5982\uff1aOracle\u6570\u636e\u5e93\u3002\u867d\u7136 \nproduct-name\n \u652f\u6301\u591a\u4e2a\u6570\u636e\u5e93\uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u7a0b\u5e8f\u4e00\u6b21\u53ea\u80fd\u8fde\u63a5\u5e76\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u5e93\u3002\n\n\n\u5173\u4e8e\u6570\u636e\u5e93\u6a21\u7248\n\n\n\u60a8\u521b\u5efa\u7684\u6bcf\u4e00\u4e2a\u6570\u636e\u5e93\u90fd\u662f\u57fa\u4e8e\u4e00\u4e2a\u6a21\u7248\u5f97\u5230\u7684\u3002\u7cfb\u7edf\u4e2d\u7684\u9ed8\u8ba4\u6a21\u7248\u6570\u636e\u5e93\u53eb\u505a\uff1atemplate1\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u4e0d\u8981\u5728template1\u4e2d\u521b\u5efa\u4efb\u4f55\u6570\u636e\u5bf9\u8c61\uff0c\u5426\u5219\u60a8\u540e\u7eed\u521b\u5efa\u7684\u6570\u636e\u5e93\u90fd\u4f1a\u5305\u542b\u8fd9\u4e9b\u6570\u636e\u3002\n\n\nproduct-name\n \u5185\u90e8\u8fd8\u4f7f\u7528\u53e6\u5916\u4e24\u4e2a\u5185\u7f6e\u6a21\u7248\uff1atemplate0 \u548c postgres\u3002\u56e0\u6b64\u8bf7\u52ff\u5220\u9664\u6216\u4fee\u6539 template0 \u548c postgres \u6570\u636e\u5e93\u3002\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 template0 \u4f5c\u4e3a\u6a21\u7248\uff0c\u521b\u5efa\u4e00\u4e2a\u53ea\u542b\u6709\u6807\u51c6\u9884\u5b9a\u4e49\u5bf9\u8c61\u7684\u7a7a\u767d\u6570\u636e\u5e93\u3002\n\n\n\u521b\u5efa\u6570\u636e\u5e93\n\n\n\u4f7f\u7528 CREATE DATABASE \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e93. \u4f8b\u5982:\n\n\n=\n CREATE DATABASE new_dbname;\n\n\n\n\u82e5\u8981\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93, \u60a8\u9700\u8981\u62e5\u6709\u521b\u5efa\u6570\u636e\u5e93\u7684\u6743\u9650\u6216\u8005\u8d85\u7ea7\u7528\u6237\u6743\u9650\u3002\u5982\u679c\u60a8\u6ca1\u6709\u76f8\u5e94\u7684\u6743\u9650\uff0c\u521b\u5efa\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u5c06\u4f1a\u5931\u8d25\u3002\u53ef\u4ee5\u8054\u7cfb\u6570\u636e\u7ba1\u7406\u5458\u6765\u53d6\u5f97\u521b\u5efa\u6570\u636e\u5e93\u7684\u6743\u9650\u3002\n\n\n\u514b\u9686\u6570\u636e\u5e93\n\n\n\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u65f6\uff0c\u7cfb\u7edf\u5b9e\u9645\u4e0a\u901a\u8fc7\u514b\u9686\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6807\u51c6\u6570\u636e\u5e93\u6a21\u7248 template1 \u6765\u5b8c\u6210\u3002\u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4efb\u610f\u4e00\u4e2a\u6570\u636e\u4f5c\u4e3a\u521b\u5efa\u65b0\u6570\u636e\u5e93\u7684\u6a21\u7248\uff0c\u8fd9\u6837\u65b0\u7684\u6570\u636e\u5e93\u5c31\u4f1a\u81ea\u52a8\u5305\u542b\u6a21\u7248\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u548c\u6570\u636e\u3002\u4f8b\u5982\uff1a\n\n\n=\n CREATE DATABASE new_dbname TEMPLATE old_dbname;\n\n\n\n\u5217\u51fa\u6240\u6709\u6570\u636e\u5e93\n\n\n\u5982\u679c\u60a8\u4f7f\u7528 psql \u5ba2\u6237\u7aef\u7a0b\u5e8f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 \\l \u547d\u4ee4\u5217\u51fa\u7cfb\u7edf\u4e2d\u7684\u6a21\u7248\u6570\u636e\u5e93\u548c\u6570\u636e\u5e93\u3002\u5982\u679c\u60a8\u4f7f\u7528\u5176\u4ed6\u5ba2\u6237\u7aef\u7a0b\u5e8f\u5e76\u4e14\u62e5\u6709\u8d85\u7ea7\u7528\u6237\u6743\u9650\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 pg_database \u7cfb\u7edf\u8868\u5217\u51fa\u6240\u6709\u6570\u636e\u5e93\u3002\u4f8b\u5982\uff1a\n\n\n=\n SELECT datname from pg_database;\n\n\n\n\u4fee\u6539\u6570\u636e\u5e93\n\n\nALTER DATABASE \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u6570\u636e\u5e93\u7684\u5c5e\u4e3b\uff0c\u540d\u79f0\u6216\u8005\u9ed8\u8ba4\u53c2\u6570\u914d\u7f6e\u3002\u4f8b\u5982, \u4e0b\u9762\u7684\u547d\u4ee4\u4fee\u6539\u4e86\u6570\u636e\u5e93\u9ed8\u8ba4\u6a21\u5f0f\u641c\u7d22\u8def\u5f84\uff1a\n\n\n=\n ALTER DATABASE mydatabase SET search_path TO myschema, public, pg_catalog;\n\n\n\n\u4f60\u9700\u8981\u662f\u6570\u636e\u5e93\u7684\u5c5e\u4e3b\u6216\u62e5\u6709\u8d85\u7ea7\u7528\u6237\u6743\u9650\uff0c\u624d\u53ef\u4ee5\u5bf9\u6570\u636e\u5e93\u4fe1\u606f\u8fdb\u884c\u4fee\u6539\u3002\n\n\n\u5220\u9664\u6570\u636e\u5e93\n\n\nDROP DATABASE \u547d\u4ee4\u53ef\u4ee5\u5220\u9664\u6570\u636e\u5e93\u3002\u8be5\u547d\u4ee4\u5c06\u4f1a\u4ece\u7cfb\u7edf\u8868\u4e2d\u5220\u9664\u6570\u636e\u5e93\u76f8\u5173\u4fe1\u606f\uff0c\u5e76\u5728\u78c1\u76d8\u4e0a\u5220\u9664\u8be5\u6570\u636e\u5e93\u76f8\u5173\u7684\u6240\u6709\u6570\u636e\u3002\u53ea\u6709\u6570\u636e\u5e93\u7684\u5c5e\u4e3b\u6216\u8005\u8d85\u7ea7\u7528\u6237\u624d\u80fd\u591f\u5220\u9664\u6570\u636e\u5e93\u3002\u6b63\u5728\u88ab\u4f7f\u7528\u7684\u6570\u636e\u5e93\u662f\u65e0\u6cd5\u88ab\u5220\u9664\u7684\u3002\u4f8b\u5982\uff1a\n\n\n=\n \\c template1\n=\n DROP DATABASE mydatabase;\n\n\n\n\u8b66\u544a\uff1a\u5220\u9664\u6570\u636e\u5e93\u662f\u4e0d\u53ef\u9006\u7684\u8fc7\u7a0b\uff0c\u8bf7\u5c0f\u5fc3\u4f7f\u7528\u3002\n\n\n\u521b\u5efa\u548c\u7ba1\u7406\u6a21\u5f0f\n\n\n\u901a\u8fc7\u6a21\u5f0f\uff08Schema\uff09\u5bf9\u6570\u636e\u5e93\u5bf9\u8c61\u8fdb\u884c\u903b\u8f91\u4e0a\u7684\u5206\u7c7b\u7ec4\u7ec7\u3002\u901a\u8fc7\u4f7f\u7528\u6a21\u5f0f\u5141\u8bb8\u60a8\u5728\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u521b\u5efa\u540c\u540d\u5bf9\u8c61\uff08\u4f8b\u5982\uff1a\u8868\uff09\u3002\n\n\n\u9ed8\u8ba4\u6a21\u5f0f \"Public\"\n\n\n\u6570\u636e\u5e93\u9ed8\u8ba4\u5305\u542b\u4e00\u4e2a\u9ed8\u8ba4\u6a21\u5f0f\uff1apublic\u3002\u5982\u679c\u60a8\u6ca1\u6709\u521b\u5efa\u4efb\u4f55\u6a21\u5f0f\uff0c\u65b0\u521b\u89c1\u7684\u5bf9\u8c61\u4f1a\u9ed8\u8ba4\u4f7f\u7528 public \u6a21\u5f0f\u3002\u6570\u636e\u5e93\u6240\u6709\u7684\u7528\u6237\u90fd\u62e5\u6709 public \u6a21\u5f0f\u4e0a\u7684 CREATE \uff08\u521b\u5efa\uff09\u548c USAGE\uff08\u4f7f\u7528\uff09\u6743\u9650\u3002\u5f53\u60a8\u521b\u5efa\u989d\u5916\u7684\u6a21\u5f0f\u65f6\uff0c\u60a8\u53ef\u4ee5\u5bf9\u7528\u6237\u6388\u4e88\u6743\u9650\uff0c\u6765\u63a7\u5236\u8bbf\u95ee\u3002\n\n\n\u521b\u5efa\u6a21\u5f0f\n\n\n\u4f7f\u7528 \nCREATE SCHEMA\n \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6a21\u5f0f. \u4f8b\u5982: \n\n\n=\n CREATE SCHEMA myschema;\n\n\n\n\u8981\u5728\u6307\u5b9a\u7684\u6a21\u5f0f\u4e0b\u521b\u5efa\u5bf9\u8c61\u6216\u8bbf\u95ee\u5bf9\u8c61\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u9650\u5b9a\u540d\u683c\u5f0f\u6765\u8fdb\u884c\u3002\u9650\u5b9a\u540d\u683c\u5f0f\u662f\u6a21\u5f0f\u540d\u201d.\u201c\u8868\u540d\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a\n\n\nmyschema.table\n\n\n\n\u53c2\u8003 \n\u6a21\u5f0f\u641c\u7d22\u8def\u5f84\n \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8bbf\u95ee\u6a21\u5f0f\u7684\u8bf4\u660e.\n\u53ef\u4ee5\u901a\u8fc7\u4e3a\u7528\u6237\u521b\u5efa\u79c1\u6709\u7684\u6a21\u5f0f\uff0c\u6765\u66f4\u597d\u7684\u9650\u5236\u7528\u6237\u5bf9\u540d\u79f0\u7a7a\u95f4\u7684\u4f7f\u7528\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a\n\n\n=\n CREATE SCHEMA schemaname AUTHORIZATION username;\n\n\n\n\u6a21\u5f0f\u7684\u641c\u7d22\u8def\u5f84\n\n\n\u901a\u8fc7\u4f7f\u7528\u6a21\u5f0f\u9650\u5b9a\u540d\uff0c\u53ef\u4ee5\u6307\u5411\u6570\u636e\u5e93\u4e2d\u7279\u5b9a\u4f4d\u7f6e\u7684\u5bf9\u8c61\u3002\u4f8b\u5982\uff1a\n\n\n=\n SELECT * FROM myschema.mytable;\n\n\n\n\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 search_path \u6765\u6307\u5b9a\u6a21\u5f0f\u7684\u641c\u7d22\u987a\u5e8f\u3002\u641c\u7d22\u8def\u5f84\u4e2d\u7b2c\u4e00\u4e2a\u6a21\u5f0f\u5c31\u662f\u7cfb\u7edf\u4f7f\u7528\u7684\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u5f53\u6ca1\u6709\u5f15\u7528\u6a21\u5f0f\u65f6\uff0c\u5bf9\u8c61\u5c06\u4f1a\u81ea\u52a8\u521b\u5efa\u5728\u9ed8\u8ba4\u6a21\u5f0f\u4e0b\u3002\n\n\n\u8bbe\u7f6e\u6a21\u5f0f\u641c\u7d22\u8def\u5f84\n\n\nsearch_path \u914d\u7f6e\u53c2\u6570\u6d8c\u6765\u8bbe\u7f6e\u6a21\u5f0f\u641c\u7d22\u987a\u5e8f\u3002ALTER DATABASE \u547d\u4ee4\u53ef\u4ee5\u8bbe\u7f6e\u6570\u636e\u5e93\u5185\u9ed8\u8ba4\u641c\u7d22\u8def\u5f84\u3002\u4f8b\u5982\uff1a\n\n\n =\n ALTER DATABASE mydatabase SET search_path TO myschema, public, pg_catalog;\n\n\n\n\u8fd8\u53ef\u4ee5\u901a\u8fc7 ALTER ROLE \u547d\u4ee4\u6765\u4e3a\u6307\u5b9a\u7684\u7528\u6237\u4fee\u6539 search_path \u53c2\u6570\u3002\u4f8b\u5982\uff1a\n\n\n =\n ALTER ROLE sally SET search_path TO myschema, public, pg_catalog;\n\n\n\n\u67e5\u770b\u5f53\u524d\u6a21\u5f0f\n\n\n\u901a\u8fc7 current_schema() \u51fd\u6570\uff0c\u7cfb\u7edf\u53ef\u4ee5\u663e\u793a\u5f53\u524d\u6a21\u5f0f\u3002\u4f8b\u5982\uff1a\n\n\n=\n SELECT current_schema();\n\n\n\n\u7c7b\u4f3c\u7684\uff0c\u4f7f\u7528 SHOW \u547d\u4ee4\u4e5f\u53ef\u4ee5\u663e\u793a\u5f53\u524d\u641c\u7d22\u8def\u5f84\u3002\u4f8b\u5982\uff1a\n\n\n=\n SHOW search_path;\n\n\n\n\u5220\u9664\u6a21\u5f0f\n\n\n\u4f7f\u7528 DROP SCHEMA \u547d\u4ee4\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff1a\n\n\n=\n DROP SCHEMA myschema;\n\n\n\n\u9ed8\u8ba4\u7684\u5220\u9664\u547d\u4ee4\u53ea\u80fd\u5220\u9664\u4e00\u4e2a\u7a7a\u7684\u6a21\u5f0f\u3002\u8981\u5220\u9664\u6a21\u5f0f\u53ca\u5176\u5185\u90e8\u5305\u542b\u7684\u6240\u6709\u5bf9\u8c61\uff08\u8868\uff0c\u6570\u636e\uff0c\u51fd\u6570\uff0c\u7b49\uff09\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff1a\n\n\n=\n DROP SCHEMA myschema CASCADE;\n\n\n\n\u7cfb\u7edf\u9884\u5b9a\u4e49\u6a21\u5f0f\n\n\n\u6bcf\u4e2a\u6570\u636e\u5e93\u4e2d\u5185\u7f6e\u4e86\u4e0b\u5217\u7cfb\u7edf\u6a21\u5f0f\uff1a\n\n\n\n\npg_catalog \u5305\u542b\u4e86\u7cfb\u7edf\u8868\uff0c\u5185\u5efa\u6570\u636e\u7c7b\u578b\uff0c\u51fd\u6570\u548c\u8fd0\u7b97\u7b26\u5bf9\u8c61\u3002\u6a21\u5f0f\u641c\u7d22\u8def\u5f84\u65f6\uff0c\u7cfb\u7edf\u603b\u662f\u4f1a\u8003\u8651\u6b64\u6a21\u5f0f\u4e0b\u7684\u6240\u6709\u5bf9\u8c61\u3002\n\n\ninformation_schema \u6a21\u5f0f\u5305\u542b\u4e86\u5927\u91cf\u6807\u51c6\u5316\u89c6\u56fe\u6765\u63cf\u8ff0\u6570\u636e\u5e93\u5185\u90e8\u5bf9\u8c61\u4fe1\u606f\u3002\u8fd9\u4e9b\u89c6\u56fe\u4ee5\u6807\u51c6\u5316\u65b9\u5f0f\u6765\u5c55\u73b0\u7cfb\u7edf\u8868\u4e2d\u7684\u4fe1\u606f\u3002\n\n\npg_toast \u5b58\u50a8\u5927\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a\u8bb0\u5f55\u5927\u7b11\u8d85\u8fc7\u9875\u9762\u5927\u5c0f\u7684\u5bf9\u8c61\u3002\u6b64\u6a21\u5f0f\u4e0b\u7684\u4fe1\u606f\u662f\u6570\u636e\u5e93\u5185\u90e8\u4f7f\u7528\u7684\u3002\n\n\npg_bitmapindex \u5b58\u50a8bitmap\u6240\u6709\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a\u503c\u5217\u8868\u3002\u6b64\u6a21\u5f0f\u4e0b\u7684\u4fe1\u606f\u662f\u6570\u636e\u5e93\u5185\u90e8\u4f7f\u7528\u7684\u3002\n\n\npg_aoseg \u5b58\u50a8 append-optimized \u8868\u5bf9\u8c61. \u6b64\u6a21\u5f0f\u4e0b\u7684\u4fe1\u606f\u662f\u6570\u636e\u5e93\u5185\u90e8\u4f7f\u7528\u7684\u3002\n\n\ngp_toolkit \u662f\u4e00\u4e2a\u7ba1\u7406\u89c6\u56fe\uff0c\u5185\u7f6e\u4e00\u4e9b\u5916\u90e8\u8868\uff0c\u89c6\u56fe\u548c\u51fd\u6570\u3002\u53ef\u4ee5\u901a\u8fc7SQL\u8bed\u53e5\u8fdb\u884c\u8bbf\u95ee\u3002\u6240\u6709\u6570\u636e\u5e93\u7528\u6237\u90fd\u80fd\u591f\u8bbf\u95ee gp_toolkit \u6765\u67e5\u770b\u65e5\u5fd7\u6587\u4ef6\u548c\u5176\u5b83\u7cfb\u7edf\u53c2\u6570\u3002\n\n\n\n\n\u521b\u5efa\u548c\u7ba1\u7406\u8868\n\n\nproduct-name\n \u4e2d\u7684\u8868\u548c\u5176\u5b83\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5341\u5206\u76f8\u4f3c\uff0c\u4f46\u662f\u4e3a\u4e86\u9002\u5e94\u5206\u5e03\u5f0f\u9700\u6c42\uff0c\u6570\u636e\u5c06\u4f1a\u5206\u6563\u5230\u591a\u4e2a\u8282\u70b9\u8fdb\u884c\u5b58\u50a8\u3002\u6bcf\u6b21\u521b\u5efa\u8868\u65f6\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u7684\u5206\u5e03\u7b56\u7565\u3002\n\n\n\u521b\u5efa\u8868\n\n\nCREATE TABLE\u547d\u4ee4\u7528\u6765\u521b\u5efa\u548c\u5b9a\u4e49\u8868\u7ed3\u6784\uff0c\u521b\u5efa\u8868\u65f6\uff0c\u60a8\u9700\u8981\u5b9a\u4e49\u4e0b\u9762\u4fe1\u606f\uff1a\n\n\n\n\n\u8868\u4e2d\u5305\u542b\u7684\u5217\u53ca\u5176\u5bf9\u5e94\u6570\u636e\u7c7b\u578b\u3002\u8bf7\u53c2\u8003 \u9009\u62e9\u5217\u6570\u636e\u7c7b\u578b\u3002\n\n\n\u7528\u4e8e\u9650\u5236\u8868\u6216\u5217\u5b58\u50a8\u6570\u636e\u7684\u8868\u7ea6\u675f\u6216\u5217\u7ea6\u675f\u3002\u8bf7\u53c2\u8003 \u8bbe\u7f6e\u8868\u7ea6\u675f\u548c\u5217\u7ea6\u675f\u3002\n\n\n\u6570\u636e\u5206\u5e03\u7b56\u7565\uff0c\u7cfb\u7edf\u5c06\u4f1a\u6839\u636e\u7b56\u7565\u5c06\u6570\u636e\u5b58\u50a8\u5230\u4e0d\u540c\u8282\u70b9\u3002\u8bf7\u53c2\u8003 \u9009\u62e9\u6570\u636e\u5206\u5e03\u7b56\u7565\u3002\n\n\n\u78c1\u76d8\u5b58\u50a8\u683c\u5f0f\u3002\u8bf7\u53c2\u8003 \u8868\u5b58\u50a8\u6a21\u578b\u3002\n\n\n\u5927\u8868\u7684\u6570\u636e\u5206\u533a\u7b56\u7565\u3002\u8bf7\u53c2\u8003 \u521b\u5efa\u548c\u7ba1\u7406\u6570\u636e\u5e93\uff08TODO: \u9519\u8bef\uff1f\uff09\u3002\n\n\n\n\n\u9009\u62e9\u5217\u6570\u636e\u7c7b\u578b\n\n\n\u5217\u6570\u636e\u7c7b\u578b\u7684\u9009\u62e9\u662f\u6839\u636e\u5b58\u50a8\u8be5\u5217\u7684\u6570\u636e\u503c\u51b3\u5b9a\u7684\u3002\u9009\u62e9\u6570\u636e\u7c7b\u578b\u5e94\u8be5\u5c3d\u53ef\u80fd\u9009\u62e9\u5360\u7528\u7a7a\u95f4\u66f4\u5c0f\uff0c\u540c\u65f6\u80fd\u591f\u4fdd\u8bc1\u5b58\u50a8\u6240\u6709\u6570\u636e\u5e76\u80fd\u6700\u5408\u7406\u7684\u8868\u8fbe\u6570\u636e\u3002\u4f8b\u5982\uff1a\u4f7f\u7528\u5b57\u7b26\u578b\u6570\u636e\u7c7b\u578b\u4fdd\u5b58\u5b57\u7b26\u4e32\uff0c\u65e5\u671f\u6216\u8005\u65e5\u671f\u65f6\u95f4\u6233\u7c7b\u578b\u4fdd\u5b58\u65e5\u671f\u7c7b\u578b\uff0c\u6570\u503c\u7c7b\u578b\u6765\u4fdd\u5b58\u6570\u503c\u3002\n\n\n\u6211\u4eec\u5efa\u8bae\u60a8\u4f7f\u7528 VARCHAR \u6216\u8005 TEXT \u6765\u4fdd\u5b58\u6587\u672c\u7c7b\u6570\u636e\u3002\u6211\u4eec\u4e0d\u63a8\u8350\u4f7f\u7528 CHAR \u7c7b\u578b\u4fdd\u5b58\u6587\u672c\u7c7b\u578b\u3002VARCHAR \u6216 TEXT \u7c7b\u578b\u5bf9\u4e8e\u6570\u636e\u672b\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\u5c06\u539f\u6837\u4fdd\u5b58\u548c\u5904\u7406\uff0c\u4f46\u662f CHAR \u7c7b\u578b\u4e0d\u80fd\u6ee1\u8db3\u8fd9\u4e2a\u9700\u6c42\u3002\u8bf7\u53c2\u8003 CREATE TABLE \u547d\u4ee4\u4e86\u89e3\u66f4\u591a\u76f8\u5173\u4fe1\u606f\u3002 \n\n\n\u60a8\u5e94\u8be5\u4f7f\u7528\u6700\u5c0f\u7684\u6570\u503c\u7c7b\u578b\u540c\u65f6\u6ee1\u8db3\u6570\u503c\u5b58\u50a8\u548c\u672a\u6765\u7684\u6269\u5c55\u9700\u6c42\u3002\u4f8b\u5982\uff1a\u4f7f\u7528 BIGINT \u7c7b\u578b\u5b58\u50a8 INT \u6216\u8005 SMALLINT \u4f1a\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\u3002\u5982\u679c\u6570\u636e\u968f\u65f6\u95f4\u63a8\u79fb\u9700\u8981\u6269\u5c55\uff0c\u5e76\u4e14\u6570\u636e\u91cd\u65b0\u52a0\u8f7d\u6bd4\u8f83\u6d6a\u8d39\u65f6\u95f4\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u5f00\u59cb\u5c31\u4f7f\u7528\u66f4\u5927\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f8b\u5982\uff1a\u5982\u679c\u5f53\u524d\u6570\u503c\u80fd\u591f\u7528SMALLINT\u5b58\u50a8\uff0c\u4f46\u662f\u6570\u503c\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u90a3\u4e48\u4f7f\u7528INT\u7c7b\u578b\u53ef\u80fd\u662f\u4e00\u4e2a\u957f\u671f\u6765\u770b\u66f4\u597d\u7684\u9009\u62e9\u3002\n\n\n\u5982\u679c\u60a8\u8003\u8651\u8fde\u63a5\u4e24\u5f20\u8868\uff0c\u90a3\u4e48\u8fde\u63a5\u53c2\u4e0e\u7684\u6570\u636e\u7c7b\u578b\u5e94\u8be5\u4fdd\u6301\u4e00\u81f4\u3002\u901a\u5e38\u8868\u8fde\u63a5\u662f\u7528\u4e00\u5f20\u8868\u7684\u4e3b\u952e\u548c\u53e6\u4e00\u5f20\u8868\u7684\u5916\u952e\u8fdb\u884c\u7684\u3002\u5f53\u6570\u636e\u7c7b\u578b\u4e0d\u4e00\u81f4\u65f6\uff0c\u6570\u636e\u5e93\u5c31\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u7136\u800c\u8fd9\u5b8c\u5168\u662f\u65e0\u610f\u4e49\u7684\u5f00\u9500\u3002\n\n\n\u7cfb\u7edf\u652f\u6301\u5927\u91cf\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6587\u6863\u540e\u9762\u4f1a\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\u3002\n\n\n\u8bbe\u7f6e\u8868\u7ea6\u675f\u548c\u5217\u7ea6\u675f\n\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u8868\u6216\u8005\u5217\u4e0a\u521b\u5efa\u7ea6\u675f\u6765\u9650\u5236\u5b58\u50a8\u5230\u8868\u4e2d\u7684\u6570\u636e\u3002\nproduct-name\n \u652f\u6301 PostgreSQL \u7684\u6240\u6709\u79cd\u7c7b\u7684\u7ea6\u675f\uff0c\u4f46\u662f\u60a8\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u989d\u5916\u7684\u9650\u5236\u6761\u4ef6\uff1a\n\n\n\n\nCHECK \u7ea6\u675f\u53ea\u80fd\u5f15\u7528 CHECK \u7684\u76ee\u6807\u8868\u3002\n\n\nUNIQUE \u548c PRIMARY KEY \u7ea6\u675f\u5fc5\u987b\u548c\u6570\u636e\u5206\u5e03\u952e\u548c\u5206\u533a\u952e\u517c\u5bb9\u3002\n\n\nFOREIGN KEY \u7ea6\u675f\u80fd\u591f\u521b\u5efa\uff0c\u4f46\u662f\u7cfb\u7edf\u4e0d\u4f1a\u68c0\u67e5\u6b64\u7ea6\u675f\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\n\u521b\u5efa\u5728\u5206\u533a\u8868\u4e0a\u7684\u7ea6\u675f\u5c06\u4f1a\u628a\u6574\u4e2a\u5206\u533a\u8868\u5f53\u6210\u4e00\u4e2a\u6574\u4f53\u5904\u7406\u3002\u7cfb\u7edf\u4e0d\u5141\u8bb8\u9488\u5bf9\u8868\u4e2d\u7279\u5b9a\u5206\u533a\u5b9a\u4e49\u7ea6\u675f\u6761\u4ef6\u3002\n\n\n\n\nCheck \u7ea6\u675f\n\n\nCheck \u7ea6\u675f\u5141\u8bb8\u4f60\u9650\u5236\u67d0\u4e2a\u5217\u503c\u5fc5\u987b\u6ee1\u8db3\u4e00\u4e2a\u5e03\u5c14\uff08\u771f\u503c\uff09\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff0c\u8981\u6c42\u4ea7\u54c1\u4ef7\u683c\u5fc5\u987b\u662f\u4e00\u4e2a\u6b63\u6570\uff1a\n\n\n=\n CREATE TABLE products \n           ( product_no integer, \n             name text, \n             price numeric CHECK (price \n 0) );\n\n\n\n\u975e\u7a7a\u7ea6\u675f\n\n\n\u975e\u7a7a\u7ea6\u675f\u5141\u8bb8\u4f60\u9650\u5236\u67d0\u4e2a\u5217\u503c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u6b64\u7ea6\u675f\u603b\u662f\u4ee5\u5217\u7ea6\u675f\u5f62\u5f0f\u4f7f\u7528\u3002\u4f8b\u5982\uff1a\n\n\n=\n CREATE TABLE products \n           ( product_no integer NOT NULL,\n             name text NOT NULL,\n             price numeric );\n\n\n\n\u7ea6\u675f\u7ea6\u675f\n\n\n\u552f\u4e00\u7ea6\u675f\u786e\u4fdd\u5b58\u50a8\u5728\u4e00\u5f20\u8868\u4e2d\u7684\u4e00\u5217\u6216\u591a\u5217\u6570\u636e\u6570\u636e\u5df2\u5b9a\u552f\u4e00\u3002\u8981\u4f7f\u7528\u552f\u4e00\u7ea6\u675f\uff0c\u8868\u5fc5\u987b\u4f7f\u7528Hash\u5206\u5e03\u7b56\u7565\uff0c\u5e76\u4e14\u7ea6\u675f\u5217\u5fc5\u987b\u548c\u8868\u7684\u5206\u5e03\u952e\u5bf9\u5e94\u7684\u5217\u4e00\u81f4\uff08\u6216\u8005\u662f\u8d85\u96c6\uff09\u3002\u4f8b\u5982\uff1a\n\n\n=\n CREATE TABLE products \n           ( product_no integer UNIQUE, \n             name text, \n             price numeric)\n          DISTRIBUTED BY (product_no);\n\n\n\n\u4e3b\u952e\u7ea6\u675f\n\n\n\u4e3b\u952e\u7ea6\u675f\u662f\u552f\u4e00\u7ea6\u675f\u548c\u975e\u7a7a\u7ea6\u675f\u7684\u7ec4\u5408\u3002\u8981\u4f7f\u7528\u4e3b\u952e\u7ea6\u675f\uff0c\u8868\u5fc5\u987b\u4f7f\u7528Hash\u5206\u5e03\u7b56\u7565\uff0c\u5e76\u4e14\u7ea6\u675f\u5217\u5fc5\u987b\u548c\u8868\u7684\u5206\u5e03\u952e\u5bf9\u5e94\u7684\u5217\u4e00\u81f4\uff08\u6216\u8005\u662f\u8d85\u96c6\uff09\u3002\u5982\u679c\u4e00\u5f20\u8868\u6307\u5b9a\u4e3b\u952e\u7ea6\u675f\uff0c\u5206\u5e03\u952e\u503c\u9ed8\u8ba4\u4f1a\u4f7f\u7528\u4e3b\u952e\u7ea6\u675f\u6307\u5b9a\u7684\u5217\u3002\u4f8b\u5982\uff1a\n\n\n=\n CREATE TABLE products \n           ( product_no integer PRIMARY KEY, \n             name text, \n             price numeric)\n          DISTRIBUTED BY (product_no);\n\n\n\n\u5916\u952e\u7ea6\u675f\n\n\nproduct-name\n \u4e0d\u652f\u6301\u5916\u952e\u7ea6\u675f\uff0c\u4f46\u662f\u5141\u8bb8\u60a8\u58f0\u660e\u5916\u952e\u7ea6\u675f\u3002\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u884c\u53c2\u7167\u5b8c\u6574\u6027\u68c0\u67e5\u3002\n\n\n\u5916\u952e\u7ea6\u675f\u6307\u5b9a\u4e00\u5217\u6216\u591a\u5217\u5fc5\u987b\u4e0e\u53e6\u4e00\u5f20\u8868\u4e2d\u503c\u76f8\u5339\u914d\uff0c\u6ee1\u8db3\u4e24\u5f20\u8868\u4e4b\u95f4\u7684\u53c2\u7167\u5b8c\u6574\u6027\u3002\nproduct-name\n\u4e0d\u652f\u6301\u6570\u636e\u5206\u5e03\u5230\u591a\u4e2a\u8282\u70b9\u7684\u53c2\u7167\u5b8c\u6574\u6027\u68c0\u67e5\u3002\n\n\n\u9009\u62e9\u8868\u7684\u6570\u636e\u5206\u5e03\u5217\n\n\n\u6240\u6709 \nproduct-name\n \u6570\u636e\u8868\u90fd\u662f\u5206\u5e03\u5728\u591a\u4e2a\u8282\u70b9\u7684\u3002\u5f53\u60a8\u521b\u5efa\u6216\u4fee\u6539\u8868\u65f6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 DISTRIBUTED BY\uff08\u57fa\u4e8e\u54c8\u5e0c\u5206\u5e03\uff09\u6216\u8005 DISTRIBUTED RANDOMLY(\u968f\u673a\u5206\u5e03)\u6765\u4e3a\u8868\u6307\u5b9a\u6570\u636e\u5206\u5e03\u89c4\u5219\u3002\n\n\n\u6ce8\u610f\uff1aThe Greenplum Database server configuration parameter gp_create_table_random_default_distribution controls the table distribution policy if the DISTRIBUTED BY clause is not specified when you create a table.\nFor information about the parameter, see \"Server Configuration Parameters\" of the Greenplum Database Reference Guide.\n\n\n\u5f53\u60a8\u5728\u8003\u8651\u8868\u7684\u6570\u636e\u5206\u5e03\u7b56\u7565\u65f6\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u7684\u95ee\u9898\u6765\u5e2e\u52a9\u51b3\u7b56\uff1a\n\n\n\n\n\u5747\u5300\u7684\u5206\u5e03\u6570\u636e \u2014 \u4e3a\u4e86\u5c3d\u53ef\u80fd\u83b7\u5f97\u6700\u4f73\u6027\u80fd\uff0c\u6bcf\u4e2a\u8282\u70b9\u5e94\u8be5\u5c3d\u53ef\u80fd\u83b7\u5f97\u5747\u5300\u7684\u6570\u636e\u3002\u5982\u679c\u6570\u636e\u5448\u73b0\u51fa\u6781\u5ea6\u4e0d\u5747\u5300\uff0c\u90a3\u4e48\u6570\u636e\u91cf\u8f83\u5927\u7684\u8282\u70b9\u5c31\u9700\u8981\u66f4\u591a\u8d44\u6e90\u751a\u81f3\u662f\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\u76f8\u5e94\u7684\u5de5\u4f5c\u3002\u9009\u62e9\u6570\u636e\u5206\u5e03\u952e\u503c\u65f6\u5c3d\u91cf\u4fdd\u8bc1\u952e\u503c\u552f\u4e00\uff0c\u4f8b\u5982\u4f7f\u7528\u4e3b\u952e\u7ea6\u675f\u3002\n\n\n\u5c40\u90e8\u548c\u5206\u5e03\u5f0f\u8fd0\u7b97 \u2014 \u5c40\u90e8\u8fd0\u7b97\u8fdc\u8fdc\u5feb\u4e8e\u5206\u5e03\u662f\u8fd0\u7b97\u3002\u5982\u679c\u8fde\u63a5\uff0c\u6392\u5e8f\u6216\u805a\u5408\u8fd0\u7b97\u80fd\u591f\u5728\u5c40\u90e8\u8fdb\u884c\uff08\u8ba1\u7b97\u548c\u6570\u636e\u5728\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\uff09\uff0c\u90a3\u4e48\u67e5\u8be2\u7684\u6574\u4f53\u901f\u5ea6\u5c31\u4f1a\u66f4\u5feb\u3002\u5982\u679c\u67d0\u4e9b\u8ba1\u7b97\u9700\u8981\u5728\u6574\u4e2a\u7cfb\u7edf\u6765\u5b8c\u6210\uff0c\u90a3\u4e48\u6570\u636e\u9700\u8981\u8fdb\u884c\u4ea4\u6362\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u5c31\u4f1a\u964d\u4f4e\u6548\u7387\u3002\u5982\u679c\u53c2\u4e0e\u8fde\u63a5\u6d3b\u7740\u6392\u5e8f\u7684\u64cd\u8868\u90fd\u5305\u542b\u76f8\u540c\u7684\u6570\u636e\u5206\u5e03\u952e\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5728\u5c40\u90e8\u8fdb\u884c\u3002\u5982\u679c\u6570\u636e\u91c7\u7528\u968f\u673a\u5206\u5e03\u7b56\u7565\uff0c\u7cfb\u7edf\u5c31\u65e0\u6cd5\u5728\u5c40\u90e8\u5b8c\u6210\u50cf\u8fde\u63a5\u8fd9\u6837\u7684\u64cd\u4f5c\u3002\n\n\n\u5747\u5300\u7684\u5904\u7406\u8bf7\u6c42 \u2014 \u4e3a\u4e86\u6700\u4f18\u7684\u6027\u80fd\uff0c\u6bcf\u4e2a\u8282\u70b9\u5e94\u8be5\u5904\u7406\u5747\u5300\u7684\u67e5\u8be2\u5de5\u4f5c\u3002\u5982\u679c\u8868\u7684\u6570\u636e\u5206\u5e03\u7b56\u7565\u548c\u67e5\u8be2\u4f7f\u7528\u6570\u636e\u4e0d\u5339\u914d\uff0c\u67e5\u8be2\u7684\u8d1f\u8f7d\u5c31\u4f1a\u4ea7\u751f\u503e\u659c\u3002\u4f8b\u5982\uff1a\u9500\u552e\u4ea4\u6613\u8bb0\u5f55\u8868\u662f\u6309\u7167\u5ba2\u6237ID\u8fdb\u884c\u5206\u5e03\u7684\uff0c\u90a3\u4e48\u4e00\u4e2a\u67e5\u8be2\u7279\u5b9a\u5ba2\u6237ID\u7684\u67e5\u8be2\u5c31\u53ea\u4f1a\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u8282\u70b9\u8fdb\u884c\u8ba1\u7b97\u3002\n\n\n\n\n\u58f0\u660e\u6570\u636e\u5206\u5e03\n\n\nCREATE TABLE \u7684\u53ef\u9009\u5b50\u53e5 DISTRIBUTED BY \u548c DISTRIBUTED RANDOMLY \u53ef\u4ee5\u4e3a\u8868\u6307\u5b9a\u6570\u636e\u5206\u5e03\u7b56\u7565\u3002\u8868\u7684\u9ed8\u8ba4\u5206\u5e03\u7b56\u7565\u662f\u4f7f\u7528\u4e3b\u952e\u7ea6\u675f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u6216\u8005\u4f7f\u7528\u8868\u7684\u7b2c\u4e00\u5217\u3002\u5730\u7406\u4fe1\u606f\u7c7b\u578b\u6216\u8005\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u662f\u4e0d\u80fd\u88ab\u7528\u6765\u4f5c\u4e3a\u8868\u7684\u6570\u636e\u5206\u5e03\u5217\u7684\u3002\u5982\u679c\u4e00\u5f20\u8868\u6ca1\u6709\u4efb\u4f55\u5408\u6cd5\u7684\u6570\u636e\u5206\u5e03\u5217\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u4f7f\u7528\u968f\u673a\u6570\u636e\u5206\u5e03\u7b56\u7565\u3002\n\n\n\u4e3a\u4e86\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u6570\u636e\u7684\u5747\u5300\u5206\u5e03\uff0c\u5c3d\u91cf\u9009\u62e9\u80fd\u591f\u4f7f\u6570\u636e\u552f\u4e00\u7684\u5206\u5e03\u503c\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u503c\u80fd\u591f\u6ee1\u8db3\uff0c\u53ef\u4ee5\u4f7f\u7528\u968f\u673a\u5206\u5e03\u7b56\u7565\uff1a\n\n\n=\n CREATE TABLE products\n                        (name varchar(40),\n                         prod_id integer,\n                         supplier_id integer)\n             DISTRIBUTED BY (prod_id);\n\n=\n CREATE TABLE random_stuff\n                        (things text,\n                         doodads text,\n                         etc text)\n             DISTRIBUTED RANDOMLY;\n\n\n\nPartitioning Large Tables\n\n\nTable partitioning enables supporting very large tables, such as fact tables, by logically dividing them into smaller, more manageable pieces. Partitioned tables can improve query performance by allowing the Greenplum Database query optimizer to scan only the data needed to satisfy a given query instead of scanning all the contents of a large table.\n\n\n\n\nAbout Table Partitioning\n\n\nDeciding on a Table Partitioning Strategy\n\n\nCreating Partitioned Tables\n\n\nLoading Partitioned Tables\n\n\nVerifying Your Partition Strategy\n\n\nViewing Your Partition Design\n\n\nMaintaining Partitioned Tables\n\n\nParent topic: Defining Database Objects\n\n\n\n\nAbout Table Partitioning\n\n\nPartitioning does not change the physical distribution of table data across the segments. Table distribution is physical: Greenplum Database physically divides partitioned tables and non-partitioned tables across segments to enable parallel query processing. Table partitioning is logical: Greenplum Database logically divides big tables to improve query performance and facilitate data warehouse maintenance tasks, such as rolling old data out of the data warehouse.\n\n\nGreenplum Database supports:\n\n range partitioning: division of data based on a numerical range, such as date or price.\n\n list partitioning: division of data based on a list of values, such as sales territory or product line.\n* A combination of both types.\n\n\nTODO: Figure 1. Example Multi-level Partition Design \n\n\nTable Partitioning in Greenplum Database\n\n\nGreenplum Database divides tables into parts (also known as partitions) to enable massively parallel processing. Tables are partitioned during CREATE TABLE using the PARTITION BY (and optionally the SUBPARTITION BY) clause. Partitioning creates a top-level (or parent) table with one or more levels of sub-tables (or child tables). Internally, Greenplum Database creates an inheritance relationship between the top-level table and its underlying partitions, similar to the functionality of the INHERITS clause of PostgreSQL.\n\n\nGreenplum uses the partition criteria defined during table creation to create each partition with a distinct CHECK constraint, which limits the data that table can contain. The query optimizer uses CHECK constraints to determine which table partitions to scan to satisfy a given query predicate.\n\n\nThe Greenplum system catalog stores partition hierarchy information so that rows inserted into the top-level parent table propagate correctly to the child table partitions. To change the partition design or table structure, alter the parent table using ALTER TABLE with the PARTITION clause.\n\n\nTo insert data into a partitioned table, you specify the root partitioned table, the table created with the CREATE TABLE command. You also can specify a leaf child table of the partitioned table in an INSERT command. An error is returned if the data is not valid for the specified leaf child table. Specifying a child table that is not a leaf child table in the INSERT command is not supported. Execution of other DML commands such as UPDATE and DELETE on any child table of a partitioned table is not supported. These commands must be executed on the root partitioned table, the table created with the CREATE TABLE command.\n\n\nDeciding on a Table Partitioning Strategy\n\n\nNot all tables are good candidates for partitioning. If the answer is yes to all or most of the following questions, table partitioning is a viable database design strategy for improving query performance. If the answer is no to most of the following questions, table partitioning is not the right solution for that table. Test your design strategy to ensure that query performance improves as expected.\n\n\n\n\nIs the table large enough? Large fact tables are good candidates for table partitioning. If you have millions or billions of records in a table, you may see performance benefits from logically breaking that data up into smaller chunks. For smaller tables with only a few thousand rows or less, the administrative overhead of maintaining the partitions will outweigh any performance benefits you might see.\n\n\nAre you experiencing unsatisfactory performance? As with any performance tuning initiative, a table should be partitioned only if queries against that table are producing slower response times than desired.\n\n\nDo your query predicates have identifiable access patterns? Examine the WHERE clauses of your query workload and look for table columns that are consistently used to access data. For example, if most of your queries tend to look up records by date, then a monthly or weekly date-partitioning design might be beneficial. Or if you tend to access records by region, consider a list-partitioning design to divide the table by region.\n\n\nDoes your data warehouse maintain a window of historical data? Another consideration for partition design is your organization's business requirements for maintaining historical data. For example, your data warehouse may require that you keep data for the past twelve months. If the data is partitioned by month, you can easily drop the oldest monthly partition from the warehouse and load current data into the most recent monthly partition.\n\n\nCan the data be divided into somewhat equal parts based on some defining criteria? Choose partitioning criteria that will divide your data as evenly as possible. If the partitions contain a relatively equal number of records, query performance improves based on the number of partitions created. For example, by dividing a large table into 10 partitions, a query will execute 10 times faster than it would against the unpartitioned table, provided that the partitions are designed to support the query's criteria.\n\n\n\n\nDo not create more partitions than are needed. Creating too many partitions can slow down management and maintenance jobs, such as vacuuming, recovering segments, expanding the cluster, checking disk usage, and others.\n\n\nPartitioning does not improve query performance unless the query optimizer can eliminate partitions based on the query predicates. Queries that scan every partition run slower than if the table were not partitioned, so avoid partitioning if few of your queries achieve partition elimination. Check the explain plan for queries to make sure that partitions are eliminated. See Query Profiling for more about partition elimination.\n\n\nBe very careful with multi-level partitioning because the number of partition files can grow very quickly. For example, if a table is partitioned by both day and city, and there are 1,000 days of data and 1,000 cities, the total number of partitions is one million. Column-oriented tables store each column in a physical table, so if this table has 100 columns, the system would be required to manage 100 million files for the table.\n\n\nBefore settling on a multi-level partitioning strategy, consider a single level partition with bitmap indexes. Indexes slow down data loads, so performance testing with your data and schema is recommended to decide on the best strategy.\n\n\nCreating Partitioned Tables\n\n\nYou partition tables when you create them with CREATE TABLE. This topic provides examples of SQL syntax for creating a table with various partition designs.\n\n\nTo partition a table:\n\n\n\n\nDecide on the partition design: date range, numeric range, or list of values.\n\n\nChoose the column(s) on which to partition the table.\n\n\n\n\nDecide how many levels of partitions you want. For example, you can create a date range partition table by month and then subpartition the monthly partitions by sales region.\n\n\n\n\n\n\nDefining Date Range Table Partitions\n\n\n\n\nDefining Numeric Range Table Partitions\n\n\nDefining List Table Partitions\n\n\nDefining Multi-level Partitions\n\n\nPartitioning an Existing Table\n\n\n\n\nDefining Date Range Table Partitions\n\n\nA date range partitioned table uses a single date or timestamp column as the partition key column. You can use the same partition key column to create subpartitions if necessary, for example, to partition by month and then subpartition by day. Consider partitioning by the most granular level. For example, for a table partitioned by date, you can partition by day and have 365 daily partitions, rather than partition by year then subpartition by month then subpartition by day. A multi-level design can reduce query planning time, but a flat partition design runs faster.\n\n\nYou can have Greenplum Database automatically generate partitions by giving a START value, an END value, and an EVERY clause that defines the partition increment value. By default, START values are always inclusive and END values are always exclusive. For example:\n\n\nCREATE TABLE sales (id int, date date, amt decimal(10,2))\nDISTRIBUTED BY (id)\nPARTITION BY RANGE (date)\n( START (date '2008-01-01') INCLUSIVE\n   END (date '2009-01-01') EXCLUSIVE\n   EVERY (INTERVAL '1 day') );\n\n\n\nYou can also declare and name each partition individually. For example:\n\n\nCREATE TABLE sales (id int, date date, amt decimal(10,2))\nDISTRIBUTED BY (id)\nPARTITION BY RANGE (date)\n( PARTITION Jan08 START (date '2008-01-01') INCLUSIVE , \n  PARTITION Feb08 START (date '2008-02-01') INCLUSIVE ,\n  PARTITION Mar08 START (date '2008-03-01') INCLUSIVE ,\n  PARTITION Apr08 START (date '2008-04-01') INCLUSIVE ,\n  PARTITION May08 START (date '2008-05-01') INCLUSIVE ,\n  PARTITION Jun08 START (date '2008-06-01') INCLUSIVE ,\n  PARTITION Jul08 START (date '2008-07-01') INCLUSIVE ,\n  PARTITION Aug08 START (date '2008-08-01') INCLUSIVE ,\n  PARTITION Sep08 START (date '2008-09-01') INCLUSIVE ,\n  PARTITION Oct08 START (date '2008-10-01') INCLUSIVE ,\n  PARTITION Nov08 START (date '2008-11-01') INCLUSIVE ,\n  PARTITION Dec08 START (date '2008-12-01') INCLUSIVE \n                  END (date '2009-01-01') EXCLUSIVE );\n\n\n\nYou do not have to declare an END value for each partition, only the last one. In this example, Jan08 ends where Feb08 starts.\n\n\nDefining Numeric Range Table Partitions\n\n\nA numeric range partitioned table uses a single numeric data type column as the partition key column. For example:\n\n\nCREATE TABLE rank (id int, rank int, year int, gender \nchar(1), count int)\nDISTRIBUTED BY (id)\nPARTITION BY RANGE (year)\n( START (2001) END (2008) EVERY (1), \n  DEFAULT PARTITION extra );\n\n\n\nFor more information about default partitions, see Adding a Default Partition.\n\n\nDefining List Table Partitions\n\n\nA list partitioned table can use any data type column that allows equality comparisons as its partition key column. A list partition can also have a multi-column (composite) partition key, whereas a range partition only allows a single column as the partition key. For list partitions, you must declare a partition specification for every partition (list value) you want to create. For example:\n\n\nCREATE TABLE rank (id int, rank int, year int, gender \nchar(1), count int ) \nDISTRIBUTED BY (id)\nPARTITION BY LIST (gender)\n( PARTITION girls VALUES ('F'), \n  PARTITION boys VALUES ('M'), \n  DEFAULT PARTITION other );\n\n\n\nNote: The current Greenplum Database legacy optimizer allows list partitions with multi-column (composite) partition keys. A range partition only allows a single column as the partition key. The Pivotal Query Optimizer, that will available in a future release, does not support composite keys, so Pivotal does not recommend using composite partition keys.\nFor more information about default partitions, see Adding a Default Partition.\n\n\nDefining Multi-level Partitions\n\n\nYou can create a multi-level partition design with subpartitions of partitions. Using a subpartition template ensures that every partition has the same subpartition design, including partitions that you add later. For example, the following SQL creates the two-level partition design shown in Figure 1:\n\n\nCREATE TABLE sales (trans_id int, date date, amount \ndecimal(9,2), region text) \nDISTRIBUTED BY (trans_id)\nPARTITION BY RANGE (date)\nSUBPARTITION BY LIST (region)\nSUBPARTITION TEMPLATE\n( SUBPARTITION usa VALUES ('usa'), \n  SUBPARTITION asia VALUES ('asia'), \n  SUBPARTITION europe VALUES ('europe'), \n  DEFAULT SUBPARTITION other_regions)\n  (START (date '2011-01-01') INCLUSIVE\n   END (date '2012-01-01') EXCLUSIVE\n   EVERY (INTERVAL '1 month'), \n   DEFAULT PARTITION outlying_dates );\n\n\n\nThe following example shows a three-level partition design where the sales table is partitioned by year, then month, then region. The SUBPARTITION TEMPLATE clauses ensure that each yearly partition has the same subpartition structure. The example declares a DEFAULT partition at each level of the hierarchy.\n\n\nCREATE TABLE p3_sales (id int, year int, month int, day int, \nregion text)\nDISTRIBUTED BY (id)\nPARTITION BY RANGE (year)\n    SUBPARTITION BY RANGE (month)\n       SUBPARTITION TEMPLATE (\n        START (1) END (13) EVERY (1), \n        DEFAULT SUBPARTITION other_months )\n           SUBPARTITION BY LIST (region)\n             SUBPARTITION TEMPLATE (\n               SUBPARTITION usa VALUES ('usa'),\n               SUBPARTITION europe VALUES ('europe'),\n               SUBPARTITION asia VALUES ('asia'),\n               DEFAULT SUBPARTITION other_regions )\n( START (2002) END (2012) EVERY (1), \n  DEFAULT PARTITION outlying_years );\n\n\n\nCAUTION:\nWhen you create multi-level partitions on ranges, it is easy to create a large number of subpartitions, some containing little or no data. This can add many entries to the system tables, which increases the time and memory required to optimize and execute queries. Increase the range interval or choose a different partitioning strategy to reduce the number of subpartitions created.\n\n\nPartitioning an Existing Table\n\n\nTables can be partitioned only at creation. If you have a table that you want to partition, you must create a partitioned table, load the data from the original table into the new table, drop the original table, and rename the partitioned table with the original table's name. You must also re-grant any table permissions. For example:\n\n\nCREATE TABLE sales2 (LIKE sales) \nPARTITION BY RANGE (date)\n( START (date '2008-01-01') INCLUSIVE\n   END (date '2009-01-01') EXCLUSIVE\n   EVERY (INTERVAL '1 month') );\nINSERT INTO sales2 SELECT * FROM sales;\nDROP TABLE sales;\nALTER TABLE sales2 RENAME TO sales;\nGRANT ALL PRIVILEGES ON sales TO admin;\nGRANT SELECT ON sales TO guest;\n\n\n\nLimitations of Partitioned Tables\n\n\nFor each partition level, a partitioned table can have a maximum of 32,767 partitions.\n\n\nA primary key or unique constraint on a partitioned table must contain all the partitioning columns. A unique index can omit the partitioning columns; however, it is enforced only on the parts of the partitioned table, not on the partitioned table as a whole.\n\n\nThe Pivotal Query Optimizer supports uniform multi-level partitioned tables. If Pivotal Query Optimizer is enabled and the multi-level partitioned table is not uniform, Greenplum Database executes queries against the table with the legacy query optimizer. For information about uniform multi-level partitioned tables, see About Uniform Multi-level Partitioned Tables.\n\n\nExchanging a leaf child partition with an external table is not supported if the partitioned table is created with the SUBPARITION clause or if a partition has a subpartition. For information about exchanging a leaf child partition with an external table, see Exchanging a Leaf Child Partition with an External Table.\n\n\nThese are limitations for partitioned tables when a leaf child partition of the table is an external table:\n\n\n\n\nQueries that run against partitioned tables that contain external table partitions are executed with the legacy query optimizer.\n\n\n\n\nThe external table partition is a read only external table. Commands that attempt to access or modify data in the external table partition return an error. For example:\n\n\n\n\nINSERT, DELETE, and UPDATE commands that attempt to change data in the external table partition return an error.\n\n\nTRUNCATE commands return an error.\n\n\nCOPY commands cannot copy data to a partitioned table that updates an external table partition.\n\n\n\n\nCOPY commands that attempt to copy from an external table partition return an error unless you specify the IGNORE EXTERNAL PARTITIONS clause with COPY command. If you specify the clause, data is not copied from external table partitions.\nTo use the COPY command against a partitioned table with a leaf child table that is an external table, use an SQL query to copy the data. For example, if the table my_sales contains a with a leaf child table that is an external table, this command sends the data to stdout:\n\n\nCOPY (SELECT * from my_sales ) TO stdout\n\n\n\n\n\n\n\nVACUUM commands skip external table partitions.\n\n\n\n\n\n\n\n\n\n\nThe following operations are supported if no data is changed on the external table partition. Otherwise, an error is returned.\n\n\n\n\nAdding or dropping a column.\n\n\nChanging the data type of column.\n\n\n\n\n\n\n\n\nThese ALTER PARTITION operations are not supported if the partitioned table contains an external table partition:\n\n\n\n\nSetting a subpartition template.\n\n\nAltering the partition properties.\n\n\nCreating a default partition.\n\n\nSetting a distribution policy.\n\n\nSetting or dropping a NOT NULL constraint of column.\n\n\nAdding or dropping constraints.\n\n\nSplitting an external partition.\n\n\n\n\n\n\n\n\nThe Greenplum Database utility gpcrondump does not back up data from a leaf child partition of a partitioned table if the leaf child partition is a readable external table.\n\n\n\n\n\n\nLoading Partitioned Tables\n\n\nAfter you create the partitioned table structure, top-level parent tables are empty. Data is routed to the bottom-level child table partitions. In a multi-level partition design, only the subpartitions at the bottom of the hierarchy can contain data.\n\n\nRows that cannot be mapped to a child table partition are rejected and the load fails. To avoid unmapped rows being rejected at load time, define your partition hierarchy with a DEFAULT partition. Any rows that do not match a partition's CHECK constraints load into the DEFAULT partition. See Adding a Default Partition.\n\n\nAt runtime, the query optimizer scans the entire table inheritance hierarchy and uses the CHECK table constraints to determine which of the child table partitions to scan to satisfy the query's conditions. The DEFAULT partition (if your hierarchy has one) is always scanned. DEFAULT partitions that contain data slow down the overall scan time.\n\n\nWhen you use COPY or INSERT to load data into a parent table, the data is automatically rerouted to the correct partition, just like a regular table.\n\n\nBest practice for loading data into partitioned tables is to create an intermediate staging table, load it, and then exchange it into your partition design. See Exchanging a Partition.\n\n\nVerifying Your Partition Strategy\n\n\nWhen a table is partitioned based on the query predicate, you can use EXPLAIN to verify that the query optimizer scans only the relevant data to examine the query plan.\n\n\nFor example, suppose a sales table is date-range partitioned by month and subpartitioned by region as shown in Figure 1. For the following query:\n\n\nEXPLAIN SELECT * FROM sales WHERE date='01-07-12' AND region='usa';\n\n\n\nThe query plan for this query should show a table scan of only the following tables:\n\n\n\n\nthe default partition returning 0-1 rows (if your partition design has one)\n\n\nthe January 2012 partition (sales_1_prt_1) returning 0-1 rows\n\n\nthe USA region subpartition (sales_1_2_prt_usa) returning some number of rows.\n\n\n\n\nThe following example shows the relevant portion of the query plan.\n\n\n-\n  Seq Scan onsales_1_prt_1 sales (cost=0.00..0.00 rows=0 width=0)\n        Filter: \"date\"=01-07-08::date AND region='USA'::text\n-\n  Seq Scan onsales_1_2_prt_usa sales (cost=0.00..9.87 rows=20 width=40)\n\n\n\nEnsure that the query optimizer does not scan unnecessary partitions or subpartitions (for example, scans of months or regions not specified in the query predicate), and that scans of the top-level tables return 0-1 rows.\n\n\nTroubleshooting Selective Partition Scanning\n\n\nThe following limitations can result in a query plan that shows a non-selective scan of your partition hierarchy.\n\n\n\n\nThe query optimizer can selectively scan partitioned tables only when the query contains a direct and simple restriction of the table using immutable operators such as:\n=, \n , \n= , \n,  \n= , and \n\n\nSelective scanning recognizes STABLE and IMMUTABLE functions, but does not recognize VOLATILE functions within a query. For example, WHERE clauses such as date \n CURRENT_DATE cause the query optimizer to selectively scan partitioned tables, but time \n TIMEOFDAY does not.\n\n\n\n\nViewing Your Partition Design\n\n\nYou can look up information about your partition design using the pg_partitions view. For example, to see the partition design of the sales table:\n\n\nSELECT partitionboundary, partitiontablename, partitionname, \npartitionlevel, partitionrank \nFROM pg_partitions \nWHERE tablename='sales';\n\n\n\nThe following table and views show information about partitioned tables.\n\n\n\n\npg_partition - Tracks partitioned tables and their inheritance level relationships.\n\n\npg_partition_templates - Shows the subpartitions created using a subpartition template.\n\n\npg_partition_columns - Shows the partition key columns used in a partition design.\nFor information about Greenplum Database system catalog tables and views, see the Greenplum Database Reference Guide.\n\n\n\n\nMaintaining Partitioned Tables\n\n\nTo maintain a partitioned table, use the ALTER TABLE command against the top-level parent table. The most common scenario is to drop old partitions and add new ones to maintain a rolling window of data in a range partition design. You can convert (exchange) older partitions to the append-optimized compressed storage format to save space. If you have a default partition in your partition design, you add a partition by splitting the default partition.\n\n\n\n\nAdding a Partition\n\n\nRenaming a Partition\n\n\nAdding a Default Partition\n\n\nDropping a Partition\n\n\nTruncating a Partition\n\n\nExchanging a Partition\n\n\nSplitting a Partition\n\n\nModifying a Subpartition Template\n\n\nExchanging a Leaf Child Partition with an External Table\n\n\n\n\nImportant: When defining and altering partition designs, use the given partition name, not the table object name. Although you can query and load any table (including partitioned tables) directly using SQL commands, you can only modify the structure of a partitioned table using the ALTER TABLE...PARTITION clauses.\nPartitions are not required to have names. If a partition does not have a name, use one of the following expressions to specify a part: PARTITION FOR (value) or )PARTITION FOR(RANK(number).\n\n\nAdding a Partition\n\n\nYou can add a partition to a partition design with the ALTER TABLE command. If the original partition design included subpartitions defined by a subpartition template, the newly added partition is subpartitioned according to that template. For example:\n\n\nALTER TABLE sales ADD PARTITION \n            START (date '2009-02-01') INCLUSIVE \n            END (date '2009-03-01') EXCLUSIVE;\n\n\n\nIf you did not use a subpartition template when you created the table, you define subpartitions when adding a partition:\n\n\nALTER TABLE sales ADD PARTITION \n            START (date '2009-02-01') INCLUSIVE \n            END (date '2009-03-01') EXCLUSIVE\n      ( SUBPARTITION usa VALUES ('usa'), \n        SUBPARTITION asia VALUES ('asia'), \n        SUBPARTITION europe VALUES ('europe') );\n\n\n\nWhen you add a subpartition to an existing partition, you can specify the partition to alter. For example:\n\n\nALTER TABLE sales ALTER PARTITION FOR (RANK(12))\n      ADD PARTITION africa VALUES ('africa');\n\n\n\nNote: You cannot add a partition to a partition design that has a default partition. You must split the default partition to add a partition. See Splitting a Partition.\n\n\nRenaming a Partition\n\n\nPartitioned tables use the following naming convention. Partitioned subtable names are subject to uniqueness requirements and length limitations.\n\n\nparentname\n_\nlevel\n_prt_\npartition_name\n\n\n\n\nFor example:\n\n\nsales_1_prt_jan08\n\n\n\nFor auto-generated range partitions, where a number is assigned when no name is given):\n\n\nsales_1_prt_1\n\n\n\nTo rename a partitioned child table, rename the top-level parent table. The \n changes in the table names of all associated child table partitions. For example, the following command:\n\n\nALTER TABLE sales RENAME TO globalsales;\n\n\n\nChanges the associated table names:\n\n\nglobalsales_1_prt_1\n\n\n\nYou can change the name of a partition to make it easier to identify. For example:\n\n\nALTER TABLE sales RENAME PARTITION FOR ('2008-01-01') TO jan08;\n\n\n\nChanges the associated table name as follows:\n\n\nsales_1_prt_jan08\n\n\n\nWhen altering partitioned tables with the ALTER TABLE command, always refer to the tables by their partition name (jan08) and not their full table name (sales_1_prt_jan08).\n\n\nNote: The table name cannot be a partition name in an ALTER TABLE statement. For example, ALTER TABLE sales... is correct, ALTER TABLE sales_1_part_jan08... is not allowed.\n\n\nAdding a Default Partition\n\n\nYou can add a default partition to a partition design with the ALTER TABLE command.\n\n\nALTER TABLE sales ADD DEFAULT PARTITION other;\n\n\n\nIf your partition design is multi-level, each level in the hierarchy must have a default partition. For example:\n\n\nALTER TABLE sales ALTER PARTITION FOR (RANK(1)) ADD DEFAULT PARTITION other;\n\nALTER TABLE sales ALTER PARTITION FOR (RANK(2)) ADD DEFAULT PARTITION other;\n\nALTER TABLE sales ALTER PARTITION FOR (RANK(3)) ADD DEFAULT PARTITION other;\n\n\n\nIf incoming data does not match a partition's CHECK constraint and there is no default partition, the data is rejected. Default partitions ensure that incoming data that does not match a partition is inserted into the default partition.\n\n\nDropping a Partition\n\n\nYou can drop a partition from your partition design using the ALTER TABLE command. When you drop a partition that has subpartitions, the subpartitions (and all data in them) are automatically dropped as well. For range partitions, it is common to drop the older partitions from the range as old data is rolled out of the data warehouse. For example:\n\n\nALTER TABLE sales DROP PARTITION FOR (RANK(1));\n\n\n\nTruncating a Partition\n\n\nYou can truncate a partition using the ALTER TABLE command. When you truncate a partition that has subpartitions, the subpartitions are automatically truncated as well.\n\n\nALTER TABLE sales TRUNCATE PARTITION FOR (RANK(1));\n\n\n\nExchanging a Partition\n\n\nYou can exchange a partition using the ALTER TABLE command. Exchanging a partition swaps one table in place of an existing partition. You can exchange partitions only at the lowest level of your partition hierarchy (only partitions that contain data can be exchanged).\n\n\nPartition exchange can be useful for data loading. For example, load a staging table and swap the loaded table into your partition design. You can use partition exchange to change the storage type of older partitions to append-optimized tables. For example:\n\n\nCREATE TABLE jan12 (LIKE sales) WITH (appendonly=true);\nINSERT INTO jan12 SELECT * FROM sales_1_prt_1 ;\nALTER TABLE sales EXCHANGE PARTITION FOR (DATE '2012-01-01') \nWITH TABLE jan12;\n\n\n\nNote: This example refers to the single-level definition of the table sales, before partitions were added and altered in the previous examples.\nWarning: If you specify the WITHOUT VALIDATION clause, you must ensure that the data in table that you are exchanging for an existing partition is valid against the constraints on the partition. Otherwise, queries against the partitioned table might return incorrect results.\nThe Greenplum Database server configuration parameter gp_enable_exchange_default_partition controls availability of the EXCHANGE DEFAULT PARTITION clause. The default value for the parameter is off, the clause is not available and Greenplum Database returns an error if the clause is specified in an ALTER TABLE command.\n\n\nFor information about the parameter, see \"Server Configuration Parameters\" in the Greenplum Database Reference Guide.\nWarning: Before you exchange the default partition, you must ensure the data in the table to be exchanged, the new default partition, is valid for the default partition. For example, the data in the new default partition must not contain data that would be valid in other leaf child partitions of the partitioned table. Otherwise, queries against the partitioned table with the exchanged default partition that are executed by the Pivotal Query Optimizer might return incorrect results.\n\n\nSplitting a Partition\n\n\nSplitting a partition divides a partition into two partitions. You can split a partition using the ALTER TABLE command. You can split partitions only at the lowest level of your partition hierarchy: only partitions that contain data can be split. The split value you specify goes into the latter partition.\n\n\nFor example, to split a monthly partition into two with the first partition containing dates January 1-15 and the second partition containing dates January 16-31:\n\n\nALTER TABLE sales SPLIT PARTITION FOR ('2008-01-01')\nAT ('2008-01-16')\nINTO (PARTITION jan081to15, PARTITION jan0816to31);\n\n\n\nIf your partition design has a default partition, you must split the default partition to add a partition.\n\n\nWhen using the INTO clause, specify the current default partition as the second partition name. For example, to split a default range partition to add a new monthly partition for January 2009:\n\n\nALTER TABLE sales SPLIT DEFAULT PARTITION \nSTART ('2009-01-01') INCLUSIVE \nEND ('2009-02-01') EXCLUSIVE \nINTO (PARTITION jan09, default partition);\n\n\n\nModifying a Subpartition Template\n\n\nUse ALTER TABLE SET SUBPARTITION TEMPLATE to modify the subpartition template of a partitioned table. Partitions added after you set a new subpartition template have the new partition design. Existing partitions are not modified.\n\n\nThe following example alters the subpartition template of this partitioned table:\n    CREATE TABLE sales (trans_id int, date date, amount decimal(9,2), region text)\n      DISTRIBUTED BY (trans_id)\n      PARTITION BY RANGE (date)\n      SUBPARTITION BY LIST (region)\n      SUBPARTITION TEMPLATE\n        ( SUBPARTITION usa VALUES ('usa'),\n          SUBPARTITION asia VALUES ('asia'),\n          SUBPARTITION europe VALUES ('europe'),\n          DEFAULT SUBPARTITION other_regions )\n      ( START (date '2014-01-01') INCLUSIVE\n        END (date '2014-04-01') EXCLUSIVE\n        EVERY (INTERVAL '1 month') );\nThis ALTER TABLE command, modifies the subpartition template.\n\n\nALTER TABLE sales SET SUBPARTITION TEMPLATE\n( SUBPARTITION usa VALUES ('usa'), \n  SUBPARTITION asia VALUES ('asia'), \n  SUBPARTITION europe VALUES ('europe'),\n  SUBPARTITION africa VALUES ('africa'), \n  DEFAULT SUBPARTITION regions );\n\n\n\nWhen you add a date-range partition of the table sales, it includes the new regional list subpartition for Africa. For example, the following command creates the subpartitions usa, asia, europe, africa, and a default partition named other:\n\n\nALTER TABLE sales ADD PARTITION \"4\"\n  START ('2014-04-01') INCLUSIVE \n  END ('2014-05-01') EXCLUSIVE ;\n\n\n\nTo view the tables created for the partitioned table sales, you can use the command \\dt sales* from the psql command line.\n\n\nTo remove a subpartition template, use SET SUBPARTITION TEMPLATE with empty parentheses. For example, to clear the sales table subpartition template:\n\n\nALTER TABLE sales SET SUBPARTITION TEMPLATE ();\n\n\n\nExchanging a Leaf Child Partition with an External Table\n\n\nYou can exchange a leaf child partition of a partitioned table with a readable external table.The external table data can reside on a host file system, an NFS mount, or a Hadoop file system (HDFS).\n\n\nFor example, if you have a partitioned table that is created with monthly partitions and most of the queries against the table only access the newer data, you can copy the older, less accessed data to external tables and exchange older partitions with the external tables. For queries that only access the newer data, you could create queries that use partition elimination to prevent scanning the older, unneeded partitions.\n\n\nExchanging a leaf child partition with an external table is not supported in these cases:\n\n The partitioned table is created with the SUBPARITION clause or if a partition has a subpartition.\n\n The partitioned table contains a column with a check constraint or a NOT NULL constraint.\nFor information about exchanging and altering a leaf child partition, see the ALTER TABLE command in the Greenplum Database Command Reference.\n\n\nFor information about limitations of partitioned tables that contain a external table partition, see Limitations of Partitioned Tables.\n\n\nExample Exchanging a Partition with an External Table\n\n\nThis is a simple example that exchanges a leaf child partition of this partitioned table for an external table. The partitioned table contains data for the years 2000 through 2003.\n\n\nCREATE TABLE sales (id int, year int, qtr int, day int, region text)\n  DISTRIBUTED BY (id) \n  PARTITION BY RANGE (year) \n  ( PARTITION yr START (2000) END (2004) EVERY (1) ) ;\n\n\n\nThere are four leaf child partitions for the partitioned table. Each leaf child partition contains the data for a single year. The leaf child partition table sales_1_prt_yr_1 contains the data for the year 2000. These steps exchange the table sales_1_prt_yr_1 with an external table the uses the gpfdist protocol:\n\n\n\n\n\n\nEnsure that the external table protocol is enabled for the Greenplum Database system.\nThis example uses the gpfdist protocol. This command starts the gpfdist protocol.\n\n\n$ gpfdist\n\n\n\n\n\n\n\nCreate a writable external table.\nThis CREATE WRITABLE EXTENAL TABLE command creates a writeable external table with the same columns as the partitioned table.\n\n\nCREATE WRITABLE EXTERNAL TABLE my_sales_ext ( LIKE sales_1_prt_yr_1 )\n  LOCATION ( 'gpfdist://gpdb_test/sales_2000' )\n  FORMAT 'csv' \n  DISTRIBUTED BY (id) ;\n\n\n\n\n\n\n\nCreate a readable external table that reads the data from that destination of the writable external table created in the previous step.\nThis CREATE EXTENAL TABLE create a readable external that uses the same external data as the writeable external data.\n\n\nCREATE EXTERNAL TABLE sales_2000_ext ( LIKE sales_1_prt_yr_1) \n  LOCATION ( 'gpfdist://gpdb_test/sales_2000' )\n  FORMAT 'csv' ;\n\n\n\n\n\n\n\nCopy the data from the leaf child partition into the writable external table.\nThis INSERT command copies the data from the child leaf partition table of the partitioned table into the external table.\n\n\nINSERT INTO my_sales_ext SELECT * FROM sales_1_prt_yr_1 ;\n\n\n\n\n\n\n\nExchange the existing leaf child partition with the external table.\nThis ALTER TABLE command specifies the EXCHANGE PARTITION clause to switch the readable external table and the leaf child partition.\n\n\nALTER TABLE sales ALTER PARTITION yr_1 \n   EXCHANGE PARTITION yr_1 \n   WITH TABLE sales_2000_ext WITHOUT VALIDATION;\n\n\n\nThe external table becomes the leaf child partition with the table name sales_1_prt_yr_1 and the old leaf child partition becomes the table sales_2000_ext.\nWarning: In order to ensure queries against the partitioned table return the correct results, the external table data must be valid against the CHECK constraints on the leaf child partition. In this case, the data was taken from the child leaf partition table on which the CHECK constraints were defined.\n\n\n\n\n\n\nDrop the table that was rolled out of the partitioned table.\n\n\nDROP TABLE sales_2000_ext ;\n\n\n\nYou can rename the name of the leaf child partition to indicate that sales_1_prt_yr_1 is an external table.\n\n\n\n\n\n\nThis example command changes the partitionname to yr_1_ext and the name of the child leaf partition table to sales_1_prt_yr_1_ext.\n\n\nALTER TABLE sales RENAME PARTITION yr_1 TO  yr_1_ext ;\n\n\n\n\u521b\u5efa\u548c\u4f7f\u7528\u5e8f\u5217\n\n\n\u901a\u8fc7\u4f7f\u7528\u5e8f\u5217\uff0c\u7cfb\u7edf\u53ef\u4ee5\u5728\u65b0\u7684\u7eaa\u5f55\u63d2\u5165\u8868\u4e2d\u65f6\uff0c\u81ea\u52a8\u5730\u6309\u7167\u81ea\u589e\u65b9\u5f0f\u5206\u914d\u4e00\u4e2a\u552f\u4e00ID\u3002\u4f7f\u7528\u5e8f\u5217\u4e00\u534a\u5c31\u662f\u4e3a\u63d2\u5165\u8868\u4e2d\u7684\u7eaa\u5f55\u81ea\u52a8\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e00\u4e2a SERIAL \u7c7b\u578b\u7684\u6807\u8bc6\u7b26\u5217\uff0c\u8be5\u7c7b\u578b\u5c06\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5e8f\u5217\u6765\u5206\u914dID\u3002\n\n\n\u521b\u5efa\u5e8f\u5217\n\n\nCREATE SEQUENCE \u547d\u4ee4\u7528\u6765\u521b\u5efa\u548c\u521d\u59cb\u5316\u4e00\u5f20\u7279\u6b8a\u7684\u5355\u884c\u5e8f\u5217\u751f\u6210\u5668\u8868\uff0c\u8be5\u8868\u540d\u79f0\u5c31\u662f\u6307\u5b9a\u5e8f\u5217\u7684\u540d\u79f0\u3002\u5e8f\u5217\u7684\u540d\u79f0\u5728\u540c\u4e00\u4e2a\u6a21\u5f0f\u4e0b\uff0c\u4e0d\u80fd\u4e0e\u5176\u5b83\u5e8f\u5217\uff0c\u8868\uff0c\u7d22\u5f15\u6216\u8005\u89c6\u56fe\u91cd\u540d\u3002\u793a\u4f8b\uff1a\n\n\nCREATE SEQUENCE myserial START 101;\n\n\n\n\u4f7f\u7528\u5e8f\u5217\n\n\n\u5728\u4f7f\u7528 CREATE SEQUENCE \u521b\u5efa\u7cfb\u5217\u751f\u6210\u5668\u8868\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 nextval \u51fd\u6570\u6765\u4f7f\u7528\u5e8f\u5217\u3002\u4f8b\u5982\u4e0b\u9762\u4f8b\u5b50\uff0c\u5411\u8868\u4e2d\u63d2\u5165\u65b0\u6570\u636e\u65f6\uff0c\u81ea\u52a8\u83b7\u5f97\u4e0b\u4e00\u4e2a\u5e8f\u5217\u503c\uff1a\n\n\nINSERT INTO vendors VALUES (nextval('myserial'), 'acme');\n\n\n\n\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u51fd\u6570 setval \u6765\u91cd\u7f6e\u5e8f\u5217\u7684\u503c\u3002\u793a\u4f8b\uff1a\n\n\nSELECT setval('myserial', 201);\n\n\n\n\u8bf7\u6ce8\u610f nextval \u64cd\u4f5c\u662f\u4e0d\u4f1a\u56de\u6eda\u7684\uff0c\u6570\u503c\u4e00\u65e6\u88ab\u83b7\u53d6\uff0c\u5373\u4f7f\u6700\u7ec8\u4e8b\u52a1\u56de\u6eda\uff0c\u8be5\u6570\u636e\u4e5f\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u88ab\u5206\u914d\u548c\u4f7f\u7528\u4e86\u3002\u8fd9\u610f\u5473\u7740\u5931\u8d25\u7684\u4e8b\u52a1\u4f1a\u7ed9\u5e8f\u5217\u5206\u914d\u7684\u6570\u503c\u4e2d\u7559\u4e0b\u7a7a\u6d1e\u3002\u7c7b\u4f3c\u5730\uff0csetval\u64cd\u4f5c\u4e5f\u4e0d\u652f\u6301\u56de\u6eda\u3002\n\n\n\u901a\u8fc7\u4e0b\u9762\u7684\u67e5\u8be2\uff0c\u53ef\u4ee5\u68c0\u67e5\u5e8f\u5217\u7684\u5f53\u524d\u503c\uff1a\n\n\nSELECT * FROM myserial;\n\n\n\n\u4fee\u6539\u5e8f\u5217\n\n\nALTER SEQUENCE \u547d\u4ee4\u53ef\u4ee5\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5e8f\u5217\u751f\u6210\u5668\u53c2\u6570\u3002\u4f8b\u5982\uff1a\n\n\nALTER SEQUENCE myserial RESTART WITH 105;\n\n\n\n\u5220\u9664\u5e8f\u5217\n\n\nDROP SEQUENCE \u547d\u4ee4\u5220\u9664\u5e8f\u5217\u751f\u6210\u8868\u3002\u4f8b\u5982\uff1a\n\n\nDROP SEQUENCE myserial;\n\n\n\n\u4f7f\u7528\u7d22\u5f15\n\n\n\u5728\u7edd\u5927\u90e8\u5206\u4f20\u7edf\u6570\u636e\u4e2d\uff0c\u7d22\u5f15\u90fd\u80fd\u591f\u6781\u5927\u5730\u63d0\u9ad8\u6570\u636e\u8bbf\u95ee\u901f\u901f\u3002\u7136\u800c\uff0c\u5728\u50cf \nproduct-name\n \u8fd9\u6837\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\uff0c\u7d22\u5f15\u7684\u4f7f\u7528\u9700\u8981\u66f4\u52a0\u8c28\u614e\u3002\n\n\nproduct-name\n \u6267\u884c\u987a\u5e8f\u626b\u63cf\u7684\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u7d22\u5f15\u53ea\u7528\u6765\u968f\u673a\u8bbf\u95ee\u65f6\uff0c\u5728\u78c1\u76d8\u4e0a\u5b9a\u4f4d\u7279\u5b9a\u6570\u636e\u3002\u7531\u4e8e\u6570\u636e\u662f\u5206\u6563\u5728\u591a\u4e2a\u8282\u70b9\u4e0a\u7684\uff0c\u56e0\u6b64\u6bcf\u4e2a\u8282\u70b9\u6570\u636e\u76f8\u5bf9\u66f4\u5c11\u3002\u518d\u52a0\u4e0a\u4f7f\u7528\u5206\u533a\u8868\u529f\u80fd\uff0c\u5b9e\u9645\u7684\u987a\u5e8f\u626b\u63cf\u53ef\u80fd\u66f4\u5c0f\u3002\u56e0\u4e3a\u5546\u4e1a\u667a\u80fd(BI)\u7c7b\u5e94\u7528\u901a\u5e38\u8fd4\u56de\u8f83\u5927\u7684\u7ed3\u679c\u6570\u636e\uff0c\u56e0\u6b64\u7d22\u5f15\u5e76\u4e0d\u9ad8\u6548\u3002\n\n\n\u8bf7\u5c1d\u8bd5\u5728\u6ca1\u6709\u7d22\u5f15\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c\u67e5\u8be2\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8eOLTP\u7c7b\u578b\u4e1a\u52a1\uff0c\u7d22\u5f15\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u66f4\u5927\u3002\u56e0\u4e3a\u8fd9\u7c7b\u67e5\u8be2\u4e00\u822c\u53ea\u8fd4\u56de\u4e00\u6761\u6216\u8f83\u5c11\u7684\u6570\u636e\u3002\u5bf9\u4e8e\u538b\u7f29\u7684 append \u8868\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8fd4\u56de\u4e00\u90e8\u5206\u6570\u636e\u7684\u67e5\u8be2\u6765\u8bf4\u6027\u80fd\u4e5f\u80fd\u5f97\u5230\u63d0\u9ad8\u3002\u8fd9\u662f\u56e0\u4e3a\u4f18\u5316\u5668\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u6765\u907f\u514d\u4f7f\u7528\u5168\u8868\u7684\u987a\u5e8f\u626b\u63cf\u3002\u5bf9\u4e8e\u538b\u7f29\u7684\u6570\u636e\uff0c\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u65b9\u6cd5\u65f6\uff0c\u53ea\u6709\u9700\u8981\u7684\u6570\u636e\u624d\u4f1a\u88ab\u89e3\u538b\u7f29\u3002\n\n\nproduct-name\n \u5bf9\u4e8e\u5305\u542b\u4e3b\u952e\u7684\u8868\u81ea\u52a8\u521b\u5efa\u4e3b\u952e\u7ea6\u675f\u3002\u8981\u5bf9\u5206\u533a\u8868\u521b\u5efa\u7d22\u5f15\uff0c\u53ea\u9700\u8981\u5728\u5206\u533a\u8868\u4e0a\u521b\u5efa\u6240\u4ee5\u5373\u53ef\u3002\nproduct-name\n \u80fd\u591f\u81ea\u52a8\u5728\u5206\u533a\u8868\u4e0b\u7684\u5206\u533a\u4e0a\u521b\u5efa\u5bf9\u5e94\u7d22\u5f15\u3002\nproduct-name\n \u4e0d\u652f\u6301\u5bf9\u5206\u533a\u8868\u4e0b\u7684\u5206\u533a\u521b\u5efa\u5355\u72ec\u7684\u7d22\u5f15\u3002\n\n\n\u8bf7\u6ce8\u610f\uff0c\u552f\u4e00\u7ea6\u675f\u4f1a\u9690\u5f0f\u5730\u521b\u5efa\u552f\u4e00\u7d22\u5f15\uff0c\u552f\u4e00\u7d22\u5f15\u4f1a\u5305\u542b\u6240\u6709\u6570\u636e\u5206\u5e03\u952e\u548c\u5206\u533a\u952e\u3002\u552f\u4e00\u7ea6\u675f\u662f\u5bf9\u6574\u4e2a\u8868\u8303\u56f4\u4fdd\u8bc1\u552f\u4e00\u6027\u7684\uff08\u5305\u62ec\u6240\u6709\u7684\u5206\u533a\uff09\u3002\n\n\n\u7d22\u5f15\u4f1a\u589e\u52a0\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u8fd0\u884c\u5f00\u9500\uff0c\u5b83\u4eec\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5e76\u4e14\u5728\u6570\u636e\u66f4\u65b0\u65f6\uff0c\u9700\u8981\u989d\u5916\u7684\u7ef4\u62a4\u5de5\u4f5c\u3002\u8bf7\u786e\u4fdd\u67e5\u8be2\u96c6\u5408\u5728\u4f7f\u7528\u60a8\u521b\u5efa\u7684\u7d22\u5f15\u540e\uff0c\u6027\u80fd\u5f97\u5230\u4e86\u6539\u5584\uff08\u548c\u5168\u8868\u987a\u5e8f\u626b\u63cf\u76f8\u6bd4\uff09\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 EXPLAIN \u547d\u4ee4\u6765\u786e\u8ba4\u7d22\u5f15\u662f\u5426\u88ab\u4f7f\u7528\u3002\n\n\n\u521b\u5efa\u7d22\u5f15\u65f6\uff0c\u60a8\u9700\u8981\u6ce8\u610f\u4e0b\u9762\u7684\u95ee\u9898\u70b9\uff1a\n\n\n\n\n\u60a8\u7684\u67e5\u8be2\u7279\u70b9\u3002\u7d22\u5f15\u5bf9\u4e8e\u67e5\u8be2\u53ea\u8fd4\u56de\u5355\u6761\u8bb0\u5f55\u6216\u8005\u8f83\u5c11\u7684\u6570\u636e\u96c6\u65f6\uff0c\u6027\u80fd\u63d0\u5347\u660e\u663e\u3002\n\n\n\u538b\u7f29\u8868\u3002\u5bf9\u4e8e\u538b\u7f29\u7684 append \u8868\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8fd4\u56de\u4e00\u90e8\u5206\u6570\u636e\u7684\u67e5\u8be2\u6765\u8bf4\u6027\u80fd\u4e5f\u80fd\u5f97\u5230\u63d0\u9ad8\u3002\u5bf9\u4e8e\u538b\u7f29\u7684\u6570\u636e\uff0c\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u65b9\u6cd5\u65f6\uff0c\u53ea\u6709\u9700\u8981\u7684\u6570\u636e\u624d\u4f1a\u88ab\u89e3\u538b\u7f29\u3002\n\n\n\u907f\u514d\u5728\u7ecf\u5e38\u6539\u53d8\u7684\u5217\u4e0a\u521b\u5efa\u7d22\u5f15\u3002\u5728\u7ecf\u5e38\u66f4\u65b0\u7684\u5217\u4e0a\u521b\u5efa\u7d22\u5f15\u4f1a\u5bfc\u81f4\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u65f6\u5199\u64cd\u4f5c\u5927\u91cf\u589e\u52a0\u3002\n\n\n\u521b\u5efa\u9009\u62e9\u7387\u9ad8\u7684 B-\u6811\u7d22\u5f15\u3002\u7d22\u5f15\u9009\u62e9\u7387\u662f\u5217\u7684\u552f\u4e00\u503c\u9664\u4ee5\u8bb0\u5f55\u6570\u7684\u6bd4\u503c\u3002\u4f8b\u5982\uff0c\u4e00\u5f20\u8868\u6709 1000 \u6761\u8bb0\u5f55\uff0c\u5176\u4e2d\u6709 800 \u4e2a\u552f\u4e00\u503c\uff0c\u8fd9\u4e2a\u5217\u7d22\u5f15\u7684\u9009\u62e9\u7387\u5c31\u662f 0.8\uff0c\u8fd9\u4e2a\u6570\u503c\u5c31\u6bd4\u8f83\u597d\u3002\u552f\u4e00\u7d22\u5f15\u7684\u9009\u62e9\u7387\u603b\u662f 1.0\uff0c\u4e5f\u662f\u9009\u62e9\u7387\u6700\u597d\u7684\u3002\nproduct-name\n \u53ea\u5141\u8bb8\u521b\u5efa\u5305\u542b\u8868\u6570\u636e\u5206\u5e03\u952e\u7684\u552f\u4e00\u7d22\u5f15\u3002\n\n\n\u5bf9\u4e8e\u9009\u62e9\u7387\u8f83\u4f4e\u7684\u5217\uff0c\u4f7f\u7528 Bitmap \u7d22\u5f15\u3002\n\n\n\u5bf9\u53c2\u4e0e\u8fde\u63a5\u64cd\u4f5c\u7684\u5217\u521b\u5efa\u7d22\u5f15\u3002\u5bf9\u7ecf\u5e38\u7528\u4e8e\u8fde\u63a5\u7684\u5217\uff08\u4f8b\u5982\uff1a\u5916\u952e\u5217\uff09\u521b\u5efa\u7d22\u5f15\uff0c\u53ef\u4ee5\u8ba9\u67e5\u8be2\u4f18\u5316\u5668\u4f7f\u7528\u66f4\u591a\u7684\u8fde\u63a5\u7b97\u6cd5\uff0c\u8fdb\u800c\u63d0\u9ad8\u8fde\u63a5\u6548\u7387\u3002\n\n\n\u5bf9\u7ecf\u5e38\u51fa\u73b0\u5728 WHERE \u6761\u4ef6\u4e2d\u7684\u5217\u521b\u5efa\u7d22\u5f15\u3002\n\n\n\u907f\u514d\u521b\u5efa\u5197\u4f59\u7684\u7d22\u5f15\u3002\u5982\u679c\u7d22\u5f15\u5f00\u5934\u51e0\u5217\u91cd\u590d\u51fa\u73b0\u5728\u591a\u4e2a\u7d22\u5f15\u4e2d\uff0c\u8fd9\u4e9b\u7d22\u5f15\u5c31\u662f\u5197\u4f59\u7684\u3002\n\n\n\u5728\u5927\u91cf\u6570\u636e\u52a0\u8f7d\u65f6\uff0c\u5220\u9664\u7d22\u5f15\u3002\u5982\u679c\u8981\u5411\u8868\u4e2d\u52a0\u8f7d\u5927\u91cf\u6570\u636e\uff0c\u8003\u8651\u52a0\u8f7d\u6570\u636e\u524d\u5220\u9664\u7d22\u5f15\uff0c\u52a0\u8f7d\u540e\u91cd\u65b0\u5efa\u7acb\u7d22\u5f15\u7684\u65b9\u6cd5\u3002\u8fd9\u6837\u7684\u64cd\u4f5c\u901a\u5e38\u6bd4\u5e26\u7740\u7d22\u5f15\u52a0\u8f7d\u8981\u5feb\u3002\n\n\n\u8003\u8651\u805a\u7c07\u7d22\u5f15\u3002\u805a\u7c07\u7d22\u5f15\u662f\u6307\u6570\u636e\u5728\u7269\u7406\u4e0a\uff0c\u6309\u7167\u7d22\u5f15\u987a\u5e8f\u5b58\u50a8\u3002\u5982\u679c\u60a8\u8bbf\u95ee\u7684\u6570\u636e\u5728\u78c1\u76d8\u662f\u968f\u673a\u5b58\u50a8\uff0c\u90a3\u4e48\u6570\u636e\u5e93\u5c31\u9700\u8981\u78c1\u76d8\u4e0a\u4e0d\u65ad\u53d8\u66f4\u4f4d\u7f6e\u8bfb\u53d6\u60a8\u9700\u8981\u7684\u6570\u636e\u3002\u5982\u679c\u6570\u636e\u66f4\u4f73\u7d27\u5bc6\u7684\u5b58\u50a8\u8d77\u6765\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u64cd\u4f5c\u6548\u7387\u5c31\u4f1a\u66f4\u9ad8\u3002\u4f8b\u5982\uff1a\u5728\u65e5\u671f\u5217\u4e0a\u521b\u5efa\u805a\u7c07\u7d22\u5f15\uff0c\u6570\u636e\u4e5f\u662f\u6309\u7167\u65e5\u671f\u5217\u987a\u5e8f\u5b58\u50a8\u3002\u4e00\u4e2a\u67e5\u8be2\u5982\u679c\u8bfb\u53d6\u4e00\u4e2a\u65e5\u671f\u8303\u56f4\u7684\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5229\u7528\u78c1\u76d8\u987a\u5e8f\u626b\u63cf\u7684\u5feb\u901f\u7279\u6027\u3002\n\n\n\n\n\u805a\u7c07\u7d22\u5f15\n\n\n\u5bf9\u4e00\u5f20\u975e\u5e38\u7684\u8868\uff0c\u4f7f\u7528 CLUSTER \u547d\u4ee4\u6765\u6839\u636e\u7d22\u5f15\u5bf9\u8868\u7684\u7269\u7406\u5b58\u50a8\u8fdb\u884c\u91cd\u65b0\u6392\u5e8f\u53ef\u80fd\u82b1\u8d39\u975e\u5e38\u957f\u7684\u65f6\u95f4\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u624b\u5de5\u5c06\u6392\u5e8f\u7684\u8868\u6570\u636e\u5bfc\u5165\u4e00\u5f20\u4e2d\u95f4\u8868\uff0c\u6765\u52a0\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a\n\n\nCREATE TABLE new_table (LIKE old_table) \n       AS SELECT * FROM old_table ORDER BY myixcolumn;\nDROP old_table;\nALTER TABLE new_table RENAME TO old_table;\nCREATE INDEX myixcolumn_ix ON old_table;\nVACUUM ANALYZE old_table;\n\n\n\n\u7d22\u5f15\u7c7b\u578b\n\n\nproduct-name\n \u652f\u6301 Postgres \u4e2d\u7d22\u5f15\u7c7b\u578b B\u6811 \u548c GiST. Hash \u548c GIN \u7d22\u5f15\u4e0d\u652f\u6301\u3002\u6bcf\u4e00\u79cd\u7d22\u5f15\u90fd\u4f7f\u7528\u4e0d\u540c\u7b97\u6cd5\uff0c\u56e0\u6b64\u9002\u7528\u7684\u67e5\u8be2\u4e5f\u4e0d\u540c\u3002B\u6811\u7d22\u5f15\u9002\u7528\u4e8e\u5927\u90e8\u5206\u5e38\u89c1\u60c5\u51b5\uff0c\u56e0\u6b64\u4e5f\u662f\u9ed8\u8ba4\u7c7b\u578b\u3002\u60a8\u53ef\u4ee5\u53c2\u8003 PostgreSQL \u6587\u6863\u4e2d\u5173\u4e8e\u7d22\u5f15\u7684\u76f8\u5173\u4ecb\u7ecd\u3002\n\n\n\u6ce8\u610f\uff1a\u552f\u4e00\u7d22\u5f15\u4f7f\u7528\u7684\u5217\u5fc5\u987b\u548c\u8868\u7684\u5206\u5e03\u952e\u503c\u4e00\u6837\uff08\u6216\u8d85\u96c6\uff09\u3002append-optimized \u5b58\u50a8\u7c7b\u578b\u7684\u8868\u4e0d\u652f\u6301\u552f\u4e00\u7d22\u5f15\u3002\u5bf9\u4e8e\u5206\u533a\u8868\u6765\u8bf4\uff0c\u552f\u4e00\u7d22\u5f15\u4e0d\u80fd\u5bf9\u6574\u5f20\u8868\uff08\u5bf9\u6240\u6709\u5b50\u8868\uff09\u6765\u4fdd\u8bc1\u552f\u4e00\u6027\u3002\u552f\u4e00\u7d22\u5f15\u53ef\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u5206\u533a\u4fdd\u8bc1\u552f\u4e00\u6027\u3002\n\n\n\u5173\u4e8e Bitmap \u7d22\u5f15\n\n\nproduct-name\n \u63d0\u4f9b\u4e86 Bitmap \u7d22\u5f15\u7c7b\u578b\u3002Bitmap \u7d22\u5f15\u7279\u522b\u9002\u5408\u5927\u6570\u636e\u91cf\u7684\u6570\u636e\u4ed3\u5e93\u5e94\u7528\u548c\u51b3\u7b56\u652f\u6301\u7cfb\u7edf\u8fd9\u79cd\u67e5\u8be2\uff0c\u4e34\u65f6\u6027\u67e5\u8be2\u7279\u522b\u591a\uff0c\u6570\u636e\u6539\u52a8\u5c11\u7684\u4e1a\u52a1\u3002\n\n\n\u7d22\u5f15\u63d0\u4f9b\u6839\u636e\u6307\u5b9a\u952e\u503c\u6307\u5411\u8868\u4e2d\u8bb0\u5f55\u7684\u6307\u9488\u3002\u4e00\u822c\u7684\u7d22\u5f15\u5b58\u50a8\u4e86\u6bcf\u4e2a\u952e\u503c\u5bf9\u5e94\u7684\u6240\u6709\u8bb0\u5f55ID\u6620\u5c04\u5173\u7cfb\u3002\u800c Bitmap \u7d22\u5f15\u662f\u5c06\u952e\u503c\u5b58\u50a8\u4e3a\u4f4d\u56fe\u5f62\u5f0f\u3002\u4e00\u822c\u7684\u7d22\u5f15\u53ef\u80fd\u4f1a\u5360\u7528\u5b9e\u9645\u6570\u636e\u51e0\u500d\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f46\u662f Bitmap \u7d22\u5f15\u5728\u63d0\u4f9b\u76f8\u540c\u529f\u80fd\u4e0b\uff0c\u9700\u8981\u7684\u5b58\u50a8\u8fdc\u8fdc\u5c0f\u4e8e\u5b9e\u9645\u7684\u6570\u636e\u5927\u5c0f\u3002\n\n\n\u4f4d\u56fe\u4e2d\u7684\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u4e00\u4e2a\u8bb0\u5f55ID\u3002\u5982\u679c\u4f4d\u88ab\u8bbe\u7f6e\u4e86\uff0c\u8be5\u8bb0\u5f55ID\u6307\u5411\u7684\u8bb0\u5f55\u6ee1\u8db3\u952e\u503c\u3002\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\u8d1f\u8d23\u5c06\u6bd4\u7279\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u8bb0\u5f55ID\u3002\u4f4d\u56fe\u4f7f\u7528\u538b\u7f29\u8fdb\u884c\u5b58\u50a8\u3002\u5982\u679c\u952e\u503c\u53bb\u91cd\u540e\u7684\u6570\u91cf\u6bd4\u8f83\u5c11\uff0cbitmap \u7d22\u5f15\u76f8\u6bd4\u666e\u901a\u7684\u7d22\u5f15\u6765\u8bf4\uff0c\u4f53\u79ef\u975e\u5e38\u5c0f\uff0c\u538b\u7f29\u6548\u679c\u66f4\u597d\uff0c\u80fd\u591f\u66f4\u597d\u7684\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u3002\u56e0\u6b64 bitmap \u7d22\u5f15\u7684\u5927\u5c0f\u53ef\u4ee5\u8fd1\u4f3c\u901a\u8fc7\u8bb0\u5f55\u603b\u6570\u4e58\u4ee5\u7d22\u5f15\u5217\u53bb\u91cd\u540e\u7684\u6570\u91cf\u5f97\u51fa\u3002\n\n\n\u5bf9\u4e8e\u5728 WHERE \u5b50\u53e5\u4e2d\u5305\u542b\u591a\u4e2a\u6761\u4ef6\u7684\u67e5\u8be2\u6765\u8bf4\uff0cbitmap \u7d22\u5f15\u4e00\u822c\u90fd\u975e\u5e38\u6709\u6548\u3002\u5982\u679c\u5728\u8bbf\u95ee\u6570\u636e\u8868\u4e4b\u524d\uff0c\u5c31\u80fd\u8fc7\u6ee4\u6389\u53ea\u6ee1\u8db3\u90e8\u5206\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u90a3\u4e48\u67e5\u8be2\u54cd\u5e94\u65f6\u95f4\u5c31\u4f1a\u5f97\u5230\u5de8\u5927\u7684\u63d0\u5347\u3002\n\n\nWhen to Use Bitmap Indexes\n\n\nBitmap\u7d22\u5f15\u7279\u522b\u9002\u7528\u6570\u636e\u4ed3\u5e93\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u6570\u636e\u7684\u66f4\u65b0\u76f8\u5bf9\u975e\u5e38\u5c11\u3002Bitmap\u7d22\u5f15\u5bf9\u4e8e\u53bb\u91cd\u540e\u5217\u503c\u5728 100 \u5230 10,0000 \u4e2a\uff0c\u5e76\u4e14\u67e5\u8be2\u65f6\u7ecf\u5e38\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\u591a\u5217\u53c2\u4e00\u8d77\u4f7f\u7528\u7684\u67e5\u8be2\u6027\u80fd\u63d0\u5347\u975e\u5e38\u660e\u663e\u3002\u4f46\u662f\u50cf\u6027\u522b\u8fd9\u79cd\u53ea\u6709\u4e24\u4e2a\u503c\u7684\u7c7b\u578b\uff0c\u5b9e\u9645\u4e0a\u7d22\u5f15\u5e76\u4e0d\u80fd\u63d0\u4f9b\u6bd4\u8f83\u597d\u7684\u6027\u80fd\u63d0\u5347\u3002\u5982\u679c\u53bb\u91cd\u540e\u7684\u503c\u591a\u4f59 10,0000 \u4e2a\uff0cbitmap \u7d22\u5f15\u7684\u6027\u80fd\u6536\u76ca\u548c\u5b58\u50a8\u6548\u7387\u90fd\u4f1a\u5f00\u59cb\u4e0b\u964d\u3002\n\n\nBitmap \u7d22\u5f15\u5bf9\u4e8e\u4e34\u65f6\u6027\u7684\u67e5\u8be2\u6027\u80fd\u6539\u8fdb\u6bd4\u8f83\u660e\u663e\u3002\u5728 WHERE \u5b50\u53e5\u4e2d\u7684 AND \u548c OR \u6761\u4ef6\u6765\u8bf4\uff0c\u53ef\u4ee5\u5229\u7528 bitmap \u7d22\u5f15\u4fe1\u606f\u5feb\u901f\u5f97\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u7528\u9996\u5148\u8bfb\u53d6\u8bb0\u5f55\u4fe1\u606f\u3002\u5982\u679c\u7ed3\u679c\u96c6\u6570\u636e\u5f88\u5c11\uff0c\u67e5\u8be2\u5c31\u4e0d\u9700\u8981\u4f7f\u7528\u5168\u8868\u626b\u63cf\uff0c\u5e76\u4e14\u80fd\u975e\u5e38\u5feb\u7684\u8fd4\u56de\u7ed3\u679c\u3002\n\n\n\u4e0d\u9002\u5408\u4f7f\u7528Bitmap\u7d22\u5f15\u7684\u60c5\u51b5\n\n\n\u5982\u679c\u5217\u7684\u6570\u636e\u552f\u4e00\u6216\u8005\u91cd\u590d\u975e\u5e38\u5c11\uff0c\u5c31\u5e94\u8be5\u907f\u514d\u4f7f\u7528bitmap\u7d22\u5f15\u3002bitmap\u7d22\u5f15\u7684\u6027\u80fd\u4f18\u52bf\u548c\u5b58\u50a8\u4f18\u52bf\u5728\u5217\u7684\u552f\u4e00\u503c\u8d85\u8fc710,0000\u540e\u5c31\u4f1a\u5f00\u59cb\u4e0b\u964d\u3002\u4e0e\u8868\u4e2d\u7684\u603b\u7eaa\u5f55\u6570\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\nBitmap\u7d22\u5f15\u4e5f\u4e0d\u9002\u5408\u5e76\u53d1\u4fee\u6539\u6570\u636e\u4e8b\u52a1\u7279\u522b\u591a\u7684OLTP\u7c7b\u578b\u5e94\u7528\u3002\n\u4f7f\u7528bitmap\u7d22\u5f15\u5e94\u8be5\u8c28\u614e\uff0c\u4ed4\u7ec6\u5bf9\u6bd4\u5efa\u7acb\u7d22\u5f15\u524d\u540e\u7684\u67e5\u8be2\u6027\u80fd\u3002\u53ea\u6dfb\u52a0\u90a3\u4e9b\u5bf9\u67e5\u8be2\u6027\u80fd\u6709\u5e2e\u52a9\u7684\u7d22\u5f15\u3002\n\n\n\u521b\u5efa\u7d22\u5f15\n\n\nCREATE INDEX \u547d\u4ee4\u53ef\u4ee5\u7ed9\u6307\u5b9a\u7684\u8868\u5b9a\u4e49\u7d22\u5f15\u3002\u7d22\u5f15\u7684\u9ed8\u8ba4\u7c7b\u578b\u662f\uff1aB\u6811\u7d22\u5f15\u3002\u4e0b\u9762\u4f8b\u5b50\u7ed9\u8868 employee \u7684 gender \u5217\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e2aB\u6811\u7d22\u5f15\uff1a\n\n\nCREATE INDEX gender_idx ON employee (gender);\n\n\n\n\u4e3a films \u8868\u7684 title \u5217\u521b\u5efa bitmap \u7d22\u5f15\uff1a\n\n\nCREATE INDEX title_bmp_idx ON films USING bitmap (title);\n\n\n\n\u68c0\u67e5\u7d22\u5f15\u7684\n\n\nproduct-name\n \u7d22\u5f15\u4e0d\u9700\u8981\u7ef4\u62a4\u548c\u8c03\u4f18\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u771f\u5b9e\u7684\u67e5\u8be2\u6765\u68c0\u67e5\u7d22\u5f15\u7684\u4f7f\u7528\u60c5\u51b5\u3002EXPLAIN \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u4e00\u4e2a\u67e5\u8be2\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\u3002\n\u67e5\u8be2\u8ba1\u5212\u4f1a\u663e\u793a\u6570\u636e\u5e93\u4e3a\u4e86\u56de\u7b54\u60a8\u7684\u67e5\u8be2\u6240\u9700\u8981\u7684\u6b65\u9aa4\u548c\u8ba1\u5212\u8282\u70b9\uff0c\u5e76\u7ed9\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u5f00\u9500\u8bc4\u4f30\u3002\u8981\u68c0\u67e5\u7d22\u5f15\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5 EXPLAIN \u8f93\u51fa\u4e2d\u4e0b\u9762\u67e5\u8be2\u8ba1\u5212\u8282\u70b9\uff1a\n\n\n\n\nIndex Scan - \u626b\u63cf\u7d22\u5f15\n\n\nBitmap Heap Scan - \u6839\u636e BitmapAnd\uff0c BitmapOr\uff0c\u6216 BitmapIndexScan \u751f\u6210\u4f4d\u56fe\uff0c\u4ece heap \u6587\u4ef6\u4e2d\u8bfb\u53d6\u76f8\u5e94\u7684\u8bb0\u5f55\u3002\n\n\nBitmap Index Scan - \u901a\u8fc7\u5e95\u5c42\u7684\u7d22\u5f15\uff0c\u751f\u6210\u6ee1\u8db3\u591a\u4e2a\u67e5\u8be2\u7684\u6761\u4ef6\u7684\u4f4d\u56fe\u4fe1\u606f\u3002\n\n\nBitmapAnd \u6216 BitmapOr - \u6839\u636e\u591a\u4e2a BitmapIndexScan \u751f\u6210\u7684\u4f4d\u56fe\u8fdb\u884c\u4f4d\u4e0e\u548c\u4f4d\u6216\u8fd0\u7b97\uff0c\u751f\u6210\u65b0\u7684\u4f4d\u56fe\u3002\n\n\n\n\n\u521b\u5efa\u7d22\u5f15\u524d\uff0c\u60a8\u9700\u8981\u505a\u4e00\u4e9b\u5b9e\u9a8c\u6765\u51b3\u5b9a\u5982\u4f55\u521b\u5efa\u7d22\u5f15\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u60a8\u9700\u8981\u8003\u8651\u7684\u5730\u65b9\uff1a\n\n\n\n\n\u5f53\u4f60\u521b\u5efa\u6216\u66f4\u65b0\u7d22\u5f15\u540e\uff0c\u6700\u597d\u8fd0\u884c ANALYZE \u547d\u4ee4\u3002ANALYZE \u9488\u5bf9\u8868\u6536\u96c6\u7edf\u8ba1\u4fe1\u606f\u3002\u67e5\u8be2\u4f18\u5316\u5668\u4f1a\u5229\u7528\u8868\u7684\u7edf\u8ba1\u4fe1\u606f\u6765\u8bc4\u4f30\u67e5\u8be2\u8fd4\u56de\u7684\u7ed3\u679c\u6570\u91cf\uff0c\u5e76\u4e14\u5bf9\u6bcf\u79cd\u67e5\u8be2\u8ba1\u5212\u4f30\u7b97\u66f4\u771f\u5b9e\u7684\u65f6\u95f4\u5f00\u9500\u3002\n\n\n\u4f7f\u7528\u771f\u5b9e\u6570\u636e\u6765\u8fdb\u884c\u5b9e\u9a8c\u3002\u5982\u679c\u5229\u7528\u6d4b\u8bd5\u6570\u636e\u6765\u51b3\u5b9a\u6dfb\u52a0\u7d22\u5f15\uff0c\u90a3\u4e48\u4f60\u7684\u7d22\u5f15\u53ea\u662f\u9488\u5bf9\u6d4b\u8bd5\u6570\u636e\u8fdb\u884c\u4e86\u4f18\u5316\u3002\n\n\n\u4e0d\u8981\u4f7f\u7528\u53ef\u80fd\u5bfc\u81f4\u7ed3\u679c\u4e0d\u771f\u5b9e\u6216\u8005\u6570\u636e\u503e\u659c\u7684\u5c0f\u6570\u636e\u96c6\u8fdb\u884c\u6d4b\u8bd5\u3002\n\n\n\u8bbe\u8ba1\u6d4b\u8bd5\u6570\u636e\u65f6\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u3002\u6d4b\u8bd5\u6570\u636e\u5982\u679c\u8fc7\u4e8e\u76f8\u4f3c\uff0c\u5b8c\u5168\u968f\u673a\uff0c\u6309\u7279\u5b9a\u987a\u5e8f\u5bfc\u5165\uff0c\u90fd\u53ef\u80fd\u5bfc\u81f4\u7edf\u8ba1\u6570\u636e\u4e0e\u771f\u5b9e\u6570\u636e\u5206\u5e03\u7684\u5de8\u5927\u5dee\u5f02\u3002\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u8fd0\u884c\u65f6\u53c2\u6570\u6765\u7981\u7528\u67d0\u4e9b\u7279\u5b9a\u67e5\u8be2\u7c7b\u578b\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u52a0\u9488\u5bf9\u6027\u5bf9\u7d22\u5f15\u4f7f\u7528\u8fdb\u884c\u6d4b\u8bd5\u3002\u4f8b\u5982\uff1a\u5173\u95ed\u987a\u5e8f\u626b\u63cf\uff08enable_seqscan\uff09\u548c\u5d4c\u5957\u8fde\u63a5\uff08enable_nestloop\uff09\uff0c\u53ca\u5176\u5b83\u57fa\u7840\u67e5\u8be2\u8ba1\u5212\uff0c\u53ef\u4ee5\u5f3a\u5236\u7cfb\u7edf\u9009\u62e9\u5176\u5b83\u7c7b\u578b\u7684\u67e5\u8be2\u8ba1\u5212\u3002\u901a\u8fc7\u5bf9\u67e5\u8be2\u8ba1\u65f6\u548c\u5229\u7528 EXPLAIN ANALYZE \u547d\u4ee4\u6765\u5bf9\u6bd4\u4f7f\u7528\u548c\u4e0d\u4f7f\u7528\u7d22\u5f15\u7684\u67e5\u8be2\u7ed3\u679c\u3002\n\n\n\n\n\u7d22\u5f15\u7ba1\u7406\n\n\n\u4f7f\u7528 REINDEX \u547d\u4ee4\u53ef\u4ee5\u5bf9\u620f\u80fd\u4e0d\u597d\u7684\u7d22\u5f15\u8fdb\u884c\u91cd\u65b0\u521b\u5efa\u3002REINDEX \u91cd\u5efa\u662f\u5bf9\u8868\u4e2d\u6570\u636e\u91cd\u5efa\u5e76\u66ff\u6362\u5c31\u7d22\u5f15\u5b9e\u73b0\u7684\u3002\n\n\n\u5728\u6307\u5b9a\u8868\u4e0a\u91cd\u65b0\u751f\u6210\u6240\u6709\u7d22\u5f15\uff1a\n\n\nREINDEX my_table;\n\n\n\n\u5bf9\u6307\u5b9a\u7d22\u5f15\u91cd\u65b0\u751f\u6210\uff1a\n\n\nREINDEX my_index;\n\n\n\n\u5220\u9664\u7d22\u5f15\n\n\nDROP INDEX \u547d\u4ee4\u5220\u9664\u4e00\u4e2a\u7d22\u5f15\uff0c\u4f8b\u5982\uff1a\n\n\nDROP INDEX title_idx;\n\n\n\n\u52a0\u8f7d\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u5220\u9664\u7d22\u5f15\uff0c\u52a0\u8f7d\u6570\u636e\uff0c\u518d\u91cd\u65b0\u5efa\u7acb\u7d22\u5f15\u7684\u65b9\u5f0f\u52a0\u5feb\u6570\u636e\u52a0\u8f7d\u901f\u5ea6\u3002\n\n\n\u521b\u5efa\u548c\u7ba1\u7406\u89c6\u56fe\n\n\n\u89c6\u56fe\u80fd\u591f\u5c06\u60a8\u5e38\u7528\u6216\u590d\u6742\u7684\u67e5\u8be2\u4fdd\u5b58\u8d77\u6765\uff0c\u5e76\u5141\u8bb8\u60a8\u5728 SELECT \u8bed\u53e5\u4e2d\u50cf\u8bbf\u95ee\u8868\u4e00\u6837\u8bbf\u95ee\u4fdd\u5b58\u7684\u67e5\u8be2\u3002\u89c6\u56fe\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u6570\u636e\uff0c\u800c\u662f\u5728\u8bbf\u95ee\u89c6\u56fe\u65f6\uff0c\u89c6\u56fe\u5b9a\u4e49\u7684\u67e5\u8be2\u4ee5\u81ea\u67e5\u8be2\u7684\u65b9\u5f0f\u88ab\u996e\u7528\u3002\n\n\n\u5982\u679c\u67d0\u4e2a\u81ea\u67e5\u8be2\u53ea\u88ab\u67d0\u4e2a\u7279\u5b9a\u67e5\u8be2\u4f7f\u7528\uff0c\u8003\u8651\u4f7f\u7528 SELECT \u8bed\u53e5\u7684 WITH \u5b50\u53e5\u6765\u907f\u514d\u521b\u5efa\u4e00\u5f20\u4e0d\u80fd\u88ab\u516c\u7528\u7684\u89c6\u56fe\u3002\n\n\n\u521b\u5efa\u89c6\u56fe\n\n\nCREATE VIEW \u547d\u4ee4\u6839\u636e\u4e00\u4e2a\u67e5\u8be2\u5b9a\u4e49\u4e00\u4e2a\u89c6\u56fe\uff0c\u4f8b\u5982\uff1a\n\n\nCREATE VIEW comedies AS SELECT * FROM films WHERE kind = 'comedy';\n\n\n\n\u89c6\u56fe\u4f1a\u5ffd\u7565\u89c6\u56fe\u5b9a\u4e49\u67e5\u8be2\u4e2d\u7684 ORDER BY \u548c SORT \u7684\u529f\u80fd\u3002\n\n\n\u5220\u9664\u89c6\u56fe\n\n\nDROP VIEW \u5220\u9664\u4e00\u5f20\u89c6\u56fe\uff0c\u4f8b\u5982:\n\n\nDROP VIEW topten;", 
            "title": "\u5b9a\u4e49\u6570\u636e\u5e93\u5bf9\u8c61"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_1", 
            "text": "\u672c\u8282\u4ecb\u7ecd  product-name  \u652f\u6301\u7684\u6570\u636e\u5b9a\u4e49\u8bed\u8a00 (DDL) \u4ee5\u53ca\u5982\u4f55\u521b\u5efa\u548c\u7ba1\u7406\u6570\u636e\u5e93\u5bf9\u8c61\u3002  \u5728 Greenplum Database \u4e2d\u521b\u5efa\u5bf9\u8c61\u5305\u62ec\u524d\u671f\u9009\u62e9\u6570\u636e\u5206\u5e03\u3001 \u5b58\u50a8\u9009\u9879\u3001 \u6570\u636e\u52a0\u8f7d\u548c\u5176\u4ed6\u4f1a\u5f71\u54cd\u60a8\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u8fd0\u884c\u6027\u80fd\u7684\u529f\u80fd\u3002\u4e86\u89e3\u53ef\u7528\u7684\u9009\u9879\u548c\u6570\u636e\u5e93\u5185\u90e8\u5982\u4f55\u652f\u6301\u8fd9\u4e9b\u9009\u9879\u5c06\u5e2e\u52a9\u60a8\u505a\u51fa\u6b63\u786e\u7684\u51b3\u5b9a\u3002\n\u5927\u90e8\u5206 Greenplum \u9ad8\u7ea7\u7279\u6027\u662f\u901a\u8fc7\u4f7f\u7528\u6269\u5c55\u7684 SQL CREATE DDL \u8bed\u53e5\u5b8c\u6210\u7684\u3002", 
            "title": "\u5b9a\u4e49\u6570\u636e\u5e93\u5bf9\u8c61"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_2", 
            "text": "product-name  \u652f\u6301\u521b\u5efa\u591a\u4e2a\u72ec\u7acb\u7684\u6570\u636e\u5e93\u5bf9\u6570\u636e\u8fdb\u884c\u9694\u79bb\u3002\u8fd9\u4e2a\u7279\u6027\u4e0e\u67d0\u4e9b\u6570\u636e\u5e93\u5e76\u4e0d\u76f8\u540c\uff0c\u4f8b\u5982\uff1aOracle\u6570\u636e\u5e93\u3002\u867d\u7136  product-name  \u652f\u6301\u591a\u4e2a\u6570\u636e\u5e93\uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u7a0b\u5e8f\u4e00\u6b21\u53ea\u80fd\u8fde\u63a5\u5e76\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u5e93\u3002", 
            "title": "\u521b\u5efa\u548c\u7ba1\u7406\u6570\u636e\u5e93"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_3", 
            "text": "\u60a8\u521b\u5efa\u7684\u6bcf\u4e00\u4e2a\u6570\u636e\u5e93\u90fd\u662f\u57fa\u4e8e\u4e00\u4e2a\u6a21\u7248\u5f97\u5230\u7684\u3002\u7cfb\u7edf\u4e2d\u7684\u9ed8\u8ba4\u6a21\u7248\u6570\u636e\u5e93\u53eb\u505a\uff1atemplate1\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u4e0d\u8981\u5728template1\u4e2d\u521b\u5efa\u4efb\u4f55\u6570\u636e\u5bf9\u8c61\uff0c\u5426\u5219\u60a8\u540e\u7eed\u521b\u5efa\u7684\u6570\u636e\u5e93\u90fd\u4f1a\u5305\u542b\u8fd9\u4e9b\u6570\u636e\u3002  product-name  \u5185\u90e8\u8fd8\u4f7f\u7528\u53e6\u5916\u4e24\u4e2a\u5185\u7f6e\u6a21\u7248\uff1atemplate0 \u548c postgres\u3002\u56e0\u6b64\u8bf7\u52ff\u5220\u9664\u6216\u4fee\u6539 template0 \u548c postgres \u6570\u636e\u5e93\u3002\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 template0 \u4f5c\u4e3a\u6a21\u7248\uff0c\u521b\u5efa\u4e00\u4e2a\u53ea\u542b\u6709\u6807\u51c6\u9884\u5b9a\u4e49\u5bf9\u8c61\u7684\u7a7a\u767d\u6570\u636e\u5e93\u3002", 
            "title": "\u5173\u4e8e\u6570\u636e\u5e93\u6a21\u7248"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_4", 
            "text": "\u4f7f\u7528 CREATE DATABASE \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e93. \u4f8b\u5982:  =  CREATE DATABASE new_dbname;  \u82e5\u8981\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93, \u60a8\u9700\u8981\u62e5\u6709\u521b\u5efa\u6570\u636e\u5e93\u7684\u6743\u9650\u6216\u8005\u8d85\u7ea7\u7528\u6237\u6743\u9650\u3002\u5982\u679c\u60a8\u6ca1\u6709\u76f8\u5e94\u7684\u6743\u9650\uff0c\u521b\u5efa\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u5c06\u4f1a\u5931\u8d25\u3002\u53ef\u4ee5\u8054\u7cfb\u6570\u636e\u7ba1\u7406\u5458\u6765\u53d6\u5f97\u521b\u5efa\u6570\u636e\u5e93\u7684\u6743\u9650\u3002", 
            "title": "\u521b\u5efa\u6570\u636e\u5e93"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_5", 
            "text": "\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u65f6\uff0c\u7cfb\u7edf\u5b9e\u9645\u4e0a\u901a\u8fc7\u514b\u9686\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6807\u51c6\u6570\u636e\u5e93\u6a21\u7248 template1 \u6765\u5b8c\u6210\u3002\u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4efb\u610f\u4e00\u4e2a\u6570\u636e\u4f5c\u4e3a\u521b\u5efa\u65b0\u6570\u636e\u5e93\u7684\u6a21\u7248\uff0c\u8fd9\u6837\u65b0\u7684\u6570\u636e\u5e93\u5c31\u4f1a\u81ea\u52a8\u5305\u542b\u6a21\u7248\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u548c\u6570\u636e\u3002\u4f8b\u5982\uff1a  =  CREATE DATABASE new_dbname TEMPLATE old_dbname;", 
            "title": "\u514b\u9686\u6570\u636e\u5e93"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_6", 
            "text": "\u5982\u679c\u60a8\u4f7f\u7528 psql \u5ba2\u6237\u7aef\u7a0b\u5e8f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 \\l \u547d\u4ee4\u5217\u51fa\u7cfb\u7edf\u4e2d\u7684\u6a21\u7248\u6570\u636e\u5e93\u548c\u6570\u636e\u5e93\u3002\u5982\u679c\u60a8\u4f7f\u7528\u5176\u4ed6\u5ba2\u6237\u7aef\u7a0b\u5e8f\u5e76\u4e14\u62e5\u6709\u8d85\u7ea7\u7528\u6237\u6743\u9650\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 pg_database \u7cfb\u7edf\u8868\u5217\u51fa\u6240\u6709\u6570\u636e\u5e93\u3002\u4f8b\u5982\uff1a  =  SELECT datname from pg_database;", 
            "title": "\u5217\u51fa\u6240\u6709\u6570\u636e\u5e93"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_7", 
            "text": "ALTER DATABASE \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u6570\u636e\u5e93\u7684\u5c5e\u4e3b\uff0c\u540d\u79f0\u6216\u8005\u9ed8\u8ba4\u53c2\u6570\u914d\u7f6e\u3002\u4f8b\u5982, \u4e0b\u9762\u7684\u547d\u4ee4\u4fee\u6539\u4e86\u6570\u636e\u5e93\u9ed8\u8ba4\u6a21\u5f0f\u641c\u7d22\u8def\u5f84\uff1a  =  ALTER DATABASE mydatabase SET search_path TO myschema, public, pg_catalog;  \u4f60\u9700\u8981\u662f\u6570\u636e\u5e93\u7684\u5c5e\u4e3b\u6216\u62e5\u6709\u8d85\u7ea7\u7528\u6237\u6743\u9650\uff0c\u624d\u53ef\u4ee5\u5bf9\u6570\u636e\u5e93\u4fe1\u606f\u8fdb\u884c\u4fee\u6539\u3002", 
            "title": "\u4fee\u6539\u6570\u636e\u5e93"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_8", 
            "text": "DROP DATABASE \u547d\u4ee4\u53ef\u4ee5\u5220\u9664\u6570\u636e\u5e93\u3002\u8be5\u547d\u4ee4\u5c06\u4f1a\u4ece\u7cfb\u7edf\u8868\u4e2d\u5220\u9664\u6570\u636e\u5e93\u76f8\u5173\u4fe1\u606f\uff0c\u5e76\u5728\u78c1\u76d8\u4e0a\u5220\u9664\u8be5\u6570\u636e\u5e93\u76f8\u5173\u7684\u6240\u6709\u6570\u636e\u3002\u53ea\u6709\u6570\u636e\u5e93\u7684\u5c5e\u4e3b\u6216\u8005\u8d85\u7ea7\u7528\u6237\u624d\u80fd\u591f\u5220\u9664\u6570\u636e\u5e93\u3002\u6b63\u5728\u88ab\u4f7f\u7528\u7684\u6570\u636e\u5e93\u662f\u65e0\u6cd5\u88ab\u5220\u9664\u7684\u3002\u4f8b\u5982\uff1a  =  \\c template1\n=  DROP DATABASE mydatabase;  \u8b66\u544a\uff1a\u5220\u9664\u6570\u636e\u5e93\u662f\u4e0d\u53ef\u9006\u7684\u8fc7\u7a0b\uff0c\u8bf7\u5c0f\u5fc3\u4f7f\u7528\u3002", 
            "title": "\u5220\u9664\u6570\u636e\u5e93"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_9", 
            "text": "\u901a\u8fc7\u6a21\u5f0f\uff08Schema\uff09\u5bf9\u6570\u636e\u5e93\u5bf9\u8c61\u8fdb\u884c\u903b\u8f91\u4e0a\u7684\u5206\u7c7b\u7ec4\u7ec7\u3002\u901a\u8fc7\u4f7f\u7528\u6a21\u5f0f\u5141\u8bb8\u60a8\u5728\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u521b\u5efa\u540c\u540d\u5bf9\u8c61\uff08\u4f8b\u5982\uff1a\u8868\uff09\u3002", 
            "title": "\u521b\u5efa\u548c\u7ba1\u7406\u6a21\u5f0f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#public", 
            "text": "\u6570\u636e\u5e93\u9ed8\u8ba4\u5305\u542b\u4e00\u4e2a\u9ed8\u8ba4\u6a21\u5f0f\uff1apublic\u3002\u5982\u679c\u60a8\u6ca1\u6709\u521b\u5efa\u4efb\u4f55\u6a21\u5f0f\uff0c\u65b0\u521b\u89c1\u7684\u5bf9\u8c61\u4f1a\u9ed8\u8ba4\u4f7f\u7528 public \u6a21\u5f0f\u3002\u6570\u636e\u5e93\u6240\u6709\u7684\u7528\u6237\u90fd\u62e5\u6709 public \u6a21\u5f0f\u4e0a\u7684 CREATE \uff08\u521b\u5efa\uff09\u548c USAGE\uff08\u4f7f\u7528\uff09\u6743\u9650\u3002\u5f53\u60a8\u521b\u5efa\u989d\u5916\u7684\u6a21\u5f0f\u65f6\uff0c\u60a8\u53ef\u4ee5\u5bf9\u7528\u6237\u6388\u4e88\u6743\u9650\uff0c\u6765\u63a7\u5236\u8bbf\u95ee\u3002", 
            "title": "\u9ed8\u8ba4\u6a21\u5f0f \"Public\""
        }, 
        {
            "location": "/management/management-defining-database-objects/#_10", 
            "text": "\u4f7f\u7528  CREATE SCHEMA  \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6a21\u5f0f. \u4f8b\u5982:   =  CREATE SCHEMA myschema;  \u8981\u5728\u6307\u5b9a\u7684\u6a21\u5f0f\u4e0b\u521b\u5efa\u5bf9\u8c61\u6216\u8bbf\u95ee\u5bf9\u8c61\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u9650\u5b9a\u540d\u683c\u5f0f\u6765\u8fdb\u884c\u3002\u9650\u5b9a\u540d\u683c\u5f0f\u662f\u6a21\u5f0f\u540d\u201d.\u201c\u8868\u540d\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a  myschema.table  \u53c2\u8003  \u6a21\u5f0f\u641c\u7d22\u8def\u5f84  \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8bbf\u95ee\u6a21\u5f0f\u7684\u8bf4\u660e.\n\u53ef\u4ee5\u901a\u8fc7\u4e3a\u7528\u6237\u521b\u5efa\u79c1\u6709\u7684\u6a21\u5f0f\uff0c\u6765\u66f4\u597d\u7684\u9650\u5236\u7528\u6237\u5bf9\u540d\u79f0\u7a7a\u95f4\u7684\u4f7f\u7528\u3002\u8bed\u6cd5\u5982\u4e0b\uff1a  =  CREATE SCHEMA schemaname AUTHORIZATION username;", 
            "title": "\u521b\u5efa\u6a21\u5f0f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_11", 
            "text": "\u901a\u8fc7\u4f7f\u7528\u6a21\u5f0f\u9650\u5b9a\u540d\uff0c\u53ef\u4ee5\u6307\u5411\u6570\u636e\u5e93\u4e2d\u7279\u5b9a\u4f4d\u7f6e\u7684\u5bf9\u8c61\u3002\u4f8b\u5982\uff1a  =  SELECT * FROM myschema.mytable;  \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 search_path \u6765\u6307\u5b9a\u6a21\u5f0f\u7684\u641c\u7d22\u987a\u5e8f\u3002\u641c\u7d22\u8def\u5f84\u4e2d\u7b2c\u4e00\u4e2a\u6a21\u5f0f\u5c31\u662f\u7cfb\u7edf\u4f7f\u7528\u7684\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u5f53\u6ca1\u6709\u5f15\u7528\u6a21\u5f0f\u65f6\uff0c\u5bf9\u8c61\u5c06\u4f1a\u81ea\u52a8\u521b\u5efa\u5728\u9ed8\u8ba4\u6a21\u5f0f\u4e0b\u3002", 
            "title": "\u6a21\u5f0f\u7684\u641c\u7d22\u8def\u5f84"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_12", 
            "text": "search_path \u914d\u7f6e\u53c2\u6570\u6d8c\u6765\u8bbe\u7f6e\u6a21\u5f0f\u641c\u7d22\u987a\u5e8f\u3002ALTER DATABASE \u547d\u4ee4\u53ef\u4ee5\u8bbe\u7f6e\u6570\u636e\u5e93\u5185\u9ed8\u8ba4\u641c\u7d22\u8def\u5f84\u3002\u4f8b\u5982\uff1a   =  ALTER DATABASE mydatabase SET search_path TO myschema, public, pg_catalog;  \u8fd8\u53ef\u4ee5\u901a\u8fc7 ALTER ROLE \u547d\u4ee4\u6765\u4e3a\u6307\u5b9a\u7684\u7528\u6237\u4fee\u6539 search_path \u53c2\u6570\u3002\u4f8b\u5982\uff1a   =  ALTER ROLE sally SET search_path TO myschema, public, pg_catalog;", 
            "title": "\u8bbe\u7f6e\u6a21\u5f0f\u641c\u7d22\u8def\u5f84"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_13", 
            "text": "\u901a\u8fc7 current_schema() \u51fd\u6570\uff0c\u7cfb\u7edf\u53ef\u4ee5\u663e\u793a\u5f53\u524d\u6a21\u5f0f\u3002\u4f8b\u5982\uff1a  =  SELECT current_schema();  \u7c7b\u4f3c\u7684\uff0c\u4f7f\u7528 SHOW \u547d\u4ee4\u4e5f\u53ef\u4ee5\u663e\u793a\u5f53\u524d\u641c\u7d22\u8def\u5f84\u3002\u4f8b\u5982\uff1a  =  SHOW search_path;", 
            "title": "\u67e5\u770b\u5f53\u524d\u6a21\u5f0f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_14", 
            "text": "\u4f7f\u7528 DROP SCHEMA \u547d\u4ee4\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff1a  =  DROP SCHEMA myschema;  \u9ed8\u8ba4\u7684\u5220\u9664\u547d\u4ee4\u53ea\u80fd\u5220\u9664\u4e00\u4e2a\u7a7a\u7684\u6a21\u5f0f\u3002\u8981\u5220\u9664\u6a21\u5f0f\u53ca\u5176\u5185\u90e8\u5305\u542b\u7684\u6240\u6709\u5bf9\u8c61\uff08\u8868\uff0c\u6570\u636e\uff0c\u51fd\u6570\uff0c\u7b49\uff09\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff1a  =  DROP SCHEMA myschema CASCADE;", 
            "title": "\u5220\u9664\u6a21\u5f0f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_15", 
            "text": "\u6bcf\u4e2a\u6570\u636e\u5e93\u4e2d\u5185\u7f6e\u4e86\u4e0b\u5217\u7cfb\u7edf\u6a21\u5f0f\uff1a   pg_catalog \u5305\u542b\u4e86\u7cfb\u7edf\u8868\uff0c\u5185\u5efa\u6570\u636e\u7c7b\u578b\uff0c\u51fd\u6570\u548c\u8fd0\u7b97\u7b26\u5bf9\u8c61\u3002\u6a21\u5f0f\u641c\u7d22\u8def\u5f84\u65f6\uff0c\u7cfb\u7edf\u603b\u662f\u4f1a\u8003\u8651\u6b64\u6a21\u5f0f\u4e0b\u7684\u6240\u6709\u5bf9\u8c61\u3002  information_schema \u6a21\u5f0f\u5305\u542b\u4e86\u5927\u91cf\u6807\u51c6\u5316\u89c6\u56fe\u6765\u63cf\u8ff0\u6570\u636e\u5e93\u5185\u90e8\u5bf9\u8c61\u4fe1\u606f\u3002\u8fd9\u4e9b\u89c6\u56fe\u4ee5\u6807\u51c6\u5316\u65b9\u5f0f\u6765\u5c55\u73b0\u7cfb\u7edf\u8868\u4e2d\u7684\u4fe1\u606f\u3002  pg_toast \u5b58\u50a8\u5927\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a\u8bb0\u5f55\u5927\u7b11\u8d85\u8fc7\u9875\u9762\u5927\u5c0f\u7684\u5bf9\u8c61\u3002\u6b64\u6a21\u5f0f\u4e0b\u7684\u4fe1\u606f\u662f\u6570\u636e\u5e93\u5185\u90e8\u4f7f\u7528\u7684\u3002  pg_bitmapindex \u5b58\u50a8bitmap\u6240\u6709\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a\u503c\u5217\u8868\u3002\u6b64\u6a21\u5f0f\u4e0b\u7684\u4fe1\u606f\u662f\u6570\u636e\u5e93\u5185\u90e8\u4f7f\u7528\u7684\u3002  pg_aoseg \u5b58\u50a8 append-optimized \u8868\u5bf9\u8c61. \u6b64\u6a21\u5f0f\u4e0b\u7684\u4fe1\u606f\u662f\u6570\u636e\u5e93\u5185\u90e8\u4f7f\u7528\u7684\u3002  gp_toolkit \u662f\u4e00\u4e2a\u7ba1\u7406\u89c6\u56fe\uff0c\u5185\u7f6e\u4e00\u4e9b\u5916\u90e8\u8868\uff0c\u89c6\u56fe\u548c\u51fd\u6570\u3002\u53ef\u4ee5\u901a\u8fc7SQL\u8bed\u53e5\u8fdb\u884c\u8bbf\u95ee\u3002\u6240\u6709\u6570\u636e\u5e93\u7528\u6237\u90fd\u80fd\u591f\u8bbf\u95ee gp_toolkit \u6765\u67e5\u770b\u65e5\u5fd7\u6587\u4ef6\u548c\u5176\u5b83\u7cfb\u7edf\u53c2\u6570\u3002", 
            "title": "\u7cfb\u7edf\u9884\u5b9a\u4e49\u6a21\u5f0f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_16", 
            "text": "product-name  \u4e2d\u7684\u8868\u548c\u5176\u5b83\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5341\u5206\u76f8\u4f3c\uff0c\u4f46\u662f\u4e3a\u4e86\u9002\u5e94\u5206\u5e03\u5f0f\u9700\u6c42\uff0c\u6570\u636e\u5c06\u4f1a\u5206\u6563\u5230\u591a\u4e2a\u8282\u70b9\u8fdb\u884c\u5b58\u50a8\u3002\u6bcf\u6b21\u521b\u5efa\u8868\u65f6\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u7684\u5206\u5e03\u7b56\u7565\u3002", 
            "title": "\u521b\u5efa\u548c\u7ba1\u7406\u8868"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_17", 
            "text": "CREATE TABLE\u547d\u4ee4\u7528\u6765\u521b\u5efa\u548c\u5b9a\u4e49\u8868\u7ed3\u6784\uff0c\u521b\u5efa\u8868\u65f6\uff0c\u60a8\u9700\u8981\u5b9a\u4e49\u4e0b\u9762\u4fe1\u606f\uff1a   \u8868\u4e2d\u5305\u542b\u7684\u5217\u53ca\u5176\u5bf9\u5e94\u6570\u636e\u7c7b\u578b\u3002\u8bf7\u53c2\u8003 \u9009\u62e9\u5217\u6570\u636e\u7c7b\u578b\u3002  \u7528\u4e8e\u9650\u5236\u8868\u6216\u5217\u5b58\u50a8\u6570\u636e\u7684\u8868\u7ea6\u675f\u6216\u5217\u7ea6\u675f\u3002\u8bf7\u53c2\u8003 \u8bbe\u7f6e\u8868\u7ea6\u675f\u548c\u5217\u7ea6\u675f\u3002  \u6570\u636e\u5206\u5e03\u7b56\u7565\uff0c\u7cfb\u7edf\u5c06\u4f1a\u6839\u636e\u7b56\u7565\u5c06\u6570\u636e\u5b58\u50a8\u5230\u4e0d\u540c\u8282\u70b9\u3002\u8bf7\u53c2\u8003 \u9009\u62e9\u6570\u636e\u5206\u5e03\u7b56\u7565\u3002  \u78c1\u76d8\u5b58\u50a8\u683c\u5f0f\u3002\u8bf7\u53c2\u8003 \u8868\u5b58\u50a8\u6a21\u578b\u3002  \u5927\u8868\u7684\u6570\u636e\u5206\u533a\u7b56\u7565\u3002\u8bf7\u53c2\u8003 \u521b\u5efa\u548c\u7ba1\u7406\u6570\u636e\u5e93\uff08TODO: \u9519\u8bef\uff1f\uff09\u3002", 
            "title": "\u521b\u5efa\u8868"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_18", 
            "text": "\u5217\u6570\u636e\u7c7b\u578b\u7684\u9009\u62e9\u662f\u6839\u636e\u5b58\u50a8\u8be5\u5217\u7684\u6570\u636e\u503c\u51b3\u5b9a\u7684\u3002\u9009\u62e9\u6570\u636e\u7c7b\u578b\u5e94\u8be5\u5c3d\u53ef\u80fd\u9009\u62e9\u5360\u7528\u7a7a\u95f4\u66f4\u5c0f\uff0c\u540c\u65f6\u80fd\u591f\u4fdd\u8bc1\u5b58\u50a8\u6240\u6709\u6570\u636e\u5e76\u80fd\u6700\u5408\u7406\u7684\u8868\u8fbe\u6570\u636e\u3002\u4f8b\u5982\uff1a\u4f7f\u7528\u5b57\u7b26\u578b\u6570\u636e\u7c7b\u578b\u4fdd\u5b58\u5b57\u7b26\u4e32\uff0c\u65e5\u671f\u6216\u8005\u65e5\u671f\u65f6\u95f4\u6233\u7c7b\u578b\u4fdd\u5b58\u65e5\u671f\u7c7b\u578b\uff0c\u6570\u503c\u7c7b\u578b\u6765\u4fdd\u5b58\u6570\u503c\u3002  \u6211\u4eec\u5efa\u8bae\u60a8\u4f7f\u7528 VARCHAR \u6216\u8005 TEXT \u6765\u4fdd\u5b58\u6587\u672c\u7c7b\u6570\u636e\u3002\u6211\u4eec\u4e0d\u63a8\u8350\u4f7f\u7528 CHAR \u7c7b\u578b\u4fdd\u5b58\u6587\u672c\u7c7b\u578b\u3002VARCHAR \u6216 TEXT \u7c7b\u578b\u5bf9\u4e8e\u6570\u636e\u672b\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\u5c06\u539f\u6837\u4fdd\u5b58\u548c\u5904\u7406\uff0c\u4f46\u662f CHAR \u7c7b\u578b\u4e0d\u80fd\u6ee1\u8db3\u8fd9\u4e2a\u9700\u6c42\u3002\u8bf7\u53c2\u8003 CREATE TABLE \u547d\u4ee4\u4e86\u89e3\u66f4\u591a\u76f8\u5173\u4fe1\u606f\u3002   \u60a8\u5e94\u8be5\u4f7f\u7528\u6700\u5c0f\u7684\u6570\u503c\u7c7b\u578b\u540c\u65f6\u6ee1\u8db3\u6570\u503c\u5b58\u50a8\u548c\u672a\u6765\u7684\u6269\u5c55\u9700\u6c42\u3002\u4f8b\u5982\uff1a\u4f7f\u7528 BIGINT \u7c7b\u578b\u5b58\u50a8 INT \u6216\u8005 SMALLINT \u4f1a\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\u3002\u5982\u679c\u6570\u636e\u968f\u65f6\u95f4\u63a8\u79fb\u9700\u8981\u6269\u5c55\uff0c\u5e76\u4e14\u6570\u636e\u91cd\u65b0\u52a0\u8f7d\u6bd4\u8f83\u6d6a\u8d39\u65f6\u95f4\uff0c\u5c31\u5e94\u8be5\u8003\u8651\u5f00\u59cb\u5c31\u4f7f\u7528\u66f4\u5927\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f8b\u5982\uff1a\u5982\u679c\u5f53\u524d\u6570\u503c\u80fd\u591f\u7528SMALLINT\u5b58\u50a8\uff0c\u4f46\u662f\u6570\u503c\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u90a3\u4e48\u4f7f\u7528INT\u7c7b\u578b\u53ef\u80fd\u662f\u4e00\u4e2a\u957f\u671f\u6765\u770b\u66f4\u597d\u7684\u9009\u62e9\u3002  \u5982\u679c\u60a8\u8003\u8651\u8fde\u63a5\u4e24\u5f20\u8868\uff0c\u90a3\u4e48\u8fde\u63a5\u53c2\u4e0e\u7684\u6570\u636e\u7c7b\u578b\u5e94\u8be5\u4fdd\u6301\u4e00\u81f4\u3002\u901a\u5e38\u8868\u8fde\u63a5\u662f\u7528\u4e00\u5f20\u8868\u7684\u4e3b\u952e\u548c\u53e6\u4e00\u5f20\u8868\u7684\u5916\u952e\u8fdb\u884c\u7684\u3002\u5f53\u6570\u636e\u7c7b\u578b\u4e0d\u4e00\u81f4\u65f6\uff0c\u6570\u636e\u5e93\u5c31\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u7136\u800c\u8fd9\u5b8c\u5168\u662f\u65e0\u610f\u4e49\u7684\u5f00\u9500\u3002  \u7cfb\u7edf\u652f\u6301\u5927\u91cf\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6587\u6863\u540e\u9762\u4f1a\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\u3002", 
            "title": "\u9009\u62e9\u5217\u6570\u636e\u7c7b\u578b"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_19", 
            "text": "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u8868\u6216\u8005\u5217\u4e0a\u521b\u5efa\u7ea6\u675f\u6765\u9650\u5236\u5b58\u50a8\u5230\u8868\u4e2d\u7684\u6570\u636e\u3002 product-name  \u652f\u6301 PostgreSQL \u7684\u6240\u6709\u79cd\u7c7b\u7684\u7ea6\u675f\uff0c\u4f46\u662f\u60a8\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u989d\u5916\u7684\u9650\u5236\u6761\u4ef6\uff1a   CHECK \u7ea6\u675f\u53ea\u80fd\u5f15\u7528 CHECK \u7684\u76ee\u6807\u8868\u3002  UNIQUE \u548c PRIMARY KEY \u7ea6\u675f\u5fc5\u987b\u548c\u6570\u636e\u5206\u5e03\u952e\u548c\u5206\u533a\u952e\u517c\u5bb9\u3002  FOREIGN KEY \u7ea6\u675f\u80fd\u591f\u521b\u5efa\uff0c\u4f46\u662f\u7cfb\u7edf\u4e0d\u4f1a\u68c0\u67e5\u6b64\u7ea6\u675f\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002  \u521b\u5efa\u5728\u5206\u533a\u8868\u4e0a\u7684\u7ea6\u675f\u5c06\u4f1a\u628a\u6574\u4e2a\u5206\u533a\u8868\u5f53\u6210\u4e00\u4e2a\u6574\u4f53\u5904\u7406\u3002\u7cfb\u7edf\u4e0d\u5141\u8bb8\u9488\u5bf9\u8868\u4e2d\u7279\u5b9a\u5206\u533a\u5b9a\u4e49\u7ea6\u675f\u6761\u4ef6\u3002", 
            "title": "\u8bbe\u7f6e\u8868\u7ea6\u675f\u548c\u5217\u7ea6\u675f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#check", 
            "text": "Check \u7ea6\u675f\u5141\u8bb8\u4f60\u9650\u5236\u67d0\u4e2a\u5217\u503c\u5fc5\u987b\u6ee1\u8db3\u4e00\u4e2a\u5e03\u5c14\uff08\u771f\u503c\uff09\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff0c\u8981\u6c42\u4ea7\u54c1\u4ef7\u683c\u5fc5\u987b\u662f\u4e00\u4e2a\u6b63\u6570\uff1a  =  CREATE TABLE products \n           ( product_no integer, \n             name text, \n             price numeric CHECK (price   0) );", 
            "title": "Check \u7ea6\u675f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_20", 
            "text": "\u975e\u7a7a\u7ea6\u675f\u5141\u8bb8\u4f60\u9650\u5236\u67d0\u4e2a\u5217\u503c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u6b64\u7ea6\u675f\u603b\u662f\u4ee5\u5217\u7ea6\u675f\u5f62\u5f0f\u4f7f\u7528\u3002\u4f8b\u5982\uff1a  =  CREATE TABLE products \n           ( product_no integer NOT NULL,\n             name text NOT NULL,\n             price numeric );", 
            "title": "\u975e\u7a7a\u7ea6\u675f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_21", 
            "text": "\u552f\u4e00\u7ea6\u675f\u786e\u4fdd\u5b58\u50a8\u5728\u4e00\u5f20\u8868\u4e2d\u7684\u4e00\u5217\u6216\u591a\u5217\u6570\u636e\u6570\u636e\u5df2\u5b9a\u552f\u4e00\u3002\u8981\u4f7f\u7528\u552f\u4e00\u7ea6\u675f\uff0c\u8868\u5fc5\u987b\u4f7f\u7528Hash\u5206\u5e03\u7b56\u7565\uff0c\u5e76\u4e14\u7ea6\u675f\u5217\u5fc5\u987b\u548c\u8868\u7684\u5206\u5e03\u952e\u5bf9\u5e94\u7684\u5217\u4e00\u81f4\uff08\u6216\u8005\u662f\u8d85\u96c6\uff09\u3002\u4f8b\u5982\uff1a  =  CREATE TABLE products \n           ( product_no integer UNIQUE, \n             name text, \n             price numeric)\n          DISTRIBUTED BY (product_no);", 
            "title": "\u7ea6\u675f\u7ea6\u675f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_22", 
            "text": "\u4e3b\u952e\u7ea6\u675f\u662f\u552f\u4e00\u7ea6\u675f\u548c\u975e\u7a7a\u7ea6\u675f\u7684\u7ec4\u5408\u3002\u8981\u4f7f\u7528\u4e3b\u952e\u7ea6\u675f\uff0c\u8868\u5fc5\u987b\u4f7f\u7528Hash\u5206\u5e03\u7b56\u7565\uff0c\u5e76\u4e14\u7ea6\u675f\u5217\u5fc5\u987b\u548c\u8868\u7684\u5206\u5e03\u952e\u5bf9\u5e94\u7684\u5217\u4e00\u81f4\uff08\u6216\u8005\u662f\u8d85\u96c6\uff09\u3002\u5982\u679c\u4e00\u5f20\u8868\u6307\u5b9a\u4e3b\u952e\u7ea6\u675f\uff0c\u5206\u5e03\u952e\u503c\u9ed8\u8ba4\u4f1a\u4f7f\u7528\u4e3b\u952e\u7ea6\u675f\u6307\u5b9a\u7684\u5217\u3002\u4f8b\u5982\uff1a  =  CREATE TABLE products \n           ( product_no integer PRIMARY KEY, \n             name text, \n             price numeric)\n          DISTRIBUTED BY (product_no);", 
            "title": "\u4e3b\u952e\u7ea6\u675f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_23", 
            "text": "product-name  \u4e0d\u652f\u6301\u5916\u952e\u7ea6\u675f\uff0c\u4f46\u662f\u5141\u8bb8\u60a8\u58f0\u660e\u5916\u952e\u7ea6\u675f\u3002\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u884c\u53c2\u7167\u5b8c\u6574\u6027\u68c0\u67e5\u3002  \u5916\u952e\u7ea6\u675f\u6307\u5b9a\u4e00\u5217\u6216\u591a\u5217\u5fc5\u987b\u4e0e\u53e6\u4e00\u5f20\u8868\u4e2d\u503c\u76f8\u5339\u914d\uff0c\u6ee1\u8db3\u4e24\u5f20\u8868\u4e4b\u95f4\u7684\u53c2\u7167\u5b8c\u6574\u6027\u3002 product-name \u4e0d\u652f\u6301\u6570\u636e\u5206\u5e03\u5230\u591a\u4e2a\u8282\u70b9\u7684\u53c2\u7167\u5b8c\u6574\u6027\u68c0\u67e5\u3002", 
            "title": "\u5916\u952e\u7ea6\u675f"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_24", 
            "text": "\u6240\u6709  product-name  \u6570\u636e\u8868\u90fd\u662f\u5206\u5e03\u5728\u591a\u4e2a\u8282\u70b9\u7684\u3002\u5f53\u60a8\u521b\u5efa\u6216\u4fee\u6539\u8868\u65f6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 DISTRIBUTED BY\uff08\u57fa\u4e8e\u54c8\u5e0c\u5206\u5e03\uff09\u6216\u8005 DISTRIBUTED RANDOMLY(\u968f\u673a\u5206\u5e03)\u6765\u4e3a\u8868\u6307\u5b9a\u6570\u636e\u5206\u5e03\u89c4\u5219\u3002  \u6ce8\u610f\uff1aThe Greenplum Database server configuration parameter gp_create_table_random_default_distribution controls the table distribution policy if the DISTRIBUTED BY clause is not specified when you create a table.\nFor information about the parameter, see \"Server Configuration Parameters\" of the Greenplum Database Reference Guide.  \u5f53\u60a8\u5728\u8003\u8651\u8868\u7684\u6570\u636e\u5206\u5e03\u7b56\u7565\u65f6\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u7684\u95ee\u9898\u6765\u5e2e\u52a9\u51b3\u7b56\uff1a   \u5747\u5300\u7684\u5206\u5e03\u6570\u636e \u2014 \u4e3a\u4e86\u5c3d\u53ef\u80fd\u83b7\u5f97\u6700\u4f73\u6027\u80fd\uff0c\u6bcf\u4e2a\u8282\u70b9\u5e94\u8be5\u5c3d\u53ef\u80fd\u83b7\u5f97\u5747\u5300\u7684\u6570\u636e\u3002\u5982\u679c\u6570\u636e\u5448\u73b0\u51fa\u6781\u5ea6\u4e0d\u5747\u5300\uff0c\u90a3\u4e48\u6570\u636e\u91cf\u8f83\u5927\u7684\u8282\u70b9\u5c31\u9700\u8981\u66f4\u591a\u8d44\u6e90\u751a\u81f3\u662f\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\u76f8\u5e94\u7684\u5de5\u4f5c\u3002\u9009\u62e9\u6570\u636e\u5206\u5e03\u952e\u503c\u65f6\u5c3d\u91cf\u4fdd\u8bc1\u952e\u503c\u552f\u4e00\uff0c\u4f8b\u5982\u4f7f\u7528\u4e3b\u952e\u7ea6\u675f\u3002  \u5c40\u90e8\u548c\u5206\u5e03\u5f0f\u8fd0\u7b97 \u2014 \u5c40\u90e8\u8fd0\u7b97\u8fdc\u8fdc\u5feb\u4e8e\u5206\u5e03\u662f\u8fd0\u7b97\u3002\u5982\u679c\u8fde\u63a5\uff0c\u6392\u5e8f\u6216\u805a\u5408\u8fd0\u7b97\u80fd\u591f\u5728\u5c40\u90e8\u8fdb\u884c\uff08\u8ba1\u7b97\u548c\u6570\u636e\u5728\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\uff09\uff0c\u90a3\u4e48\u67e5\u8be2\u7684\u6574\u4f53\u901f\u5ea6\u5c31\u4f1a\u66f4\u5feb\u3002\u5982\u679c\u67d0\u4e9b\u8ba1\u7b97\u9700\u8981\u5728\u6574\u4e2a\u7cfb\u7edf\u6765\u5b8c\u6210\uff0c\u90a3\u4e48\u6570\u636e\u9700\u8981\u8fdb\u884c\u4ea4\u6362\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u5c31\u4f1a\u964d\u4f4e\u6548\u7387\u3002\u5982\u679c\u53c2\u4e0e\u8fde\u63a5\u6d3b\u7740\u6392\u5e8f\u7684\u64cd\u8868\u90fd\u5305\u542b\u76f8\u540c\u7684\u6570\u636e\u5206\u5e03\u952e\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5728\u5c40\u90e8\u8fdb\u884c\u3002\u5982\u679c\u6570\u636e\u91c7\u7528\u968f\u673a\u5206\u5e03\u7b56\u7565\uff0c\u7cfb\u7edf\u5c31\u65e0\u6cd5\u5728\u5c40\u90e8\u5b8c\u6210\u50cf\u8fde\u63a5\u8fd9\u6837\u7684\u64cd\u4f5c\u3002  \u5747\u5300\u7684\u5904\u7406\u8bf7\u6c42 \u2014 \u4e3a\u4e86\u6700\u4f18\u7684\u6027\u80fd\uff0c\u6bcf\u4e2a\u8282\u70b9\u5e94\u8be5\u5904\u7406\u5747\u5300\u7684\u67e5\u8be2\u5de5\u4f5c\u3002\u5982\u679c\u8868\u7684\u6570\u636e\u5206\u5e03\u7b56\u7565\u548c\u67e5\u8be2\u4f7f\u7528\u6570\u636e\u4e0d\u5339\u914d\uff0c\u67e5\u8be2\u7684\u8d1f\u8f7d\u5c31\u4f1a\u4ea7\u751f\u503e\u659c\u3002\u4f8b\u5982\uff1a\u9500\u552e\u4ea4\u6613\u8bb0\u5f55\u8868\u662f\u6309\u7167\u5ba2\u6237ID\u8fdb\u884c\u5206\u5e03\u7684\uff0c\u90a3\u4e48\u4e00\u4e2a\u67e5\u8be2\u7279\u5b9a\u5ba2\u6237ID\u7684\u67e5\u8be2\u5c31\u53ea\u4f1a\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u8282\u70b9\u8fdb\u884c\u8ba1\u7b97\u3002", 
            "title": "\u9009\u62e9\u8868\u7684\u6570\u636e\u5206\u5e03\u5217"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_25", 
            "text": "CREATE TABLE \u7684\u53ef\u9009\u5b50\u53e5 DISTRIBUTED BY \u548c DISTRIBUTED RANDOMLY \u53ef\u4ee5\u4e3a\u8868\u6307\u5b9a\u6570\u636e\u5206\u5e03\u7b56\u7565\u3002\u8868\u7684\u9ed8\u8ba4\u5206\u5e03\u7b56\u7565\u662f\u4f7f\u7528\u4e3b\u952e\u7ea6\u675f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u6216\u8005\u4f7f\u7528\u8868\u7684\u7b2c\u4e00\u5217\u3002\u5730\u7406\u4fe1\u606f\u7c7b\u578b\u6216\u8005\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u662f\u4e0d\u80fd\u88ab\u7528\u6765\u4f5c\u4e3a\u8868\u7684\u6570\u636e\u5206\u5e03\u5217\u7684\u3002\u5982\u679c\u4e00\u5f20\u8868\u6ca1\u6709\u4efb\u4f55\u5408\u6cd5\u7684\u6570\u636e\u5206\u5e03\u5217\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u4f7f\u7528\u968f\u673a\u6570\u636e\u5206\u5e03\u7b56\u7565\u3002  \u4e3a\u4e86\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u6570\u636e\u7684\u5747\u5300\u5206\u5e03\uff0c\u5c3d\u91cf\u9009\u62e9\u80fd\u591f\u4f7f\u6570\u636e\u552f\u4e00\u7684\u5206\u5e03\u503c\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u503c\u80fd\u591f\u6ee1\u8db3\uff0c\u53ef\u4ee5\u4f7f\u7528\u968f\u673a\u5206\u5e03\u7b56\u7565\uff1a  =  CREATE TABLE products\n                        (name varchar(40),\n                         prod_id integer,\n                         supplier_id integer)\n             DISTRIBUTED BY (prod_id);\n\n=  CREATE TABLE random_stuff\n                        (things text,\n                         doodads text,\n                         etc text)\n             DISTRIBUTED RANDOMLY;", 
            "title": "\u58f0\u660e\u6570\u636e\u5206\u5e03"
        }, 
        {
            "location": "/management/management-defining-database-objects/#partitioning-large-tables", 
            "text": "Table partitioning enables supporting very large tables, such as fact tables, by logically dividing them into smaller, more manageable pieces. Partitioned tables can improve query performance by allowing the Greenplum Database query optimizer to scan only the data needed to satisfy a given query instead of scanning all the contents of a large table.   About Table Partitioning  Deciding on a Table Partitioning Strategy  Creating Partitioned Tables  Loading Partitioned Tables  Verifying Your Partition Strategy  Viewing Your Partition Design  Maintaining Partitioned Tables  Parent topic: Defining Database Objects", 
            "title": "Partitioning Large Tables"
        }, 
        {
            "location": "/management/management-defining-database-objects/#about-table-partitioning", 
            "text": "Partitioning does not change the physical distribution of table data across the segments. Table distribution is physical: Greenplum Database physically divides partitioned tables and non-partitioned tables across segments to enable parallel query processing. Table partitioning is logical: Greenplum Database logically divides big tables to improve query performance and facilitate data warehouse maintenance tasks, such as rolling old data out of the data warehouse.  Greenplum Database supports:  range partitioning: division of data based on a numerical range, such as date or price.  list partitioning: division of data based on a list of values, such as sales territory or product line.\n* A combination of both types.  TODO: Figure 1. Example Multi-level Partition Design", 
            "title": "About Table Partitioning"
        }, 
        {
            "location": "/management/management-defining-database-objects/#table-partitioning-in-greenplum-database", 
            "text": "Greenplum Database divides tables into parts (also known as partitions) to enable massively parallel processing. Tables are partitioned during CREATE TABLE using the PARTITION BY (and optionally the SUBPARTITION BY) clause. Partitioning creates a top-level (or parent) table with one or more levels of sub-tables (or child tables). Internally, Greenplum Database creates an inheritance relationship between the top-level table and its underlying partitions, similar to the functionality of the INHERITS clause of PostgreSQL.  Greenplum uses the partition criteria defined during table creation to create each partition with a distinct CHECK constraint, which limits the data that table can contain. The query optimizer uses CHECK constraints to determine which table partitions to scan to satisfy a given query predicate.  The Greenplum system catalog stores partition hierarchy information so that rows inserted into the top-level parent table propagate correctly to the child table partitions. To change the partition design or table structure, alter the parent table using ALTER TABLE with the PARTITION clause.  To insert data into a partitioned table, you specify the root partitioned table, the table created with the CREATE TABLE command. You also can specify a leaf child table of the partitioned table in an INSERT command. An error is returned if the data is not valid for the specified leaf child table. Specifying a child table that is not a leaf child table in the INSERT command is not supported. Execution of other DML commands such as UPDATE and DELETE on any child table of a partitioned table is not supported. These commands must be executed on the root partitioned table, the table created with the CREATE TABLE command.", 
            "title": "Table Partitioning in Greenplum Database"
        }, 
        {
            "location": "/management/management-defining-database-objects/#deciding-on-a-table-partitioning-strategy", 
            "text": "Not all tables are good candidates for partitioning. If the answer is yes to all or most of the following questions, table partitioning is a viable database design strategy for improving query performance. If the answer is no to most of the following questions, table partitioning is not the right solution for that table. Test your design strategy to ensure that query performance improves as expected.   Is the table large enough? Large fact tables are good candidates for table partitioning. If you have millions or billions of records in a table, you may see performance benefits from logically breaking that data up into smaller chunks. For smaller tables with only a few thousand rows or less, the administrative overhead of maintaining the partitions will outweigh any performance benefits you might see.  Are you experiencing unsatisfactory performance? As with any performance tuning initiative, a table should be partitioned only if queries against that table are producing slower response times than desired.  Do your query predicates have identifiable access patterns? Examine the WHERE clauses of your query workload and look for table columns that are consistently used to access data. For example, if most of your queries tend to look up records by date, then a monthly or weekly date-partitioning design might be beneficial. Or if you tend to access records by region, consider a list-partitioning design to divide the table by region.  Does your data warehouse maintain a window of historical data? Another consideration for partition design is your organization's business requirements for maintaining historical data. For example, your data warehouse may require that you keep data for the past twelve months. If the data is partitioned by month, you can easily drop the oldest monthly partition from the warehouse and load current data into the most recent monthly partition.  Can the data be divided into somewhat equal parts based on some defining criteria? Choose partitioning criteria that will divide your data as evenly as possible. If the partitions contain a relatively equal number of records, query performance improves based on the number of partitions created. For example, by dividing a large table into 10 partitions, a query will execute 10 times faster than it would against the unpartitioned table, provided that the partitions are designed to support the query's criteria.   Do not create more partitions than are needed. Creating too many partitions can slow down management and maintenance jobs, such as vacuuming, recovering segments, expanding the cluster, checking disk usage, and others.  Partitioning does not improve query performance unless the query optimizer can eliminate partitions based on the query predicates. Queries that scan every partition run slower than if the table were not partitioned, so avoid partitioning if few of your queries achieve partition elimination. Check the explain plan for queries to make sure that partitions are eliminated. See Query Profiling for more about partition elimination.  Be very careful with multi-level partitioning because the number of partition files can grow very quickly. For example, if a table is partitioned by both day and city, and there are 1,000 days of data and 1,000 cities, the total number of partitions is one million. Column-oriented tables store each column in a physical table, so if this table has 100 columns, the system would be required to manage 100 million files for the table.  Before settling on a multi-level partitioning strategy, consider a single level partition with bitmap indexes. Indexes slow down data loads, so performance testing with your data and schema is recommended to decide on the best strategy.", 
            "title": "Deciding on a Table Partitioning Strategy"
        }, 
        {
            "location": "/management/management-defining-database-objects/#creating-partitioned-tables", 
            "text": "You partition tables when you create them with CREATE TABLE. This topic provides examples of SQL syntax for creating a table with various partition designs.  To partition a table:   Decide on the partition design: date range, numeric range, or list of values.  Choose the column(s) on which to partition the table.   Decide how many levels of partitions you want. For example, you can create a date range partition table by month and then subpartition the monthly partitions by sales region.    Defining Date Range Table Partitions   Defining Numeric Range Table Partitions  Defining List Table Partitions  Defining Multi-level Partitions  Partitioning an Existing Table", 
            "title": "Creating Partitioned Tables"
        }, 
        {
            "location": "/management/management-defining-database-objects/#defining-date-range-table-partitions", 
            "text": "A date range partitioned table uses a single date or timestamp column as the partition key column. You can use the same partition key column to create subpartitions if necessary, for example, to partition by month and then subpartition by day. Consider partitioning by the most granular level. For example, for a table partitioned by date, you can partition by day and have 365 daily partitions, rather than partition by year then subpartition by month then subpartition by day. A multi-level design can reduce query planning time, but a flat partition design runs faster.  You can have Greenplum Database automatically generate partitions by giving a START value, an END value, and an EVERY clause that defines the partition increment value. By default, START values are always inclusive and END values are always exclusive. For example:  CREATE TABLE sales (id int, date date, amt decimal(10,2))\nDISTRIBUTED BY (id)\nPARTITION BY RANGE (date)\n( START (date '2008-01-01') INCLUSIVE\n   END (date '2009-01-01') EXCLUSIVE\n   EVERY (INTERVAL '1 day') );  You can also declare and name each partition individually. For example:  CREATE TABLE sales (id int, date date, amt decimal(10,2))\nDISTRIBUTED BY (id)\nPARTITION BY RANGE (date)\n( PARTITION Jan08 START (date '2008-01-01') INCLUSIVE , \n  PARTITION Feb08 START (date '2008-02-01') INCLUSIVE ,\n  PARTITION Mar08 START (date '2008-03-01') INCLUSIVE ,\n  PARTITION Apr08 START (date '2008-04-01') INCLUSIVE ,\n  PARTITION May08 START (date '2008-05-01') INCLUSIVE ,\n  PARTITION Jun08 START (date '2008-06-01') INCLUSIVE ,\n  PARTITION Jul08 START (date '2008-07-01') INCLUSIVE ,\n  PARTITION Aug08 START (date '2008-08-01') INCLUSIVE ,\n  PARTITION Sep08 START (date '2008-09-01') INCLUSIVE ,\n  PARTITION Oct08 START (date '2008-10-01') INCLUSIVE ,\n  PARTITION Nov08 START (date '2008-11-01') INCLUSIVE ,\n  PARTITION Dec08 START (date '2008-12-01') INCLUSIVE \n                  END (date '2009-01-01') EXCLUSIVE );  You do not have to declare an END value for each partition, only the last one. In this example, Jan08 ends where Feb08 starts.", 
            "title": "Defining Date Range Table Partitions"
        }, 
        {
            "location": "/management/management-defining-database-objects/#defining-numeric-range-table-partitions", 
            "text": "A numeric range partitioned table uses a single numeric data type column as the partition key column. For example:  CREATE TABLE rank (id int, rank int, year int, gender \nchar(1), count int)\nDISTRIBUTED BY (id)\nPARTITION BY RANGE (year)\n( START (2001) END (2008) EVERY (1), \n  DEFAULT PARTITION extra );  For more information about default partitions, see Adding a Default Partition.", 
            "title": "Defining Numeric Range Table Partitions"
        }, 
        {
            "location": "/management/management-defining-database-objects/#defining-list-table-partitions", 
            "text": "A list partitioned table can use any data type column that allows equality comparisons as its partition key column. A list partition can also have a multi-column (composite) partition key, whereas a range partition only allows a single column as the partition key. For list partitions, you must declare a partition specification for every partition (list value) you want to create. For example:  CREATE TABLE rank (id int, rank int, year int, gender \nchar(1), count int ) \nDISTRIBUTED BY (id)\nPARTITION BY LIST (gender)\n( PARTITION girls VALUES ('F'), \n  PARTITION boys VALUES ('M'), \n  DEFAULT PARTITION other );  Note: The current Greenplum Database legacy optimizer allows list partitions with multi-column (composite) partition keys. A range partition only allows a single column as the partition key. The Pivotal Query Optimizer, that will available in a future release, does not support composite keys, so Pivotal does not recommend using composite partition keys.\nFor more information about default partitions, see Adding a Default Partition.", 
            "title": "Defining List Table Partitions"
        }, 
        {
            "location": "/management/management-defining-database-objects/#defining-multi-level-partitions", 
            "text": "You can create a multi-level partition design with subpartitions of partitions. Using a subpartition template ensures that every partition has the same subpartition design, including partitions that you add later. For example, the following SQL creates the two-level partition design shown in Figure 1:  CREATE TABLE sales (trans_id int, date date, amount \ndecimal(9,2), region text) \nDISTRIBUTED BY (trans_id)\nPARTITION BY RANGE (date)\nSUBPARTITION BY LIST (region)\nSUBPARTITION TEMPLATE\n( SUBPARTITION usa VALUES ('usa'), \n  SUBPARTITION asia VALUES ('asia'), \n  SUBPARTITION europe VALUES ('europe'), \n  DEFAULT SUBPARTITION other_regions)\n  (START (date '2011-01-01') INCLUSIVE\n   END (date '2012-01-01') EXCLUSIVE\n   EVERY (INTERVAL '1 month'), \n   DEFAULT PARTITION outlying_dates );  The following example shows a three-level partition design where the sales table is partitioned by year, then month, then region. The SUBPARTITION TEMPLATE clauses ensure that each yearly partition has the same subpartition structure. The example declares a DEFAULT partition at each level of the hierarchy.  CREATE TABLE p3_sales (id int, year int, month int, day int, \nregion text)\nDISTRIBUTED BY (id)\nPARTITION BY RANGE (year)\n    SUBPARTITION BY RANGE (month)\n       SUBPARTITION TEMPLATE (\n        START (1) END (13) EVERY (1), \n        DEFAULT SUBPARTITION other_months )\n           SUBPARTITION BY LIST (region)\n             SUBPARTITION TEMPLATE (\n               SUBPARTITION usa VALUES ('usa'),\n               SUBPARTITION europe VALUES ('europe'),\n               SUBPARTITION asia VALUES ('asia'),\n               DEFAULT SUBPARTITION other_regions )\n( START (2002) END (2012) EVERY (1), \n  DEFAULT PARTITION outlying_years );  CAUTION:\nWhen you create multi-level partitions on ranges, it is easy to create a large number of subpartitions, some containing little or no data. This can add many entries to the system tables, which increases the time and memory required to optimize and execute queries. Increase the range interval or choose a different partitioning strategy to reduce the number of subpartitions created.", 
            "title": "Defining Multi-level Partitions"
        }, 
        {
            "location": "/management/management-defining-database-objects/#partitioning-an-existing-table", 
            "text": "Tables can be partitioned only at creation. If you have a table that you want to partition, you must create a partitioned table, load the data from the original table into the new table, drop the original table, and rename the partitioned table with the original table's name. You must also re-grant any table permissions. For example:  CREATE TABLE sales2 (LIKE sales) \nPARTITION BY RANGE (date)\n( START (date '2008-01-01') INCLUSIVE\n   END (date '2009-01-01') EXCLUSIVE\n   EVERY (INTERVAL '1 month') );\nINSERT INTO sales2 SELECT * FROM sales;\nDROP TABLE sales;\nALTER TABLE sales2 RENAME TO sales;\nGRANT ALL PRIVILEGES ON sales TO admin;\nGRANT SELECT ON sales TO guest;", 
            "title": "Partitioning an Existing Table"
        }, 
        {
            "location": "/management/management-defining-database-objects/#limitations-of-partitioned-tables", 
            "text": "For each partition level, a partitioned table can have a maximum of 32,767 partitions.  A primary key or unique constraint on a partitioned table must contain all the partitioning columns. A unique index can omit the partitioning columns; however, it is enforced only on the parts of the partitioned table, not on the partitioned table as a whole.  The Pivotal Query Optimizer supports uniform multi-level partitioned tables. If Pivotal Query Optimizer is enabled and the multi-level partitioned table is not uniform, Greenplum Database executes queries against the table with the legacy query optimizer. For information about uniform multi-level partitioned tables, see About Uniform Multi-level Partitioned Tables.  Exchanging a leaf child partition with an external table is not supported if the partitioned table is created with the SUBPARITION clause or if a partition has a subpartition. For information about exchanging a leaf child partition with an external table, see Exchanging a Leaf Child Partition with an External Table.  These are limitations for partitioned tables when a leaf child partition of the table is an external table:   Queries that run against partitioned tables that contain external table partitions are executed with the legacy query optimizer.   The external table partition is a read only external table. Commands that attempt to access or modify data in the external table partition return an error. For example:   INSERT, DELETE, and UPDATE commands that attempt to change data in the external table partition return an error.  TRUNCATE commands return an error.  COPY commands cannot copy data to a partitioned table that updates an external table partition.   COPY commands that attempt to copy from an external table partition return an error unless you specify the IGNORE EXTERNAL PARTITIONS clause with COPY command. If you specify the clause, data is not copied from external table partitions.\nTo use the COPY command against a partitioned table with a leaf child table that is an external table, use an SQL query to copy the data. For example, if the table my_sales contains a with a leaf child table that is an external table, this command sends the data to stdout:  COPY (SELECT * from my_sales ) TO stdout    VACUUM commands skip external table partitions.      The following operations are supported if no data is changed on the external table partition. Otherwise, an error is returned.   Adding or dropping a column.  Changing the data type of column.     These ALTER PARTITION operations are not supported if the partitioned table contains an external table partition:   Setting a subpartition template.  Altering the partition properties.  Creating a default partition.  Setting a distribution policy.  Setting or dropping a NOT NULL constraint of column.  Adding or dropping constraints.  Splitting an external partition.     The Greenplum Database utility gpcrondump does not back up data from a leaf child partition of a partitioned table if the leaf child partition is a readable external table.", 
            "title": "Limitations of Partitioned Tables"
        }, 
        {
            "location": "/management/management-defining-database-objects/#loading-partitioned-tables", 
            "text": "After you create the partitioned table structure, top-level parent tables are empty. Data is routed to the bottom-level child table partitions. In a multi-level partition design, only the subpartitions at the bottom of the hierarchy can contain data.  Rows that cannot be mapped to a child table partition are rejected and the load fails. To avoid unmapped rows being rejected at load time, define your partition hierarchy with a DEFAULT partition. Any rows that do not match a partition's CHECK constraints load into the DEFAULT partition. See Adding a Default Partition.  At runtime, the query optimizer scans the entire table inheritance hierarchy and uses the CHECK table constraints to determine which of the child table partitions to scan to satisfy the query's conditions. The DEFAULT partition (if your hierarchy has one) is always scanned. DEFAULT partitions that contain data slow down the overall scan time.  When you use COPY or INSERT to load data into a parent table, the data is automatically rerouted to the correct partition, just like a regular table.  Best practice for loading data into partitioned tables is to create an intermediate staging table, load it, and then exchange it into your partition design. See Exchanging a Partition.", 
            "title": "Loading Partitioned Tables"
        }, 
        {
            "location": "/management/management-defining-database-objects/#verifying-your-partition-strategy", 
            "text": "When a table is partitioned based on the query predicate, you can use EXPLAIN to verify that the query optimizer scans only the relevant data to examine the query plan.  For example, suppose a sales table is date-range partitioned by month and subpartitioned by region as shown in Figure 1. For the following query:  EXPLAIN SELECT * FROM sales WHERE date='01-07-12' AND region='usa';  The query plan for this query should show a table scan of only the following tables:   the default partition returning 0-1 rows (if your partition design has one)  the January 2012 partition (sales_1_prt_1) returning 0-1 rows  the USA region subpartition (sales_1_2_prt_usa) returning some number of rows.   The following example shows the relevant portion of the query plan.  -   Seq Scan onsales_1_prt_1 sales (cost=0.00..0.00 rows=0 width=0)\n        Filter: \"date\"=01-07-08::date AND region='USA'::text\n-   Seq Scan onsales_1_2_prt_usa sales (cost=0.00..9.87 rows=20 width=40)  Ensure that the query optimizer does not scan unnecessary partitions or subpartitions (for example, scans of months or regions not specified in the query predicate), and that scans of the top-level tables return 0-1 rows.", 
            "title": "Verifying Your Partition Strategy"
        }, 
        {
            "location": "/management/management-defining-database-objects/#troubleshooting-selective-partition-scanning", 
            "text": "The following limitations can result in a query plan that shows a non-selective scan of your partition hierarchy.   The query optimizer can selectively scan partitioned tables only when the query contains a direct and simple restriction of the table using immutable operators such as:\n=,   ,  = ,  ,   = , and   Selective scanning recognizes STABLE and IMMUTABLE functions, but does not recognize VOLATILE functions within a query. For example, WHERE clauses such as date   CURRENT_DATE cause the query optimizer to selectively scan partitioned tables, but time   TIMEOFDAY does not.", 
            "title": "Troubleshooting Selective Partition Scanning"
        }, 
        {
            "location": "/management/management-defining-database-objects/#viewing-your-partition-design", 
            "text": "You can look up information about your partition design using the pg_partitions view. For example, to see the partition design of the sales table:  SELECT partitionboundary, partitiontablename, partitionname, \npartitionlevel, partitionrank \nFROM pg_partitions \nWHERE tablename='sales';  The following table and views show information about partitioned tables.   pg_partition - Tracks partitioned tables and their inheritance level relationships.  pg_partition_templates - Shows the subpartitions created using a subpartition template.  pg_partition_columns - Shows the partition key columns used in a partition design.\nFor information about Greenplum Database system catalog tables and views, see the Greenplum Database Reference Guide.", 
            "title": "Viewing Your Partition Design"
        }, 
        {
            "location": "/management/management-defining-database-objects/#maintaining-partitioned-tables", 
            "text": "To maintain a partitioned table, use the ALTER TABLE command against the top-level parent table. The most common scenario is to drop old partitions and add new ones to maintain a rolling window of data in a range partition design. You can convert (exchange) older partitions to the append-optimized compressed storage format to save space. If you have a default partition in your partition design, you add a partition by splitting the default partition.   Adding a Partition  Renaming a Partition  Adding a Default Partition  Dropping a Partition  Truncating a Partition  Exchanging a Partition  Splitting a Partition  Modifying a Subpartition Template  Exchanging a Leaf Child Partition with an External Table   Important: When defining and altering partition designs, use the given partition name, not the table object name. Although you can query and load any table (including partitioned tables) directly using SQL commands, you can only modify the structure of a partitioned table using the ALTER TABLE...PARTITION clauses.\nPartitions are not required to have names. If a partition does not have a name, use one of the following expressions to specify a part: PARTITION FOR (value) or )PARTITION FOR(RANK(number).", 
            "title": "Maintaining Partitioned Tables"
        }, 
        {
            "location": "/management/management-defining-database-objects/#adding-a-partition", 
            "text": "You can add a partition to a partition design with the ALTER TABLE command. If the original partition design included subpartitions defined by a subpartition template, the newly added partition is subpartitioned according to that template. For example:  ALTER TABLE sales ADD PARTITION \n            START (date '2009-02-01') INCLUSIVE \n            END (date '2009-03-01') EXCLUSIVE;  If you did not use a subpartition template when you created the table, you define subpartitions when adding a partition:  ALTER TABLE sales ADD PARTITION \n            START (date '2009-02-01') INCLUSIVE \n            END (date '2009-03-01') EXCLUSIVE\n      ( SUBPARTITION usa VALUES ('usa'), \n        SUBPARTITION asia VALUES ('asia'), \n        SUBPARTITION europe VALUES ('europe') );  When you add a subpartition to an existing partition, you can specify the partition to alter. For example:  ALTER TABLE sales ALTER PARTITION FOR (RANK(12))\n      ADD PARTITION africa VALUES ('africa');  Note: You cannot add a partition to a partition design that has a default partition. You must split the default partition to add a partition. See Splitting a Partition.", 
            "title": "Adding a Partition"
        }, 
        {
            "location": "/management/management-defining-database-objects/#renaming-a-partition", 
            "text": "Partitioned tables use the following naming convention. Partitioned subtable names are subject to uniqueness requirements and length limitations.  parentname _ level _prt_ partition_name   For example:  sales_1_prt_jan08  For auto-generated range partitions, where a number is assigned when no name is given):  sales_1_prt_1  To rename a partitioned child table, rename the top-level parent table. The   changes in the table names of all associated child table partitions. For example, the following command:  ALTER TABLE sales RENAME TO globalsales;  Changes the associated table names:  globalsales_1_prt_1  You can change the name of a partition to make it easier to identify. For example:  ALTER TABLE sales RENAME PARTITION FOR ('2008-01-01') TO jan08;  Changes the associated table name as follows:  sales_1_prt_jan08  When altering partitioned tables with the ALTER TABLE command, always refer to the tables by their partition name (jan08) and not their full table name (sales_1_prt_jan08).  Note: The table name cannot be a partition name in an ALTER TABLE statement. For example, ALTER TABLE sales... is correct, ALTER TABLE sales_1_part_jan08... is not allowed.", 
            "title": "Renaming a Partition"
        }, 
        {
            "location": "/management/management-defining-database-objects/#adding-a-default-partition", 
            "text": "You can add a default partition to a partition design with the ALTER TABLE command.  ALTER TABLE sales ADD DEFAULT PARTITION other;  If your partition design is multi-level, each level in the hierarchy must have a default partition. For example:  ALTER TABLE sales ALTER PARTITION FOR (RANK(1)) ADD DEFAULT PARTITION other;\n\nALTER TABLE sales ALTER PARTITION FOR (RANK(2)) ADD DEFAULT PARTITION other;\n\nALTER TABLE sales ALTER PARTITION FOR (RANK(3)) ADD DEFAULT PARTITION other;  If incoming data does not match a partition's CHECK constraint and there is no default partition, the data is rejected. Default partitions ensure that incoming data that does not match a partition is inserted into the default partition.", 
            "title": "Adding a Default Partition"
        }, 
        {
            "location": "/management/management-defining-database-objects/#dropping-a-partition", 
            "text": "You can drop a partition from your partition design using the ALTER TABLE command. When you drop a partition that has subpartitions, the subpartitions (and all data in them) are automatically dropped as well. For range partitions, it is common to drop the older partitions from the range as old data is rolled out of the data warehouse. For example:  ALTER TABLE sales DROP PARTITION FOR (RANK(1));", 
            "title": "Dropping a Partition"
        }, 
        {
            "location": "/management/management-defining-database-objects/#truncating-a-partition", 
            "text": "You can truncate a partition using the ALTER TABLE command. When you truncate a partition that has subpartitions, the subpartitions are automatically truncated as well.  ALTER TABLE sales TRUNCATE PARTITION FOR (RANK(1));", 
            "title": "Truncating a Partition"
        }, 
        {
            "location": "/management/management-defining-database-objects/#exchanging-a-partition", 
            "text": "You can exchange a partition using the ALTER TABLE command. Exchanging a partition swaps one table in place of an existing partition. You can exchange partitions only at the lowest level of your partition hierarchy (only partitions that contain data can be exchanged).  Partition exchange can be useful for data loading. For example, load a staging table and swap the loaded table into your partition design. You can use partition exchange to change the storage type of older partitions to append-optimized tables. For example:  CREATE TABLE jan12 (LIKE sales) WITH (appendonly=true);\nINSERT INTO jan12 SELECT * FROM sales_1_prt_1 ;\nALTER TABLE sales EXCHANGE PARTITION FOR (DATE '2012-01-01') \nWITH TABLE jan12;  Note: This example refers to the single-level definition of the table sales, before partitions were added and altered in the previous examples.\nWarning: If you specify the WITHOUT VALIDATION clause, you must ensure that the data in table that you are exchanging for an existing partition is valid against the constraints on the partition. Otherwise, queries against the partitioned table might return incorrect results.\nThe Greenplum Database server configuration parameter gp_enable_exchange_default_partition controls availability of the EXCHANGE DEFAULT PARTITION clause. The default value for the parameter is off, the clause is not available and Greenplum Database returns an error if the clause is specified in an ALTER TABLE command.  For information about the parameter, see \"Server Configuration Parameters\" in the Greenplum Database Reference Guide.\nWarning: Before you exchange the default partition, you must ensure the data in the table to be exchanged, the new default partition, is valid for the default partition. For example, the data in the new default partition must not contain data that would be valid in other leaf child partitions of the partitioned table. Otherwise, queries against the partitioned table with the exchanged default partition that are executed by the Pivotal Query Optimizer might return incorrect results.", 
            "title": "Exchanging a Partition"
        }, 
        {
            "location": "/management/management-defining-database-objects/#splitting-a-partition", 
            "text": "Splitting a partition divides a partition into two partitions. You can split a partition using the ALTER TABLE command. You can split partitions only at the lowest level of your partition hierarchy: only partitions that contain data can be split. The split value you specify goes into the latter partition.  For example, to split a monthly partition into two with the first partition containing dates January 1-15 and the second partition containing dates January 16-31:  ALTER TABLE sales SPLIT PARTITION FOR ('2008-01-01')\nAT ('2008-01-16')\nINTO (PARTITION jan081to15, PARTITION jan0816to31);  If your partition design has a default partition, you must split the default partition to add a partition.  When using the INTO clause, specify the current default partition as the second partition name. For example, to split a default range partition to add a new monthly partition for January 2009:  ALTER TABLE sales SPLIT DEFAULT PARTITION \nSTART ('2009-01-01') INCLUSIVE \nEND ('2009-02-01') EXCLUSIVE \nINTO (PARTITION jan09, default partition);", 
            "title": "Splitting a Partition"
        }, 
        {
            "location": "/management/management-defining-database-objects/#modifying-a-subpartition-template", 
            "text": "Use ALTER TABLE SET SUBPARTITION TEMPLATE to modify the subpartition template of a partitioned table. Partitions added after you set a new subpartition template have the new partition design. Existing partitions are not modified.  The following example alters the subpartition template of this partitioned table:\n    CREATE TABLE sales (trans_id int, date date, amount decimal(9,2), region text)\n      DISTRIBUTED BY (trans_id)\n      PARTITION BY RANGE (date)\n      SUBPARTITION BY LIST (region)\n      SUBPARTITION TEMPLATE\n        ( SUBPARTITION usa VALUES ('usa'),\n          SUBPARTITION asia VALUES ('asia'),\n          SUBPARTITION europe VALUES ('europe'),\n          DEFAULT SUBPARTITION other_regions )\n      ( START (date '2014-01-01') INCLUSIVE\n        END (date '2014-04-01') EXCLUSIVE\n        EVERY (INTERVAL '1 month') );\nThis ALTER TABLE command, modifies the subpartition template.  ALTER TABLE sales SET SUBPARTITION TEMPLATE\n( SUBPARTITION usa VALUES ('usa'), \n  SUBPARTITION asia VALUES ('asia'), \n  SUBPARTITION europe VALUES ('europe'),\n  SUBPARTITION africa VALUES ('africa'), \n  DEFAULT SUBPARTITION regions );  When you add a date-range partition of the table sales, it includes the new regional list subpartition for Africa. For example, the following command creates the subpartitions usa, asia, europe, africa, and a default partition named other:  ALTER TABLE sales ADD PARTITION \"4\"\n  START ('2014-04-01') INCLUSIVE \n  END ('2014-05-01') EXCLUSIVE ;  To view the tables created for the partitioned table sales, you can use the command \\dt sales* from the psql command line.  To remove a subpartition template, use SET SUBPARTITION TEMPLATE with empty parentheses. For example, to clear the sales table subpartition template:  ALTER TABLE sales SET SUBPARTITION TEMPLATE ();", 
            "title": "Modifying a Subpartition Template"
        }, 
        {
            "location": "/management/management-defining-database-objects/#exchanging-a-leaf-child-partition-with-an-external-table", 
            "text": "You can exchange a leaf child partition of a partitioned table with a readable external table.The external table data can reside on a host file system, an NFS mount, or a Hadoop file system (HDFS).  For example, if you have a partitioned table that is created with monthly partitions and most of the queries against the table only access the newer data, you can copy the older, less accessed data to external tables and exchange older partitions with the external tables. For queries that only access the newer data, you could create queries that use partition elimination to prevent scanning the older, unneeded partitions.  Exchanging a leaf child partition with an external table is not supported in these cases:  The partitioned table is created with the SUBPARITION clause or if a partition has a subpartition.  The partitioned table contains a column with a check constraint or a NOT NULL constraint.\nFor information about exchanging and altering a leaf child partition, see the ALTER TABLE command in the Greenplum Database Command Reference.  For information about limitations of partitioned tables that contain a external table partition, see Limitations of Partitioned Tables.", 
            "title": "Exchanging a Leaf Child Partition with an External Table"
        }, 
        {
            "location": "/management/management-defining-database-objects/#example-exchanging-a-partition-with-an-external-table", 
            "text": "This is a simple example that exchanges a leaf child partition of this partitioned table for an external table. The partitioned table contains data for the years 2000 through 2003.  CREATE TABLE sales (id int, year int, qtr int, day int, region text)\n  DISTRIBUTED BY (id) \n  PARTITION BY RANGE (year) \n  ( PARTITION yr START (2000) END (2004) EVERY (1) ) ;  There are four leaf child partitions for the partitioned table. Each leaf child partition contains the data for a single year. The leaf child partition table sales_1_prt_yr_1 contains the data for the year 2000. These steps exchange the table sales_1_prt_yr_1 with an external table the uses the gpfdist protocol:    Ensure that the external table protocol is enabled for the Greenplum Database system.\nThis example uses the gpfdist protocol. This command starts the gpfdist protocol.  $ gpfdist    Create a writable external table.\nThis CREATE WRITABLE EXTENAL TABLE command creates a writeable external table with the same columns as the partitioned table.  CREATE WRITABLE EXTERNAL TABLE my_sales_ext ( LIKE sales_1_prt_yr_1 )\n  LOCATION ( 'gpfdist://gpdb_test/sales_2000' )\n  FORMAT 'csv' \n  DISTRIBUTED BY (id) ;    Create a readable external table that reads the data from that destination of the writable external table created in the previous step.\nThis CREATE EXTENAL TABLE create a readable external that uses the same external data as the writeable external data.  CREATE EXTERNAL TABLE sales_2000_ext ( LIKE sales_1_prt_yr_1) \n  LOCATION ( 'gpfdist://gpdb_test/sales_2000' )\n  FORMAT 'csv' ;    Copy the data from the leaf child partition into the writable external table.\nThis INSERT command copies the data from the child leaf partition table of the partitioned table into the external table.  INSERT INTO my_sales_ext SELECT * FROM sales_1_prt_yr_1 ;    Exchange the existing leaf child partition with the external table.\nThis ALTER TABLE command specifies the EXCHANGE PARTITION clause to switch the readable external table and the leaf child partition.  ALTER TABLE sales ALTER PARTITION yr_1 \n   EXCHANGE PARTITION yr_1 \n   WITH TABLE sales_2000_ext WITHOUT VALIDATION;  The external table becomes the leaf child partition with the table name sales_1_prt_yr_1 and the old leaf child partition becomes the table sales_2000_ext.\nWarning: In order to ensure queries against the partitioned table return the correct results, the external table data must be valid against the CHECK constraints on the leaf child partition. In this case, the data was taken from the child leaf partition table on which the CHECK constraints were defined.    Drop the table that was rolled out of the partitioned table.  DROP TABLE sales_2000_ext ;  You can rename the name of the leaf child partition to indicate that sales_1_prt_yr_1 is an external table.    This example command changes the partitionname to yr_1_ext and the name of the child leaf partition table to sales_1_prt_yr_1_ext.  ALTER TABLE sales RENAME PARTITION yr_1 TO  yr_1_ext ;", 
            "title": "Example Exchanging a Partition with an External Table"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_26", 
            "text": "\u901a\u8fc7\u4f7f\u7528\u5e8f\u5217\uff0c\u7cfb\u7edf\u53ef\u4ee5\u5728\u65b0\u7684\u7eaa\u5f55\u63d2\u5165\u8868\u4e2d\u65f6\uff0c\u81ea\u52a8\u5730\u6309\u7167\u81ea\u589e\u65b9\u5f0f\u5206\u914d\u4e00\u4e2a\u552f\u4e00ID\u3002\u4f7f\u7528\u5e8f\u5217\u4e00\u534a\u5c31\u662f\u4e3a\u63d2\u5165\u8868\u4e2d\u7684\u7eaa\u5f55\u81ea\u52a8\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e00\u4e2a SERIAL \u7c7b\u578b\u7684\u6807\u8bc6\u7b26\u5217\uff0c\u8be5\u7c7b\u578b\u5c06\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5e8f\u5217\u6765\u5206\u914dID\u3002", 
            "title": "\u521b\u5efa\u548c\u4f7f\u7528\u5e8f\u5217"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_27", 
            "text": "CREATE SEQUENCE \u547d\u4ee4\u7528\u6765\u521b\u5efa\u548c\u521d\u59cb\u5316\u4e00\u5f20\u7279\u6b8a\u7684\u5355\u884c\u5e8f\u5217\u751f\u6210\u5668\u8868\uff0c\u8be5\u8868\u540d\u79f0\u5c31\u662f\u6307\u5b9a\u5e8f\u5217\u7684\u540d\u79f0\u3002\u5e8f\u5217\u7684\u540d\u79f0\u5728\u540c\u4e00\u4e2a\u6a21\u5f0f\u4e0b\uff0c\u4e0d\u80fd\u4e0e\u5176\u5b83\u5e8f\u5217\uff0c\u8868\uff0c\u7d22\u5f15\u6216\u8005\u89c6\u56fe\u91cd\u540d\u3002\u793a\u4f8b\uff1a  CREATE SEQUENCE myserial START 101;", 
            "title": "\u521b\u5efa\u5e8f\u5217"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_28", 
            "text": "\u5728\u4f7f\u7528 CREATE SEQUENCE \u521b\u5efa\u7cfb\u5217\u751f\u6210\u5668\u8868\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 nextval \u51fd\u6570\u6765\u4f7f\u7528\u5e8f\u5217\u3002\u4f8b\u5982\u4e0b\u9762\u4f8b\u5b50\uff0c\u5411\u8868\u4e2d\u63d2\u5165\u65b0\u6570\u636e\u65f6\uff0c\u81ea\u52a8\u83b7\u5f97\u4e0b\u4e00\u4e2a\u5e8f\u5217\u503c\uff1a  INSERT INTO vendors VALUES (nextval('myserial'), 'acme');  \u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u51fd\u6570 setval \u6765\u91cd\u7f6e\u5e8f\u5217\u7684\u503c\u3002\u793a\u4f8b\uff1a  SELECT setval('myserial', 201);  \u8bf7\u6ce8\u610f nextval \u64cd\u4f5c\u662f\u4e0d\u4f1a\u56de\u6eda\u7684\uff0c\u6570\u503c\u4e00\u65e6\u88ab\u83b7\u53d6\uff0c\u5373\u4f7f\u6700\u7ec8\u4e8b\u52a1\u56de\u6eda\uff0c\u8be5\u6570\u636e\u4e5f\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u88ab\u5206\u914d\u548c\u4f7f\u7528\u4e86\u3002\u8fd9\u610f\u5473\u7740\u5931\u8d25\u7684\u4e8b\u52a1\u4f1a\u7ed9\u5e8f\u5217\u5206\u914d\u7684\u6570\u503c\u4e2d\u7559\u4e0b\u7a7a\u6d1e\u3002\u7c7b\u4f3c\u5730\uff0csetval\u64cd\u4f5c\u4e5f\u4e0d\u652f\u6301\u56de\u6eda\u3002  \u901a\u8fc7\u4e0b\u9762\u7684\u67e5\u8be2\uff0c\u53ef\u4ee5\u68c0\u67e5\u5e8f\u5217\u7684\u5f53\u524d\u503c\uff1a  SELECT * FROM myserial;", 
            "title": "\u4f7f\u7528\u5e8f\u5217"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_29", 
            "text": "ALTER SEQUENCE \u547d\u4ee4\u53ef\u4ee5\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5e8f\u5217\u751f\u6210\u5668\u53c2\u6570\u3002\u4f8b\u5982\uff1a  ALTER SEQUENCE myserial RESTART WITH 105;", 
            "title": "\u4fee\u6539\u5e8f\u5217"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_30", 
            "text": "DROP SEQUENCE \u547d\u4ee4\u5220\u9664\u5e8f\u5217\u751f\u6210\u8868\u3002\u4f8b\u5982\uff1a  DROP SEQUENCE myserial;", 
            "title": "\u5220\u9664\u5e8f\u5217"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_31", 
            "text": "\u5728\u7edd\u5927\u90e8\u5206\u4f20\u7edf\u6570\u636e\u4e2d\uff0c\u7d22\u5f15\u90fd\u80fd\u591f\u6781\u5927\u5730\u63d0\u9ad8\u6570\u636e\u8bbf\u95ee\u901f\u901f\u3002\u7136\u800c\uff0c\u5728\u50cf  product-name  \u8fd9\u6837\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d\uff0c\u7d22\u5f15\u7684\u4f7f\u7528\u9700\u8981\u66f4\u52a0\u8c28\u614e\u3002  product-name  \u6267\u884c\u987a\u5e8f\u626b\u63cf\u7684\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u7d22\u5f15\u53ea\u7528\u6765\u968f\u673a\u8bbf\u95ee\u65f6\uff0c\u5728\u78c1\u76d8\u4e0a\u5b9a\u4f4d\u7279\u5b9a\u6570\u636e\u3002\u7531\u4e8e\u6570\u636e\u662f\u5206\u6563\u5728\u591a\u4e2a\u8282\u70b9\u4e0a\u7684\uff0c\u56e0\u6b64\u6bcf\u4e2a\u8282\u70b9\u6570\u636e\u76f8\u5bf9\u66f4\u5c11\u3002\u518d\u52a0\u4e0a\u4f7f\u7528\u5206\u533a\u8868\u529f\u80fd\uff0c\u5b9e\u9645\u7684\u987a\u5e8f\u626b\u63cf\u53ef\u80fd\u66f4\u5c0f\u3002\u56e0\u4e3a\u5546\u4e1a\u667a\u80fd(BI)\u7c7b\u5e94\u7528\u901a\u5e38\u8fd4\u56de\u8f83\u5927\u7684\u7ed3\u679c\u6570\u636e\uff0c\u56e0\u6b64\u7d22\u5f15\u5e76\u4e0d\u9ad8\u6548\u3002  \u8bf7\u5c1d\u8bd5\u5728\u6ca1\u6709\u7d22\u5f15\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c\u67e5\u8be2\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8eOLTP\u7c7b\u578b\u4e1a\u52a1\uff0c\u7d22\u5f15\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u66f4\u5927\u3002\u56e0\u4e3a\u8fd9\u7c7b\u67e5\u8be2\u4e00\u822c\u53ea\u8fd4\u56de\u4e00\u6761\u6216\u8f83\u5c11\u7684\u6570\u636e\u3002\u5bf9\u4e8e\u538b\u7f29\u7684 append \u8868\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8fd4\u56de\u4e00\u90e8\u5206\u6570\u636e\u7684\u67e5\u8be2\u6765\u8bf4\u6027\u80fd\u4e5f\u80fd\u5f97\u5230\u63d0\u9ad8\u3002\u8fd9\u662f\u56e0\u4e3a\u4f18\u5316\u5668\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u6765\u907f\u514d\u4f7f\u7528\u5168\u8868\u7684\u987a\u5e8f\u626b\u63cf\u3002\u5bf9\u4e8e\u538b\u7f29\u7684\u6570\u636e\uff0c\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u65b9\u6cd5\u65f6\uff0c\u53ea\u6709\u9700\u8981\u7684\u6570\u636e\u624d\u4f1a\u88ab\u89e3\u538b\u7f29\u3002  product-name  \u5bf9\u4e8e\u5305\u542b\u4e3b\u952e\u7684\u8868\u81ea\u52a8\u521b\u5efa\u4e3b\u952e\u7ea6\u675f\u3002\u8981\u5bf9\u5206\u533a\u8868\u521b\u5efa\u7d22\u5f15\uff0c\u53ea\u9700\u8981\u5728\u5206\u533a\u8868\u4e0a\u521b\u5efa\u6240\u4ee5\u5373\u53ef\u3002 product-name  \u80fd\u591f\u81ea\u52a8\u5728\u5206\u533a\u8868\u4e0b\u7684\u5206\u533a\u4e0a\u521b\u5efa\u5bf9\u5e94\u7d22\u5f15\u3002 product-name  \u4e0d\u652f\u6301\u5bf9\u5206\u533a\u8868\u4e0b\u7684\u5206\u533a\u521b\u5efa\u5355\u72ec\u7684\u7d22\u5f15\u3002  \u8bf7\u6ce8\u610f\uff0c\u552f\u4e00\u7ea6\u675f\u4f1a\u9690\u5f0f\u5730\u521b\u5efa\u552f\u4e00\u7d22\u5f15\uff0c\u552f\u4e00\u7d22\u5f15\u4f1a\u5305\u542b\u6240\u6709\u6570\u636e\u5206\u5e03\u952e\u548c\u5206\u533a\u952e\u3002\u552f\u4e00\u7ea6\u675f\u662f\u5bf9\u6574\u4e2a\u8868\u8303\u56f4\u4fdd\u8bc1\u552f\u4e00\u6027\u7684\uff08\u5305\u62ec\u6240\u6709\u7684\u5206\u533a\uff09\u3002  \u7d22\u5f15\u4f1a\u589e\u52a0\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u8fd0\u884c\u5f00\u9500\uff0c\u5b83\u4eec\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5e76\u4e14\u5728\u6570\u636e\u66f4\u65b0\u65f6\uff0c\u9700\u8981\u989d\u5916\u7684\u7ef4\u62a4\u5de5\u4f5c\u3002\u8bf7\u786e\u4fdd\u67e5\u8be2\u96c6\u5408\u5728\u4f7f\u7528\u60a8\u521b\u5efa\u7684\u7d22\u5f15\u540e\uff0c\u6027\u80fd\u5f97\u5230\u4e86\u6539\u5584\uff08\u548c\u5168\u8868\u987a\u5e8f\u626b\u63cf\u76f8\u6bd4\uff09\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 EXPLAIN \u547d\u4ee4\u6765\u786e\u8ba4\u7d22\u5f15\u662f\u5426\u88ab\u4f7f\u7528\u3002  \u521b\u5efa\u7d22\u5f15\u65f6\uff0c\u60a8\u9700\u8981\u6ce8\u610f\u4e0b\u9762\u7684\u95ee\u9898\u70b9\uff1a   \u60a8\u7684\u67e5\u8be2\u7279\u70b9\u3002\u7d22\u5f15\u5bf9\u4e8e\u67e5\u8be2\u53ea\u8fd4\u56de\u5355\u6761\u8bb0\u5f55\u6216\u8005\u8f83\u5c11\u7684\u6570\u636e\u96c6\u65f6\uff0c\u6027\u80fd\u63d0\u5347\u660e\u663e\u3002  \u538b\u7f29\u8868\u3002\u5bf9\u4e8e\u538b\u7f29\u7684 append \u8868\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8fd4\u56de\u4e00\u90e8\u5206\u6570\u636e\u7684\u67e5\u8be2\u6765\u8bf4\u6027\u80fd\u4e5f\u80fd\u5f97\u5230\u63d0\u9ad8\u3002\u5bf9\u4e8e\u538b\u7f29\u7684\u6570\u636e\uff0c\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u65b9\u6cd5\u65f6\uff0c\u53ea\u6709\u9700\u8981\u7684\u6570\u636e\u624d\u4f1a\u88ab\u89e3\u538b\u7f29\u3002  \u907f\u514d\u5728\u7ecf\u5e38\u6539\u53d8\u7684\u5217\u4e0a\u521b\u5efa\u7d22\u5f15\u3002\u5728\u7ecf\u5e38\u66f4\u65b0\u7684\u5217\u4e0a\u521b\u5efa\u7d22\u5f15\u4f1a\u5bfc\u81f4\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u65f6\u5199\u64cd\u4f5c\u5927\u91cf\u589e\u52a0\u3002  \u521b\u5efa\u9009\u62e9\u7387\u9ad8\u7684 B-\u6811\u7d22\u5f15\u3002\u7d22\u5f15\u9009\u62e9\u7387\u662f\u5217\u7684\u552f\u4e00\u503c\u9664\u4ee5\u8bb0\u5f55\u6570\u7684\u6bd4\u503c\u3002\u4f8b\u5982\uff0c\u4e00\u5f20\u8868\u6709 1000 \u6761\u8bb0\u5f55\uff0c\u5176\u4e2d\u6709 800 \u4e2a\u552f\u4e00\u503c\uff0c\u8fd9\u4e2a\u5217\u7d22\u5f15\u7684\u9009\u62e9\u7387\u5c31\u662f 0.8\uff0c\u8fd9\u4e2a\u6570\u503c\u5c31\u6bd4\u8f83\u597d\u3002\u552f\u4e00\u7d22\u5f15\u7684\u9009\u62e9\u7387\u603b\u662f 1.0\uff0c\u4e5f\u662f\u9009\u62e9\u7387\u6700\u597d\u7684\u3002 product-name  \u53ea\u5141\u8bb8\u521b\u5efa\u5305\u542b\u8868\u6570\u636e\u5206\u5e03\u952e\u7684\u552f\u4e00\u7d22\u5f15\u3002  \u5bf9\u4e8e\u9009\u62e9\u7387\u8f83\u4f4e\u7684\u5217\uff0c\u4f7f\u7528 Bitmap \u7d22\u5f15\u3002  \u5bf9\u53c2\u4e0e\u8fde\u63a5\u64cd\u4f5c\u7684\u5217\u521b\u5efa\u7d22\u5f15\u3002\u5bf9\u7ecf\u5e38\u7528\u4e8e\u8fde\u63a5\u7684\u5217\uff08\u4f8b\u5982\uff1a\u5916\u952e\u5217\uff09\u521b\u5efa\u7d22\u5f15\uff0c\u53ef\u4ee5\u8ba9\u67e5\u8be2\u4f18\u5316\u5668\u4f7f\u7528\u66f4\u591a\u7684\u8fde\u63a5\u7b97\u6cd5\uff0c\u8fdb\u800c\u63d0\u9ad8\u8fde\u63a5\u6548\u7387\u3002  \u5bf9\u7ecf\u5e38\u51fa\u73b0\u5728 WHERE \u6761\u4ef6\u4e2d\u7684\u5217\u521b\u5efa\u7d22\u5f15\u3002  \u907f\u514d\u521b\u5efa\u5197\u4f59\u7684\u7d22\u5f15\u3002\u5982\u679c\u7d22\u5f15\u5f00\u5934\u51e0\u5217\u91cd\u590d\u51fa\u73b0\u5728\u591a\u4e2a\u7d22\u5f15\u4e2d\uff0c\u8fd9\u4e9b\u7d22\u5f15\u5c31\u662f\u5197\u4f59\u7684\u3002  \u5728\u5927\u91cf\u6570\u636e\u52a0\u8f7d\u65f6\uff0c\u5220\u9664\u7d22\u5f15\u3002\u5982\u679c\u8981\u5411\u8868\u4e2d\u52a0\u8f7d\u5927\u91cf\u6570\u636e\uff0c\u8003\u8651\u52a0\u8f7d\u6570\u636e\u524d\u5220\u9664\u7d22\u5f15\uff0c\u52a0\u8f7d\u540e\u91cd\u65b0\u5efa\u7acb\u7d22\u5f15\u7684\u65b9\u6cd5\u3002\u8fd9\u6837\u7684\u64cd\u4f5c\u901a\u5e38\u6bd4\u5e26\u7740\u7d22\u5f15\u52a0\u8f7d\u8981\u5feb\u3002  \u8003\u8651\u805a\u7c07\u7d22\u5f15\u3002\u805a\u7c07\u7d22\u5f15\u662f\u6307\u6570\u636e\u5728\u7269\u7406\u4e0a\uff0c\u6309\u7167\u7d22\u5f15\u987a\u5e8f\u5b58\u50a8\u3002\u5982\u679c\u60a8\u8bbf\u95ee\u7684\u6570\u636e\u5728\u78c1\u76d8\u662f\u968f\u673a\u5b58\u50a8\uff0c\u90a3\u4e48\u6570\u636e\u5e93\u5c31\u9700\u8981\u78c1\u76d8\u4e0a\u4e0d\u65ad\u53d8\u66f4\u4f4d\u7f6e\u8bfb\u53d6\u60a8\u9700\u8981\u7684\u6570\u636e\u3002\u5982\u679c\u6570\u636e\u66f4\u4f73\u7d27\u5bc6\u7684\u5b58\u50a8\u8d77\u6765\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u64cd\u4f5c\u6548\u7387\u5c31\u4f1a\u66f4\u9ad8\u3002\u4f8b\u5982\uff1a\u5728\u65e5\u671f\u5217\u4e0a\u521b\u5efa\u805a\u7c07\u7d22\u5f15\uff0c\u6570\u636e\u4e5f\u662f\u6309\u7167\u65e5\u671f\u5217\u987a\u5e8f\u5b58\u50a8\u3002\u4e00\u4e2a\u67e5\u8be2\u5982\u679c\u8bfb\u53d6\u4e00\u4e2a\u65e5\u671f\u8303\u56f4\u7684\u6570\u636e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5229\u7528\u78c1\u76d8\u987a\u5e8f\u626b\u63cf\u7684\u5feb\u901f\u7279\u6027\u3002", 
            "title": "\u4f7f\u7528\u7d22\u5f15"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_32", 
            "text": "\u5bf9\u4e00\u5f20\u975e\u5e38\u7684\u8868\uff0c\u4f7f\u7528 CLUSTER \u547d\u4ee4\u6765\u6839\u636e\u7d22\u5f15\u5bf9\u8868\u7684\u7269\u7406\u5b58\u50a8\u8fdb\u884c\u91cd\u65b0\u6392\u5e8f\u53ef\u80fd\u82b1\u8d39\u975e\u5e38\u957f\u7684\u65f6\u95f4\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u624b\u5de5\u5c06\u6392\u5e8f\u7684\u8868\u6570\u636e\u5bfc\u5165\u4e00\u5f20\u4e2d\u95f4\u8868\uff0c\u6765\u52a0\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a  CREATE TABLE new_table (LIKE old_table) \n       AS SELECT * FROM old_table ORDER BY myixcolumn;\nDROP old_table;\nALTER TABLE new_table RENAME TO old_table;\nCREATE INDEX myixcolumn_ix ON old_table;\nVACUUM ANALYZE old_table;", 
            "title": "\u805a\u7c07\u7d22\u5f15"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_33", 
            "text": "product-name  \u652f\u6301 Postgres \u4e2d\u7d22\u5f15\u7c7b\u578b B\u6811 \u548c GiST. Hash \u548c GIN \u7d22\u5f15\u4e0d\u652f\u6301\u3002\u6bcf\u4e00\u79cd\u7d22\u5f15\u90fd\u4f7f\u7528\u4e0d\u540c\u7b97\u6cd5\uff0c\u56e0\u6b64\u9002\u7528\u7684\u67e5\u8be2\u4e5f\u4e0d\u540c\u3002B\u6811\u7d22\u5f15\u9002\u7528\u4e8e\u5927\u90e8\u5206\u5e38\u89c1\u60c5\u51b5\uff0c\u56e0\u6b64\u4e5f\u662f\u9ed8\u8ba4\u7c7b\u578b\u3002\u60a8\u53ef\u4ee5\u53c2\u8003 PostgreSQL \u6587\u6863\u4e2d\u5173\u4e8e\u7d22\u5f15\u7684\u76f8\u5173\u4ecb\u7ecd\u3002  \u6ce8\u610f\uff1a\u552f\u4e00\u7d22\u5f15\u4f7f\u7528\u7684\u5217\u5fc5\u987b\u548c\u8868\u7684\u5206\u5e03\u952e\u503c\u4e00\u6837\uff08\u6216\u8d85\u96c6\uff09\u3002append-optimized \u5b58\u50a8\u7c7b\u578b\u7684\u8868\u4e0d\u652f\u6301\u552f\u4e00\u7d22\u5f15\u3002\u5bf9\u4e8e\u5206\u533a\u8868\u6765\u8bf4\uff0c\u552f\u4e00\u7d22\u5f15\u4e0d\u80fd\u5bf9\u6574\u5f20\u8868\uff08\u5bf9\u6240\u6709\u5b50\u8868\uff09\u6765\u4fdd\u8bc1\u552f\u4e00\u6027\u3002\u552f\u4e00\u7d22\u5f15\u53ef\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u5206\u533a\u4fdd\u8bc1\u552f\u4e00\u6027\u3002", 
            "title": "\u7d22\u5f15\u7c7b\u578b"
        }, 
        {
            "location": "/management/management-defining-database-objects/#bitmap", 
            "text": "product-name  \u63d0\u4f9b\u4e86 Bitmap \u7d22\u5f15\u7c7b\u578b\u3002Bitmap \u7d22\u5f15\u7279\u522b\u9002\u5408\u5927\u6570\u636e\u91cf\u7684\u6570\u636e\u4ed3\u5e93\u5e94\u7528\u548c\u51b3\u7b56\u652f\u6301\u7cfb\u7edf\u8fd9\u79cd\u67e5\u8be2\uff0c\u4e34\u65f6\u6027\u67e5\u8be2\u7279\u522b\u591a\uff0c\u6570\u636e\u6539\u52a8\u5c11\u7684\u4e1a\u52a1\u3002  \u7d22\u5f15\u63d0\u4f9b\u6839\u636e\u6307\u5b9a\u952e\u503c\u6307\u5411\u8868\u4e2d\u8bb0\u5f55\u7684\u6307\u9488\u3002\u4e00\u822c\u7684\u7d22\u5f15\u5b58\u50a8\u4e86\u6bcf\u4e2a\u952e\u503c\u5bf9\u5e94\u7684\u6240\u6709\u8bb0\u5f55ID\u6620\u5c04\u5173\u7cfb\u3002\u800c Bitmap \u7d22\u5f15\u662f\u5c06\u952e\u503c\u5b58\u50a8\u4e3a\u4f4d\u56fe\u5f62\u5f0f\u3002\u4e00\u822c\u7684\u7d22\u5f15\u53ef\u80fd\u4f1a\u5360\u7528\u5b9e\u9645\u6570\u636e\u51e0\u500d\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f46\u662f Bitmap \u7d22\u5f15\u5728\u63d0\u4f9b\u76f8\u540c\u529f\u80fd\u4e0b\uff0c\u9700\u8981\u7684\u5b58\u50a8\u8fdc\u8fdc\u5c0f\u4e8e\u5b9e\u9645\u7684\u6570\u636e\u5927\u5c0f\u3002  \u4f4d\u56fe\u4e2d\u7684\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u4e00\u4e2a\u8bb0\u5f55ID\u3002\u5982\u679c\u4f4d\u88ab\u8bbe\u7f6e\u4e86\uff0c\u8be5\u8bb0\u5f55ID\u6307\u5411\u7684\u8bb0\u5f55\u6ee1\u8db3\u952e\u503c\u3002\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\u8d1f\u8d23\u5c06\u6bd4\u7279\u4f4d\u7f6e\u8f6c\u6362\u4e3a\u8bb0\u5f55ID\u3002\u4f4d\u56fe\u4f7f\u7528\u538b\u7f29\u8fdb\u884c\u5b58\u50a8\u3002\u5982\u679c\u952e\u503c\u53bb\u91cd\u540e\u7684\u6570\u91cf\u6bd4\u8f83\u5c11\uff0cbitmap \u7d22\u5f15\u76f8\u6bd4\u666e\u901a\u7684\u7d22\u5f15\u6765\u8bf4\uff0c\u4f53\u79ef\u975e\u5e38\u5c0f\uff0c\u538b\u7f29\u6548\u679c\u66f4\u597d\uff0c\u80fd\u591f\u66f4\u597d\u7684\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u3002\u56e0\u6b64 bitmap \u7d22\u5f15\u7684\u5927\u5c0f\u53ef\u4ee5\u8fd1\u4f3c\u901a\u8fc7\u8bb0\u5f55\u603b\u6570\u4e58\u4ee5\u7d22\u5f15\u5217\u53bb\u91cd\u540e\u7684\u6570\u91cf\u5f97\u51fa\u3002  \u5bf9\u4e8e\u5728 WHERE \u5b50\u53e5\u4e2d\u5305\u542b\u591a\u4e2a\u6761\u4ef6\u7684\u67e5\u8be2\u6765\u8bf4\uff0cbitmap \u7d22\u5f15\u4e00\u822c\u90fd\u975e\u5e38\u6709\u6548\u3002\u5982\u679c\u5728\u8bbf\u95ee\u6570\u636e\u8868\u4e4b\u524d\uff0c\u5c31\u80fd\u8fc7\u6ee4\u6389\u53ea\u6ee1\u8db3\u90e8\u5206\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u90a3\u4e48\u67e5\u8be2\u54cd\u5e94\u65f6\u95f4\u5c31\u4f1a\u5f97\u5230\u5de8\u5927\u7684\u63d0\u5347\u3002", 
            "title": "\u5173\u4e8e Bitmap \u7d22\u5f15"
        }, 
        {
            "location": "/management/management-defining-database-objects/#when-to-use-bitmap-indexes", 
            "text": "Bitmap\u7d22\u5f15\u7279\u522b\u9002\u7528\u6570\u636e\u4ed3\u5e93\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u6570\u636e\u7684\u66f4\u65b0\u76f8\u5bf9\u975e\u5e38\u5c11\u3002Bitmap\u7d22\u5f15\u5bf9\u4e8e\u53bb\u91cd\u540e\u5217\u503c\u5728 100 \u5230 10,0000 \u4e2a\uff0c\u5e76\u4e14\u67e5\u8be2\u65f6\u7ecf\u5e38\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\u591a\u5217\u53c2\u4e00\u8d77\u4f7f\u7528\u7684\u67e5\u8be2\u6027\u80fd\u63d0\u5347\u975e\u5e38\u660e\u663e\u3002\u4f46\u662f\u50cf\u6027\u522b\u8fd9\u79cd\u53ea\u6709\u4e24\u4e2a\u503c\u7684\u7c7b\u578b\uff0c\u5b9e\u9645\u4e0a\u7d22\u5f15\u5e76\u4e0d\u80fd\u63d0\u4f9b\u6bd4\u8f83\u597d\u7684\u6027\u80fd\u63d0\u5347\u3002\u5982\u679c\u53bb\u91cd\u540e\u7684\u503c\u591a\u4f59 10,0000 \u4e2a\uff0cbitmap \u7d22\u5f15\u7684\u6027\u80fd\u6536\u76ca\u548c\u5b58\u50a8\u6548\u7387\u90fd\u4f1a\u5f00\u59cb\u4e0b\u964d\u3002  Bitmap \u7d22\u5f15\u5bf9\u4e8e\u4e34\u65f6\u6027\u7684\u67e5\u8be2\u6027\u80fd\u6539\u8fdb\u6bd4\u8f83\u660e\u663e\u3002\u5728 WHERE \u5b50\u53e5\u4e2d\u7684 AND \u548c OR \u6761\u4ef6\u6765\u8bf4\uff0c\u53ef\u4ee5\u5229\u7528 bitmap \u7d22\u5f15\u4fe1\u606f\u5feb\u901f\u5f97\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u7528\u9996\u5148\u8bfb\u53d6\u8bb0\u5f55\u4fe1\u606f\u3002\u5982\u679c\u7ed3\u679c\u96c6\u6570\u636e\u5f88\u5c11\uff0c\u67e5\u8be2\u5c31\u4e0d\u9700\u8981\u4f7f\u7528\u5168\u8868\u626b\u63cf\uff0c\u5e76\u4e14\u80fd\u975e\u5e38\u5feb\u7684\u8fd4\u56de\u7ed3\u679c\u3002", 
            "title": "When to Use Bitmap Indexes"
        }, 
        {
            "location": "/management/management-defining-database-objects/#bitmap_1", 
            "text": "\u5982\u679c\u5217\u7684\u6570\u636e\u552f\u4e00\u6216\u8005\u91cd\u590d\u975e\u5e38\u5c11\uff0c\u5c31\u5e94\u8be5\u907f\u514d\u4f7f\u7528bitmap\u7d22\u5f15\u3002bitmap\u7d22\u5f15\u7684\u6027\u80fd\u4f18\u52bf\u548c\u5b58\u50a8\u4f18\u52bf\u5728\u5217\u7684\u552f\u4e00\u503c\u8d85\u8fc710,0000\u540e\u5c31\u4f1a\u5f00\u59cb\u4e0b\u964d\u3002\u4e0e\u8868\u4e2d\u7684\u603b\u7eaa\u5f55\u6570\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\nBitmap\u7d22\u5f15\u4e5f\u4e0d\u9002\u5408\u5e76\u53d1\u4fee\u6539\u6570\u636e\u4e8b\u52a1\u7279\u522b\u591a\u7684OLTP\u7c7b\u578b\u5e94\u7528\u3002\n\u4f7f\u7528bitmap\u7d22\u5f15\u5e94\u8be5\u8c28\u614e\uff0c\u4ed4\u7ec6\u5bf9\u6bd4\u5efa\u7acb\u7d22\u5f15\u524d\u540e\u7684\u67e5\u8be2\u6027\u80fd\u3002\u53ea\u6dfb\u52a0\u90a3\u4e9b\u5bf9\u67e5\u8be2\u6027\u80fd\u6709\u5e2e\u52a9\u7684\u7d22\u5f15\u3002", 
            "title": "\u4e0d\u9002\u5408\u4f7f\u7528Bitmap\u7d22\u5f15\u7684\u60c5\u51b5"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_34", 
            "text": "CREATE INDEX \u547d\u4ee4\u53ef\u4ee5\u7ed9\u6307\u5b9a\u7684\u8868\u5b9a\u4e49\u7d22\u5f15\u3002\u7d22\u5f15\u7684\u9ed8\u8ba4\u7c7b\u578b\u662f\uff1aB\u6811\u7d22\u5f15\u3002\u4e0b\u9762\u4f8b\u5b50\u7ed9\u8868 employee \u7684 gender \u5217\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e2aB\u6811\u7d22\u5f15\uff1a  CREATE INDEX gender_idx ON employee (gender);  \u4e3a films \u8868\u7684 title \u5217\u521b\u5efa bitmap \u7d22\u5f15\uff1a  CREATE INDEX title_bmp_idx ON films USING bitmap (title);", 
            "title": "\u521b\u5efa\u7d22\u5f15"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_35", 
            "text": "product-name  \u7d22\u5f15\u4e0d\u9700\u8981\u7ef4\u62a4\u548c\u8c03\u4f18\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u771f\u5b9e\u7684\u67e5\u8be2\u6765\u68c0\u67e5\u7d22\u5f15\u7684\u4f7f\u7528\u60c5\u51b5\u3002EXPLAIN \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u4e00\u4e2a\u67e5\u8be2\u4f7f\u7528\u7d22\u5f15\u7684\u60c5\u51b5\u3002\n\u67e5\u8be2\u8ba1\u5212\u4f1a\u663e\u793a\u6570\u636e\u5e93\u4e3a\u4e86\u56de\u7b54\u60a8\u7684\u67e5\u8be2\u6240\u9700\u8981\u7684\u6b65\u9aa4\u548c\u8ba1\u5212\u8282\u70b9\uff0c\u5e76\u7ed9\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u5f00\u9500\u8bc4\u4f30\u3002\u8981\u68c0\u67e5\u7d22\u5f15\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5 EXPLAIN \u8f93\u51fa\u4e2d\u4e0b\u9762\u67e5\u8be2\u8ba1\u5212\u8282\u70b9\uff1a   Index Scan - \u626b\u63cf\u7d22\u5f15  Bitmap Heap Scan - \u6839\u636e BitmapAnd\uff0c BitmapOr\uff0c\u6216 BitmapIndexScan \u751f\u6210\u4f4d\u56fe\uff0c\u4ece heap \u6587\u4ef6\u4e2d\u8bfb\u53d6\u76f8\u5e94\u7684\u8bb0\u5f55\u3002  Bitmap Index Scan - \u901a\u8fc7\u5e95\u5c42\u7684\u7d22\u5f15\uff0c\u751f\u6210\u6ee1\u8db3\u591a\u4e2a\u67e5\u8be2\u7684\u6761\u4ef6\u7684\u4f4d\u56fe\u4fe1\u606f\u3002  BitmapAnd \u6216 BitmapOr - \u6839\u636e\u591a\u4e2a BitmapIndexScan \u751f\u6210\u7684\u4f4d\u56fe\u8fdb\u884c\u4f4d\u4e0e\u548c\u4f4d\u6216\u8fd0\u7b97\uff0c\u751f\u6210\u65b0\u7684\u4f4d\u56fe\u3002   \u521b\u5efa\u7d22\u5f15\u524d\uff0c\u60a8\u9700\u8981\u505a\u4e00\u4e9b\u5b9e\u9a8c\u6765\u51b3\u5b9a\u5982\u4f55\u521b\u5efa\u7d22\u5f15\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u60a8\u9700\u8981\u8003\u8651\u7684\u5730\u65b9\uff1a   \u5f53\u4f60\u521b\u5efa\u6216\u66f4\u65b0\u7d22\u5f15\u540e\uff0c\u6700\u597d\u8fd0\u884c ANALYZE \u547d\u4ee4\u3002ANALYZE \u9488\u5bf9\u8868\u6536\u96c6\u7edf\u8ba1\u4fe1\u606f\u3002\u67e5\u8be2\u4f18\u5316\u5668\u4f1a\u5229\u7528\u8868\u7684\u7edf\u8ba1\u4fe1\u606f\u6765\u8bc4\u4f30\u67e5\u8be2\u8fd4\u56de\u7684\u7ed3\u679c\u6570\u91cf\uff0c\u5e76\u4e14\u5bf9\u6bcf\u79cd\u67e5\u8be2\u8ba1\u5212\u4f30\u7b97\u66f4\u771f\u5b9e\u7684\u65f6\u95f4\u5f00\u9500\u3002  \u4f7f\u7528\u771f\u5b9e\u6570\u636e\u6765\u8fdb\u884c\u5b9e\u9a8c\u3002\u5982\u679c\u5229\u7528\u6d4b\u8bd5\u6570\u636e\u6765\u51b3\u5b9a\u6dfb\u52a0\u7d22\u5f15\uff0c\u90a3\u4e48\u4f60\u7684\u7d22\u5f15\u53ea\u662f\u9488\u5bf9\u6d4b\u8bd5\u6570\u636e\u8fdb\u884c\u4e86\u4f18\u5316\u3002  \u4e0d\u8981\u4f7f\u7528\u53ef\u80fd\u5bfc\u81f4\u7ed3\u679c\u4e0d\u771f\u5b9e\u6216\u8005\u6570\u636e\u503e\u659c\u7684\u5c0f\u6570\u636e\u96c6\u8fdb\u884c\u6d4b\u8bd5\u3002  \u8bbe\u8ba1\u6d4b\u8bd5\u6570\u636e\u65f6\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u3002\u6d4b\u8bd5\u6570\u636e\u5982\u679c\u8fc7\u4e8e\u76f8\u4f3c\uff0c\u5b8c\u5168\u968f\u673a\uff0c\u6309\u7279\u5b9a\u987a\u5e8f\u5bfc\u5165\uff0c\u90fd\u53ef\u80fd\u5bfc\u81f4\u7edf\u8ba1\u6570\u636e\u4e0e\u771f\u5b9e\u6570\u636e\u5206\u5e03\u7684\u5de8\u5927\u5dee\u5f02\u3002  \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u8fd0\u884c\u65f6\u53c2\u6570\u6765\u7981\u7528\u67d0\u4e9b\u7279\u5b9a\u67e5\u8be2\u7c7b\u578b\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u52a0\u9488\u5bf9\u6027\u5bf9\u7d22\u5f15\u4f7f\u7528\u8fdb\u884c\u6d4b\u8bd5\u3002\u4f8b\u5982\uff1a\u5173\u95ed\u987a\u5e8f\u626b\u63cf\uff08enable_seqscan\uff09\u548c\u5d4c\u5957\u8fde\u63a5\uff08enable_nestloop\uff09\uff0c\u53ca\u5176\u5b83\u57fa\u7840\u67e5\u8be2\u8ba1\u5212\uff0c\u53ef\u4ee5\u5f3a\u5236\u7cfb\u7edf\u9009\u62e9\u5176\u5b83\u7c7b\u578b\u7684\u67e5\u8be2\u8ba1\u5212\u3002\u901a\u8fc7\u5bf9\u67e5\u8be2\u8ba1\u65f6\u548c\u5229\u7528 EXPLAIN ANALYZE \u547d\u4ee4\u6765\u5bf9\u6bd4\u4f7f\u7528\u548c\u4e0d\u4f7f\u7528\u7d22\u5f15\u7684\u67e5\u8be2\u7ed3\u679c\u3002", 
            "title": "\u68c0\u67e5\u7d22\u5f15\u7684"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_36", 
            "text": "\u4f7f\u7528 REINDEX \u547d\u4ee4\u53ef\u4ee5\u5bf9\u620f\u80fd\u4e0d\u597d\u7684\u7d22\u5f15\u8fdb\u884c\u91cd\u65b0\u521b\u5efa\u3002REINDEX \u91cd\u5efa\u662f\u5bf9\u8868\u4e2d\u6570\u636e\u91cd\u5efa\u5e76\u66ff\u6362\u5c31\u7d22\u5f15\u5b9e\u73b0\u7684\u3002  \u5728\u6307\u5b9a\u8868\u4e0a\u91cd\u65b0\u751f\u6210\u6240\u6709\u7d22\u5f15\uff1a  REINDEX my_table;  \u5bf9\u6307\u5b9a\u7d22\u5f15\u91cd\u65b0\u751f\u6210\uff1a  REINDEX my_index;", 
            "title": "\u7d22\u5f15\u7ba1\u7406"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_37", 
            "text": "DROP INDEX \u547d\u4ee4\u5220\u9664\u4e00\u4e2a\u7d22\u5f15\uff0c\u4f8b\u5982\uff1a  DROP INDEX title_idx;  \u52a0\u8f7d\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u5220\u9664\u7d22\u5f15\uff0c\u52a0\u8f7d\u6570\u636e\uff0c\u518d\u91cd\u65b0\u5efa\u7acb\u7d22\u5f15\u7684\u65b9\u5f0f\u52a0\u5feb\u6570\u636e\u52a0\u8f7d\u901f\u5ea6\u3002", 
            "title": "\u5220\u9664\u7d22\u5f15"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_38", 
            "text": "\u89c6\u56fe\u80fd\u591f\u5c06\u60a8\u5e38\u7528\u6216\u590d\u6742\u7684\u67e5\u8be2\u4fdd\u5b58\u8d77\u6765\uff0c\u5e76\u5141\u8bb8\u60a8\u5728 SELECT \u8bed\u53e5\u4e2d\u50cf\u8bbf\u95ee\u8868\u4e00\u6837\u8bbf\u95ee\u4fdd\u5b58\u7684\u67e5\u8be2\u3002\u89c6\u56fe\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u6570\u636e\uff0c\u800c\u662f\u5728\u8bbf\u95ee\u89c6\u56fe\u65f6\uff0c\u89c6\u56fe\u5b9a\u4e49\u7684\u67e5\u8be2\u4ee5\u81ea\u67e5\u8be2\u7684\u65b9\u5f0f\u88ab\u996e\u7528\u3002  \u5982\u679c\u67d0\u4e2a\u81ea\u67e5\u8be2\u53ea\u88ab\u67d0\u4e2a\u7279\u5b9a\u67e5\u8be2\u4f7f\u7528\uff0c\u8003\u8651\u4f7f\u7528 SELECT \u8bed\u53e5\u7684 WITH \u5b50\u53e5\u6765\u907f\u514d\u521b\u5efa\u4e00\u5f20\u4e0d\u80fd\u88ab\u516c\u7528\u7684\u89c6\u56fe\u3002", 
            "title": "\u521b\u5efa\u548c\u7ba1\u7406\u89c6\u56fe"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_39", 
            "text": "CREATE VIEW \u547d\u4ee4\u6839\u636e\u4e00\u4e2a\u67e5\u8be2\u5b9a\u4e49\u4e00\u4e2a\u89c6\u56fe\uff0c\u4f8b\u5982\uff1a  CREATE VIEW comedies AS SELECT * FROM films WHERE kind = 'comedy';  \u89c6\u56fe\u4f1a\u5ffd\u7565\u89c6\u56fe\u5b9a\u4e49\u67e5\u8be2\u4e2d\u7684 ORDER BY \u548c SORT \u7684\u529f\u80fd\u3002", 
            "title": "\u521b\u5efa\u89c6\u56fe"
        }, 
        {
            "location": "/management/management-defining-database-objects/#_40", 
            "text": "DROP VIEW \u5220\u9664\u4e00\u5f20\u89c6\u56fe\uff0c\u4f8b\u5982:  DROP VIEW topten;", 
            "title": "\u5220\u9664\u89c6\u56fe"
        }, 
        {
            "location": "/management/management-managing-data/", 
            "text": "Managing Data\n\n\nThis section provides information about manipulating data and concurrent access in Greenplum Database. This topic includes the following subtopics:\n\n\n\n\nAbout Concurrency Control in Greenplum Database\n\n\nInserting Rows\n\n\nUpdating Existing Rows\n\n\nDeleting Rows\n\n\nWorking With Transactions\n\n\nVacuuming the Database\n\n\n\n\nAbout Concurrency Control in Greenplum Database\n\n\nGreenplum Database and PostgreSQL do not use locks for concurrency control. They maintain data consistency using a multiversion model, Multiversion Concurrency Control (MVCC). MVCC achieves transaction isolation for each database session, and each query transaction sees a snapshot of data. This ensures the transaction sees consistent data that is not affected by other concurrent transactions.\n\n\nBecause MVCC does not use explicit locks for concurrency control, lock contention is minimized and Greenplum Database maintains reasonable performance in multiuser environments. Locks acquired for querying (reading) data do not conflict with locks acquired for writing data.\n\n\nGreenplum Database provides multiple lock modes to control concurrent access to data in tables.\nMost Greenplum Database SQL commands automatically acquire the appropriate locks to ensure that referenced tables are not dropped or modified in incompatible ways while a command executes. For applications that cannot adapt easily to MVCC behavior, you can use the LOCK command to acquire explicit locks. However, proper use of MVCC generally provides better performance.\n\n\n\n\n\n\n\n\nLock Mode\n\n\nAssociated SQL Commands\n\n\nConflicts With\n\n\n\n\n\n\n\n\n\n\nACCESS SHARE\n\n\nSELECT\n\n\nACCESS EXCLUSIVE\n\n\n\n\n\n\nROW SHARE\n\n\nSELECT FOR SHARE\n\n\nEXCLUSIVE, ACCESS EXCLUSIVE\n\n\n\n\n\n\nROW EXCLUSIVE\n\n\nINSERT, COPY\n\n\nSHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE\n\n\n\n\n\n\nSHARE UPDATE EXCLUSIVE\n\n\nVACUUM (without FULL), ANALYZE\n\n\nSHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE\n\n\n\n\n\n\nSHARE\n\n\nCREATE INDEX\n\n\nROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE\n\n\n\n\n\n\nSHARE ROW EXCLUSIVE\n\n\n\n\nROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE\n\n\n\n\n\n\nEXCLUSIVE\n\n\nDELETE, UPDATE, SELECT FOR UPDATE, See Note\n\n\nROW SHARE, ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE\n\n\n\n\n\n\nACCESS EXCLUSIVE\n\n\nALTER TABLE, DROP TABLE, TRUNCATE, REINDEX, CLUSTER, VACUUM FULL\n\n\nACCESS SHARE, ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE\n\n\n\n\n\n\n\n\nNote\n: In Greenplum Database, UPDATE, DELETE, and SELECT FOR UPDATE acquire the more restrictive lock EXCLUSIVE rather than ROW EXCLUSIVE.\n\n\nInserting Rows\n\n\nUse the INSERT command to create rows in a table. This command requires the table name and a value for each column in the table; you may optionally specify the column names in any order. If you do not specify column names, list the data values in the order of the columns in the table, separated by commas.\n\n\nFor example, to specify the column names and the values to insert:\n\n\nINSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);\n\n\n\nTo specify only the values to insert:\n\n\nINSERT INTO products VALUES (1, 'Cheese', 9.99);\n\n\n\nUsually, the data values are literals (constants), but you can also use scalar expressions. For example:\n\n\n INSERT INTO films SELECT * FROM tmp_films WHERE date_prod \n '2004-05-07';\n\n\n\nYou can insert multiple rows in a single command. For example:\n\n\nINSERT INTO products (product_no, name, price) VALUES\n    (1, 'Cheese', 9.99),\n    (2, 'Bread', 1.99),\n    (3, 'Milk', 2.99);\n\n\n\nTo insert data into a partitioned table, you specify the root partitioned table, the table created with the CREATE TABLE command. You also can specify a leaf child table of the partitioned table in an INSERT command. An error is returned if the data is not valid for the specified leaf child table. Specifying a child table that is not a leaf child table in the INSERT command is not supported.\n\n\nTo insert large amounts of data, use external tables or the COPY command. These load mechanisms are more efficient than INSERT for inserting large quantities of rows. See Loading and Unloading Data for more information about bulk data loading.\n\n\nThe storage model of append-optimized tables is optimized for bulk data loading. Greenplum does not recommend single row INSERT statements for append-optimized tables. For append-optimized tables, Greenplum Database supports a maximum of 127 concurrent INSERT transactions into a single append- optimized table.\n\n\nUpdating Existing Rows\n\n\nThe UPDATE command updates rows in a table. You can update all rows, a subset of all rows, or individual rows in a table. You can update each column separately without affecting other columns.\n\n\nTo perform an update, you need:\n\n\n\n\nThe name of the table and columns to update\n\n\nThe new values of the columns\n\n\nOne or more conditions specifying the row or rows to be updated.\n\n\n\n\nFor example, the following command updates all products that have a price of 5 to have a price of 10:\n\n\nUPDATE products SET price = 10 WHERE price = 5;\n\n\n\nUsing UPDATE in Greenplum Database has the following restrictions:\n\n The Greenplum distribution key columns may not be updated.\n\n If mirrors are enabled, you cannot use STABLE or VOLATILE functions in an UPDATE statement.\n\n Greenplum Database does not support the RETURNING clause.\n\n Greenplum Database partitioning columns cannot be updated.\n\n\nDeleting Rows\n\n\nThe DELETE command deletes rows from a table. Specify a WHERE clause to delete rows that match certain criteria. If you do not specify a WHERE clause, all rows in the table are deleted. The result is a valid, but empty, table. For example, to remove all rows from the products table that have a price of 10:\n\n\nDELETE FROM products WHERE price = 10;\n\n\n\nTo delete all rows from a table:\n\n\nDELETE FROM products;\n\n\n\nUsing DELETE in Greenplum Database has similar restrictions to using UPDATE:\n\n\n\n\nIf mirrors are enabled, you cannot use STABLE or VOLATILE functions in an UPDATE statement.\n\n\nThe RETURNING clause is not supported in Greenplum Database.\n\n\n\n\nTruncating a Table\n\n\nUse the TRUNCATE command to quickly remove all rows in a table. For example:\n\n\nTRUNCATE mytable;\n\n\n\nThis command empties a table of all rows in one operation. Note that TRUNCATE does not scan the table, therefore it does not process inherited child tables or ON DELETE rewrite rules. The command truncates only rows in the named table.\n\n\nWorking With Transactions\n\n\nTransactions allow you to bundle multiple SQL statements in one all-or-nothing operation. The following are the Greenplum Database SQL transaction commands:\n\n BEGIN or START TRANSACTION starts a transaction block.\n\n END or COMMIT commits the results of a transaction.\n\n ROLLBACK abandons a transaction without making any changes.\n\n SAVEPOINT marks a place in a transaction and enables partial rollback. You can roll back commands executed after a savepoint while maintaining commands executed before the savepoint.\n\n ROLLBACK TO SAVEPOINT rolls back a transaction to a savepoint.\n\n RELEASE SAVEPOINT destroys a savepoint within a transaction.\n\n\nTransaction Isolation Levels\n\n\nGreenplum Database accepts the standard SQL transaction levels as follows:\n\n read uncommitted and read committed behave like the standard read committed\n\n repeatable read is disallowed. If the behavior of repeatable read is required, use serializable.\n* serializable behaves in a manner similar to SQL standard serializable\n\n\nThe following information describes the behavior of the Greenplum transaction levels:\n* read committed/read uncommitted \u2014 Provides fast, simple, partial transaction isolation. With read committed and read uncommitted transaction isolation, SELECT, UPDATE, and DELETE transactions operate on a snapshot of the database taken when the query started.\n\n\nA SELECT query:\n* Sees data committed before the query starts.\n* Sees updates executed within the transaction.\n* Does not see uncommitted data outside the transaction.\n* Can possibly see changes that concurrent transactions made if the concurrent transaction is committed after the initial read in its own transaction.\n\nSuccessive SELECT queries in the same transaction can see different data if other concurrent transactions commit changes before the queries start. UPDATE and DELETE commands find only rows committed before the commands started.\n\nRead committed or read uncommitted transaction isolation allows concurrent transactions to modify or lock a row before UPDATE or DELETE finds the row. Read committed or read uncommitted transaction isolation may be inadequate for applications that perform complex queries and updates and require a consistent view of the database.\n\n\n\n\n\n\n\nserializable \u2014 Provides strict transaction isolation in which transactions execute as if they run one after another rather than concurrently. Applications on the serializable level must be designed to retry transactions in case of serialization failures. In Greenplum Database, SERIALIZABLE prevents dirty reads, non-repeatable reads, and phantom reads without expensive locking, but there are other interactions that can occur between some SERIALIZABLE transactions in Greenplum Database that prevent them from being truly serializable. Transactions that run concurrently should be examined to identify interactions that are not prevented by disallowing concurrent updates of the same data. Problems identified can be prevented by using explicit table locks or by requiring the conflicting transactions to update a dummy row introduced to represent the conflict.\n\n\nA SELECT query:\n\n Sees a snapshot of the data as of the start of the transaction (not as of the start of the current query\nwithin the transaction).\n\n Sees only data committed before the query starts.\n\n Sees updates executed within the transaction.\n\n Does not see uncommitted data outside the transaction.\n* Does not see changes that concurrent transactions made.\n\n\nSuccessive SELECT commands within a single transaction always see the same data.\nUPDATE, DELETE, SELECT FOR UPDATE, and SELECT FOR SHARE commands find only rows committed before the command started. If a concurrent transaction has already updated, deleted, or locked a target row when the row is found, the serializable or repeatable read transaction waits for the concurrent transaction to update the row, delete the row, or roll back.\n\n\nIf the concurrent transaction updates or deletes the row, the serializable or repeatable read transaction rolls back. If the concurrent transaction rolls back, then the serializable or repeatable read transaction updates or deletes the row.\n\n\n\n\n\n\nThe default transaction isolation level in Greenplum Database is read committed. To change the isolation level for a transaction, declare the isolation level when you BEGIN the transaction or use the SET TRANSACTION command after the transaction starts.\n\n\nVacuuming the Database\n\n\nDeleted or updated data rows occupy physical space on disk even though new transactions cannot see them. Periodically running the VACUUM command removes these expired rows. For example:\n\n\nVACUUM mytable;\n\n\n\nThe VACUUM command collects table-level statistics such as the number of rows and pages. Vacuum all tables after loading data, including append-optimized tables. For information about recommended routine vacuum operations, see Routine Vacuum and Analyze.\n\n\nImportant\n: The VACUUM, VACUUM FULL, and VACUUM ANALYZE commands should be used to maintain the data in a Greenplum database especially if updates and deletes are frequently performed on your database data. See the VACUUM command in the Greenplum Database Reference Guide for information about using the command.\n\n\nConfiguring the Free Space Map\n\n\nExpired rows are held in the free space map. The free space map must be sized large enough to hold all expired rows in your database. If not, a regular VACUUM command cannot reclaim space occupied by expired rows that overflow the free space map.\n\n\nVACUUM FULL reclaims all expired row space, but it is an expensive operation and can take an unacceptably long time to finish on large, distributed Greenplum Database tables. If the free space map overflows, you can recreate the table with a CREATE TABLE AS statement and drop the old table. Pivotal recommends not using VACUUM FULL.\n\n\nSize the free space map with the following server configuration parameters:\n\n max_fsm_pages\n\n max_fsm_relations", 
            "title": "\u6570\u636e\u7ba1\u7406"
        }, 
        {
            "location": "/management/management-managing-data/#managing-data", 
            "text": "This section provides information about manipulating data and concurrent access in Greenplum Database. This topic includes the following subtopics:   About Concurrency Control in Greenplum Database  Inserting Rows  Updating Existing Rows  Deleting Rows  Working With Transactions  Vacuuming the Database", 
            "title": "Managing Data"
        }, 
        {
            "location": "/management/management-managing-data/#about-concurrency-control-in-greenplum-database", 
            "text": "Greenplum Database and PostgreSQL do not use locks for concurrency control. They maintain data consistency using a multiversion model, Multiversion Concurrency Control (MVCC). MVCC achieves transaction isolation for each database session, and each query transaction sees a snapshot of data. This ensures the transaction sees consistent data that is not affected by other concurrent transactions.  Because MVCC does not use explicit locks for concurrency control, lock contention is minimized and Greenplum Database maintains reasonable performance in multiuser environments. Locks acquired for querying (reading) data do not conflict with locks acquired for writing data.  Greenplum Database provides multiple lock modes to control concurrent access to data in tables.\nMost Greenplum Database SQL commands automatically acquire the appropriate locks to ensure that referenced tables are not dropped or modified in incompatible ways while a command executes. For applications that cannot adapt easily to MVCC behavior, you can use the LOCK command to acquire explicit locks. However, proper use of MVCC generally provides better performance.     Lock Mode  Associated SQL Commands  Conflicts With      ACCESS SHARE  SELECT  ACCESS EXCLUSIVE    ROW SHARE  SELECT FOR SHARE  EXCLUSIVE, ACCESS EXCLUSIVE    ROW EXCLUSIVE  INSERT, COPY  SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE    SHARE UPDATE EXCLUSIVE  VACUUM (without FULL), ANALYZE  SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE    SHARE  CREATE INDEX  ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE    SHARE ROW EXCLUSIVE   ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE    EXCLUSIVE  DELETE, UPDATE, SELECT FOR UPDATE, See Note  ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE    ACCESS EXCLUSIVE  ALTER TABLE, DROP TABLE, TRUNCATE, REINDEX, CLUSTER, VACUUM FULL  ACCESS SHARE, ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE     Note : In Greenplum Database, UPDATE, DELETE, and SELECT FOR UPDATE acquire the more restrictive lock EXCLUSIVE rather than ROW EXCLUSIVE.", 
            "title": "About Concurrency Control in Greenplum Database"
        }, 
        {
            "location": "/management/management-managing-data/#inserting-rows", 
            "text": "Use the INSERT command to create rows in a table. This command requires the table name and a value for each column in the table; you may optionally specify the column names in any order. If you do not specify column names, list the data values in the order of the columns in the table, separated by commas.  For example, to specify the column names and the values to insert:  INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);  To specify only the values to insert:  INSERT INTO products VALUES (1, 'Cheese', 9.99);  Usually, the data values are literals (constants), but you can also use scalar expressions. For example:   INSERT INTO films SELECT * FROM tmp_films WHERE date_prod   '2004-05-07';  You can insert multiple rows in a single command. For example:  INSERT INTO products (product_no, name, price) VALUES\n    (1, 'Cheese', 9.99),\n    (2, 'Bread', 1.99),\n    (3, 'Milk', 2.99);  To insert data into a partitioned table, you specify the root partitioned table, the table created with the CREATE TABLE command. You also can specify a leaf child table of the partitioned table in an INSERT command. An error is returned if the data is not valid for the specified leaf child table. Specifying a child table that is not a leaf child table in the INSERT command is not supported.  To insert large amounts of data, use external tables or the COPY command. These load mechanisms are more efficient than INSERT for inserting large quantities of rows. See Loading and Unloading Data for more information about bulk data loading.  The storage model of append-optimized tables is optimized for bulk data loading. Greenplum does not recommend single row INSERT statements for append-optimized tables. For append-optimized tables, Greenplum Database supports a maximum of 127 concurrent INSERT transactions into a single append- optimized table.", 
            "title": "Inserting Rows"
        }, 
        {
            "location": "/management/management-managing-data/#updating-existing-rows", 
            "text": "The UPDATE command updates rows in a table. You can update all rows, a subset of all rows, or individual rows in a table. You can update each column separately without affecting other columns.  To perform an update, you need:   The name of the table and columns to update  The new values of the columns  One or more conditions specifying the row or rows to be updated.   For example, the following command updates all products that have a price of 5 to have a price of 10:  UPDATE products SET price = 10 WHERE price = 5;  Using UPDATE in Greenplum Database has the following restrictions:  The Greenplum distribution key columns may not be updated.  If mirrors are enabled, you cannot use STABLE or VOLATILE functions in an UPDATE statement.  Greenplum Database does not support the RETURNING clause.  Greenplum Database partitioning columns cannot be updated.", 
            "title": "Updating Existing Rows"
        }, 
        {
            "location": "/management/management-managing-data/#deleting-rows", 
            "text": "The DELETE command deletes rows from a table. Specify a WHERE clause to delete rows that match certain criteria. If you do not specify a WHERE clause, all rows in the table are deleted. The result is a valid, but empty, table. For example, to remove all rows from the products table that have a price of 10:  DELETE FROM products WHERE price = 10;  To delete all rows from a table:  DELETE FROM products;  Using DELETE in Greenplum Database has similar restrictions to using UPDATE:   If mirrors are enabled, you cannot use STABLE or VOLATILE functions in an UPDATE statement.  The RETURNING clause is not supported in Greenplum Database.", 
            "title": "Deleting Rows"
        }, 
        {
            "location": "/management/management-managing-data/#truncating-a-table", 
            "text": "Use the TRUNCATE command to quickly remove all rows in a table. For example:  TRUNCATE mytable;  This command empties a table of all rows in one operation. Note that TRUNCATE does not scan the table, therefore it does not process inherited child tables or ON DELETE rewrite rules. The command truncates only rows in the named table.", 
            "title": "Truncating a Table"
        }, 
        {
            "location": "/management/management-managing-data/#working-with-transactions", 
            "text": "Transactions allow you to bundle multiple SQL statements in one all-or-nothing operation. The following are the Greenplum Database SQL transaction commands:  BEGIN or START TRANSACTION starts a transaction block.  END or COMMIT commits the results of a transaction.  ROLLBACK abandons a transaction without making any changes.  SAVEPOINT marks a place in a transaction and enables partial rollback. You can roll back commands executed after a savepoint while maintaining commands executed before the savepoint.  ROLLBACK TO SAVEPOINT rolls back a transaction to a savepoint.  RELEASE SAVEPOINT destroys a savepoint within a transaction.", 
            "title": "Working With Transactions"
        }, 
        {
            "location": "/management/management-managing-data/#transaction-isolation-levels", 
            "text": "Greenplum Database accepts the standard SQL transaction levels as follows:  read uncommitted and read committed behave like the standard read committed  repeatable read is disallowed. If the behavior of repeatable read is required, use serializable.\n* serializable behaves in a manner similar to SQL standard serializable  The following information describes the behavior of the Greenplum transaction levels:\n* read committed/read uncommitted \u2014 Provides fast, simple, partial transaction isolation. With read committed and read uncommitted transaction isolation, SELECT, UPDATE, and DELETE transactions operate on a snapshot of the database taken when the query started.  A SELECT query:\n* Sees data committed before the query starts.\n* Sees updates executed within the transaction.\n* Does not see uncommitted data outside the transaction.\n* Can possibly see changes that concurrent transactions made if the concurrent transaction is committed after the initial read in its own transaction.\n\nSuccessive SELECT queries in the same transaction can see different data if other concurrent transactions commit changes before the queries start. UPDATE and DELETE commands find only rows committed before the commands started.\n\nRead committed or read uncommitted transaction isolation allows concurrent transactions to modify or lock a row before UPDATE or DELETE finds the row. Read committed or read uncommitted transaction isolation may be inadequate for applications that perform complex queries and updates and require a consistent view of the database.    serializable \u2014 Provides strict transaction isolation in which transactions execute as if they run one after another rather than concurrently. Applications on the serializable level must be designed to retry transactions in case of serialization failures. In Greenplum Database, SERIALIZABLE prevents dirty reads, non-repeatable reads, and phantom reads without expensive locking, but there are other interactions that can occur between some SERIALIZABLE transactions in Greenplum Database that prevent them from being truly serializable. Transactions that run concurrently should be examined to identify interactions that are not prevented by disallowing concurrent updates of the same data. Problems identified can be prevented by using explicit table locks or by requiring the conflicting transactions to update a dummy row introduced to represent the conflict.  A SELECT query:  Sees a snapshot of the data as of the start of the transaction (not as of the start of the current query\nwithin the transaction).  Sees only data committed before the query starts.  Sees updates executed within the transaction.  Does not see uncommitted data outside the transaction.\n* Does not see changes that concurrent transactions made.  Successive SELECT commands within a single transaction always see the same data.\nUPDATE, DELETE, SELECT FOR UPDATE, and SELECT FOR SHARE commands find only rows committed before the command started. If a concurrent transaction has already updated, deleted, or locked a target row when the row is found, the serializable or repeatable read transaction waits for the concurrent transaction to update the row, delete the row, or roll back.  If the concurrent transaction updates or deletes the row, the serializable or repeatable read transaction rolls back. If the concurrent transaction rolls back, then the serializable or repeatable read transaction updates or deletes the row.    The default transaction isolation level in Greenplum Database is read committed. To change the isolation level for a transaction, declare the isolation level when you BEGIN the transaction or use the SET TRANSACTION command after the transaction starts.", 
            "title": "Transaction Isolation Levels"
        }, 
        {
            "location": "/management/management-managing-data/#vacuuming-the-database", 
            "text": "Deleted or updated data rows occupy physical space on disk even though new transactions cannot see them. Periodically running the VACUUM command removes these expired rows. For example:  VACUUM mytable;  The VACUUM command collects table-level statistics such as the number of rows and pages. Vacuum all tables after loading data, including append-optimized tables. For information about recommended routine vacuum operations, see Routine Vacuum and Analyze.  Important : The VACUUM, VACUUM FULL, and VACUUM ANALYZE commands should be used to maintain the data in a Greenplum database especially if updates and deletes are frequently performed on your database data. See the VACUUM command in the Greenplum Database Reference Guide for information about using the command.", 
            "title": "Vacuuming the Database"
        }, 
        {
            "location": "/management/management-managing-data/#configuring-the-free-space-map", 
            "text": "Expired rows are held in the free space map. The free space map must be sized large enough to hold all expired rows in your database. If not, a regular VACUUM command cannot reclaim space occupied by expired rows that overflow the free space map.  VACUUM FULL reclaims all expired row space, but it is an expensive operation and can take an unacceptably long time to finish on large, distributed Greenplum Database tables. If the free space map overflows, you can recreate the table with a CREATE TABLE AS statement and drop the old table. Pivotal recommends not using VACUUM FULL.  Size the free space map with the following server configuration parameters:  max_fsm_pages  max_fsm_relations", 
            "title": "Configuring the Free Space Map"
        }, 
        {
            "location": "/management/management-quering-data/", 
            "text": "Querying Data\n\n\nThis topic provides information about using SQL in Greenplum databases.\nYou enter SQL statements called queries to view, change, and analyze data in a database using the psql interactive SQL client and other client tools.\n\n\n\n\nAbout Greenplum Query Processing\n\n\nAbout the Pivotal Query Optimizer\n\n\nDefining Queries\n\n\nUsing Functions and Operators\n\n\nQuery Performance\n\n\nManaging Spill Files Generated by Queries\n\n\nQuery Profiling\n\n\n\n\nAbout Greenplum Query Processing\n\n\nThis topic provides an overview of how Greenplum Database processes queries. Understanding this process can be useful when writing and tuning queries.\n\n\nUsers issue queries to Greenplum Database as they would to any database management system. They connect to the database instance on the Greenplum master host using a client application such as psql and submit SQL statements.\n\n\nParent topic: Querying Data\n\n\nUnderstanding Query Planning and Dispatch\n\n\nThe master receives, parses, and optimizes the query. The resulting query plan is either parallel or targeted. The master dispatches parallel query plans to all segments, as shown in Figure 1. The master dispatches targeted query plans to a single segment, as shown in Figure 2. Each segment is responsible for executing local database operations on its own set of data.query plans\n\n\nMost database operations\u2014such as table scans, joins, aggregations, and sorts\u2014execute across all segments in parallel. Each operation is performed on a segment database independent of the data stored in the other segment databases.\n\n\nTODO pic\n\n\nCertain queries may access only data on a single segment, such as single-row INSERT, UPDATE, DELETE, or SELECT operations or queries that filter on the table distribution key column(s). In queries such as these, the query plan is not dispatched to all segments, but is targeted at the segment that contains the affected or relevant row(s).\n\n\nTODO pic\n\n\nUnderstanding Greenplum Query Plans\n\n\nA query plan is the set of operations Greenplum Database will perform to produce the answer to a query. Each node or step in the plan represents a database operation such as a table scan, join, aggregation, or sort. Plans are read and executed from bottom to top.\n\n\nIn addition to common database operations such as tables scans, joins, and so on, Greenplum Database has an additional operation type called motion. A motion operation involves moving tuples between the segments during query processing. Note that not every query requires a motion. For example, a targeted query plan does not require data to move across the interconnect.\n\n\nTo achieve maximum parallelism during query execution, Greenplum divides the work of the query plan into slices. A slice is a portion of the plan that segments can work on independently. A query plan is sliced wherever a motion operation occurs in the plan, with one slice on each side of the motion.\n\n\nFor example, consider the following simple query involving a join between two tables:\n\n\nSELECT customer, amount\nFROM sales JOIN customer USING (cust_id)\nWHERE dateCol = '04-30-2008';\n\n\n\nFigure 3 shows the query plan. Each segment receives a copy of the query plan and works on it in parallel.\n\n\nThe query plan for this example has a redistribute motion that moves tuples between the segments to complete the join. The redistribute motion is necessary because the customer table is distributed across the segments by cust_id, but the sales table is distributed across the segments by sale_id. To perform the join, the sales tuples must be redistributed by cust_id. The plan is sliced on either side of the redistribute motion, creating slice 1 and slice 2.\n\n\nThis query plan has another type of motion operation called a gather motion. A gather motion is when the segments send results back up to the master for presentation to the client. Because a query plan is always sliced wherever a motion occurs, this plan also has an implicit slice at the very top of the plan (slice 3). Not all query plans involve a gather motion. For example, a CREATE TABLE x AS SELECT... statement would not have a gather motion because tuples are sent to the newly created table, not to the master.\n\n\nTODO pic\n\n\nUnderstanding Parallel Query Execution\n\n\nGreenplum creates a number of database processes to handle the work of a query. On the master, the query worker process is called the query dispatcher (QD). The QD is responsible for creating and dispatching the query plan. It also accumulates and presents the final results. On the segments, a query worker process is called a query executor (QE). A QE is responsible for completing its portion of work and communicating its intermediate results to the other worker processes.\n\n\nThere is at least one worker process assigned to each slice of the query plan. A worker process works on its assigned portion of the query plan independently. During query execution, each segment will have a number of processes working on the query in parallel.\n\n\nRelated processes that are working on the same slice of the query plan but on different segments are called gangs. As a portion of work is completed, tuples flow up the query plan from one gang of processes to the next. This inter-process communication between the segments is referred to as the interconnect component of Greenplum Database.\n\n\nFigure 4 shows the query worker processes on the master and two segment instances for the query plan illustrated in Figure 3.\n\n\nTODO pic\n\n\nDefining Queries\n\n\nGreenplum Database is based on the PostgreSQL implementation of the SQL standard.\n\n\nThis topic describes how to construct SQL queries in Greenplum Database.\n\n\n\n\nSQL Lexicon\n\n\nSQL Value Expressions\nParent topic: Querying Data\n\n\n\n\nSQL Lexicon\n\n\nSQL is a standard language for accessing databases. The language consists of elements that enable data storage, retrieval, analysis, viewing, manipulation, and so on. You use SQL commands to construct queries and commands that the Greenplum Database engine understands. SQL queries consist of a sequence of commands. Commands consist of a sequence of valid tokens in correct syntax order, terminated by a semicolon (;).\n\n\nFor more information about SQL commands, see the Greenplum Database Reference Guide.\n\n\nGreenplum Database uses PostgreSQL's structure and syntax, with some exceptions. For more information about SQL rules and concepts in PostgreSQL, see \"SQL Syntax\" in the PostgreSQL documentation.\n\n\nSQL Value Expressions\n\n\nSQL value expressions consist of one or more values, symbols, operators, SQL functions, and data. The expressions compare data or perform calculations and return a value as the result. Calculations include logical, arithmetic, and set operations.\n\n\nThe following are value expressions:\n\n\n\n\nAn aggregate expression\n\n\nAn array constructor\n\n\nA column reference\n\n\nA constant or literal value\n\n\nA correlated subquery\n\n\nA field selection expression\n\n\nA function call\n\n\nA new column value in an INSERT or UPDATE\n\n\nAn operator invocation column reference\n\n\nA positional parameter reference, in the body of a function definition or prepared statement\n\n\nA row constructor\n\n\nA scalar subquery\n\n\nA search condition in a WHERE clause\n\n\nA target list of a SELECT command\n\n\nA type cast\n\n\nA value expression in parentheses, useful to group sub-expressions and override precedence\n\n\nA window expression\nSQL constructs such as functions and operators are expressions but do not follow any general syntax rules. For more information about these constructs, see Using Functions and Operators.\n\n\n\n\nColumn References\n\n\nA column reference has the form:\n\n\ncorrelation.columnname\n\n\n\nHere, correlation is the name of a table (possibly qualified with a schema name) or an alias for a table defined with a FROM clause or one of the keywords NEW or OLD. NEW and OLD can appear only in rewrite rules, but you can use other correlation names in any SQL statement. If the column name is unique across all tables in the query, you can omit the \"correlation.\" part of the column reference.\n\n\nPositional Parameters\n\n\nPositional parameters are arguments to SQL statements or functions that you reference by their positions in a series of arguments. For example, $1 refers to the first argument, $2 to the second argument, and so on. The values of positional parameters are set from arguments external to the SQL statement or supplied when SQL functions are invoked. Some client libraries support specifying data values separately from the SQL command, in which case parameters refer to the out-of-line data values. A parameter reference has the form:\n\n\n$number\n\n\n\nFor example:\n\n\nCREATE FUNCTION dept(text) RETURNS dept\n    AS $$ SELECT * FROM dept WHERE name = $1 $$\n    LANGUAGE SQL;\n\n\n\nHere, the $1 references the value of the first function argument whenever the function is invoked.\n\n\nSubscripts\n\n\nIf an expression yields a value of an array type, you can extract a specific element of the array value as follows:\n\n\nexpression[subscript]\n\n\n\nYou can extract multiple adjacent elements, called an array slice, as follows (including the brackets):\n\n\nexpression[lower_subscript:upper_subscript]\n\n\n\nEach subscript is an expression and yields an integer value.\n\n\nArray expressions usually must be in parentheses, but you can omit the parentheses when the expression to be subscripted is a column reference or positional parameter. You can concatenate multiple subscripts when the original array is multidimensional. For example (including the parentheses):\n\n\nmytable.arraycolumn[4]\nmytable.two_d_column[17][34]\n$1[10:42]\n(arrayfunction(a,b))[42]\n\n\n\nField Selection\n\n\nIf an expression yields a value of a composite type (row type), you can extract a specific field of the row as follows:\n\n\nexpression.fieldname\n\n\n\nThe row expression usually must be in parentheses, but you can omit these parentheses when the expression to be selected from is a table reference or positional parameter. For example:\n\n\nmytable.mycolumn\n$1.somecolumn\n(rowfunction(a,b)).col3\n\n\n\nA qualified column reference is a special case of field selection syntax.\n\n\nOperator Invocations\n\n\nOperator invocations have the following possible syntaxes:\n\n\nexpression operator expression(binary infix operator)\noperator expression(unary prefix operator)\nexpression operator(unary postfix operator)\n\n\n\nWhere operator is an operator token, one of the key words AND, OR, or NOT, or qualified operator name in the form:\n\n\nOPERATOR(schema.operatorname)\n\n\n\nAvailable operators and whether they are unary or binary depends on the operators that the system or user defines. For more information about built-in operators, see Built-in Functions and Operators.\n\n\nFunction Calls\n\n\nThe syntax for a function call is the name of a function (possibly qualified with a schema name), followed by its argument list enclosed in parentheses:\n\n\nfunction ([expression [, expression ... ]])\n\n\n\nFor example, the following function call computes the square root of 2:\n\n\nsqrt(2)\n\n\n\nSee the Greenplum Database Reference Guide for lists of the built-in functions by category. You can add custom functions, too.\n\n\nAggregate Expressions\n\n\nAn aggregate expression applies an aggregate function across the rows that a query selects. An aggregate function performs a calculation on a set of values and returns a single value, such as the sum or average of the set of values. The syntax of an aggregate expression is one of the following:\n\n\n\n\naggregate_name(expression [ , ... ] ) \u2014 operates across all input rows for which the expected result value is non-null. ALL is the default.\n\n\naggregate_name(ALL expression [ , ... ] ) \u2014 operates identically to the first form because ALL is the default.\n\n\naggregate_name(DISTINCT expression [ , ... ] ) \u2014 operates across all distinct non-null values of input rows.\n\n\naggregate_name(\n) \u2014 operates on all rows with values both null and non-null. Generally, this form is most useful for the count(\n) aggregate function.\nWhere aggregate_name is a previously defined aggregate (possibly schema-qualified) and expression is any value expression that does not contain an aggregate expression.\n\n\n\n\nFor example, count(*) yields the total number of input rows, count(f1) yields the number of input rows in which f1 is non-null, and count(distinct f1) yields the number of distinct non-null values of f1.\n\n\nFor predefined aggregate functions, see Built-in Functions and Operators. You can also add custom aggregate functions.\n\n\nGreenplum Database provides the MEDIAN aggregate function, which returns the fiftieth percentile of the PERCENTILE_CONT result and special aggregate expressions for inverse distribution functions as follows:\n\n\nPERCENTILE_CONT(_percentage_) WITHIN GROUP (ORDER BY _expression_)\nPERCENTILE_DISC(_percentage_) WITHIN GROUP (ORDER BY _expression_)\n\n\n\nCurrently you can use only these two expressions with the keyword WITHIN GROUP.\n\n\nLimitations of Aggregate Expressions\n\n\nThe following are current limitations of the aggregate expressions:\n\n\n\n\nGreenplum Database does not support the following keywords: ALL, DISTINCT, FILTER and OVER. See Table 5 for more details.\n\n\nAn aggregate expression can appear only in the result list or HAVING clause of a SELECT command. It is forbidden in other clauses, such as WHERE, because those clauses are logically evaluated before the results of aggregates form. This restriction applies to the query level to which the aggregate belongs.\n\n\nWhen an aggregate expression appears in a subquery, the aggregate is normally evaluated over the rows of the subquery. If the aggregate's arguments contain only outer-level variables, the aggregate belongs to the nearest such outer level and evaluates over the rows of that query. The aggregate expression as a whole is then an outer reference for the subquery in which it appears, and the aggregate expression acts as a constant over any one evaluation of that subquery. See Scalar Subqueries and Table 2.\n\n\nGreenplum Database does not support DISTINCT with multiple input expressions.\n\n\n\n\nWindow Expressions\n\n\nWindow expressions allow application developers to more easily compose complex online analytical processing (OLAP) queries using standard SQL commands. For example, with window expressions, users can calculate moving averages or sums over various intervals, reset aggregations and ranks as selected column values change, and express complex ratios in simple terms.\n\n\nA window expression represents the application of a window function applied to a window frame, which is defined in a special OVER() clause. A window partition is a set of rows that are grouped together to apply a window function. Unlike aggregate functions, which return a result value for each group of rows, window functions return a result value for every row, but that value is calculated with respect to the rows in a particular window partition. If no partition is specified, the window function is computed over the complete intermediate result set.\n\n\nThe syntax of a window expression is:\n\n\nwindow_function ( [expression [, ...]] ) OVER ( window_specification )\n\n\n\nWhere window_function is one of the functions listed in Table 3, expression is any value expression that does not contain a window expression, and window_specification is:\n\n\n[window_name]\n[PARTITION BY expression [, ...]]\n[[ORDER BY expression [ASC | DESC | USING operator] [, ...]\n    [{RANGE | ROWS} \n       { UNBOUNDED PRECEDING\n       | expression PRECEDING\n       | CURRENT ROW\n       | BETWEEN window_frame_bound AND window_frame_bound }]]\n\n\n\nand where window_frame_bound can be one of:\n\n\n    UNBOUNDED PRECEDING\n    expression PRECEDING\n    CURRENT ROW\n    expression FOLLOWING\n    UNBOUNDED FOLLOWING\n\n\n\nA window expression can appear only in the select list of a SELECT command. For example:\n\n\nSELECT count(*) OVER(PARTITION BY customer_id), * FROM sales;\n\n\n\nThe OVER clause differentiates window functions from other aggregate or reporting functions. The OVER clause defines the window_specification to which the window function is applied. A window specification has the following characteristics:\n\n\n\n\nThe PARTITION BY clause defines the window partitions to which the window function is applied. If omitted, the entire result set is treated as one partition.\n\n\n\n\nThe ORDER BY clause defines the expression(s) for sorting rows within a window partition. The ORDER BY clause of a window specification is separate and distinct from the ORDER BY clause of a regular query expression. The ORDER BY clause is required for the window functions that calculate rankings, as it identifies the measure(s) for the ranking values. For OLAP aggregations, the ORDER BY clause is required to use window frames (the ROWS | RANGE clause).\n\n\nNote: Columns of data types without a coherent ordering, such as time, are not good candidates for use in the ORDER BY clause of a window specification. Time, with or without a specified time zone, lacks a coherent ordering because addition and subtraction do not have the expected effects. For example, the following is not generally true: x::time \n x::time + '2 hour'::interval\n\n\n\n\n\n\nThe ROWS/RANGE clause defines a window frame for aggregate (non-ranking) window functions. A window frame defines a set of rows within a window partition. When a window frame is defined, the window function computes on the contents of this moving frame rather than the fixed contents of the entire window partition. Window frames are row-based (ROWS) or value-based (RANGE).\n\n\n\n\n\n\nType Casts\n\n\nA type cast specifies a conversion from one data type to another. Greenplum Database accepts two equivalent syntaxes for type casts:\n\n\nCAST ( expression AS type )\nexpression::type\n\n\n\nThe CAST syntax conforms to SQL; the syntax with :: is historical PostgreSQL usage.\n\n\nA cast applied to a value expression of a known type is a run-time type conversion. The cast succeeds only if a suitable type conversion function is defined. This differs from the use of casts with constants. A cast applied to a string literal represents the initial assignment of a type to a literal constant value, so it succeeds for any type if the contents of the string literal are acceptable input syntax for the data type.\n\n\nYou can usually omit an explicit type cast if there is no ambiguity about the type a value expression must produce; for example, when it is assigned to a table column, the system automatically applies a type cast. The system applies automatic casting only to casts marked \"OK to apply implicitly\" in system catalogs. Other casts must be invoked with explicit casting syntax to prevent unexpected conversions from being applied without the user's knowledge.\n\n\nScalar Subqueries\n\n\nA scalar subquery is a SELECT query in parentheses that returns exactly one row with one column. Do not use a SELECT query that returns multiple rows or columns as a scalar subquery. The query runs and uses the returned value in the surrounding value expression. A correlated scalar subquery contains references to the outer query block.\n\n\nCorrelated Subqueries\n\n\nA correlated subquery (CSQ) is a SELECT query with a WHERE clause or target list that contains references to the parent outer clause. CSQs efficiently express results in terms of results of another query. Greenplum Database supports correlated subqueries that provide compatibility with many existing applications. A CSQ is a scalar or table subquery, depending on whether it returns one or multiple rows. Greenplum Database does not support correlated subqueries with skip-level correlations.\n\n\nCorrelated Subquery Examples\nExample 1 \u2013 Scalar correlated subquery\n\n\nSELECT * FROM t1 WHERE t1.x \n            \n (SELECT MAX(t2.x) FROM t2 WHERE t2.y = t1.y);\n\n\n\nExample 2 \u2013 Correlated EXISTS subquery\n\n\nSELECT * FROM t1 WHERE \nEXISTS (SELECT 1 FROM t2 WHERE t2.x = t1.x);\n\n\n\nGreenplum Database uses one of the following methods to run CSQs:\n\n\n\n\nUnnest the CSQ into join operations \u2013 This method is most efficient, and it is how Greenplum Database runs most CSQs, including queries from the TPC-H benchmark.\n\n\nRun the CSQ on every row of the outer query \u2013 This method is relatively inefficient, and it is how Greenplum Database runs queries that contain CSQs in the SELECT list or are connected by OR conditions.\nThe following examples illustrate how to rewrite some of these types of queries to improve performance.\n\n\n\n\nExample 3 - CSQ in the Select List\n\n\nOriginal Query\n\n\nSELECT T1.a,\n      (SELECT COUNT(DISTINCT T2.z) FROM t2 WHERE t1.x = t2.y) dt2 \nFROM t1;\n\n\n\nRewrite this query to perform an inner join with t1 first and then perform a left join with t1 again. The rewrite applies for only an equijoin in the correlated condition.\n\n\nRewritten Query\n\n\nSELECT t1.a, dt2 FROM t1 \n       LEFT JOIN \n        (SELECT t2.y AS csq_y, COUNT(DISTINCT t2.z) AS dt2 \n              FROM t1, t2 WHERE t1.x = t2.y \n              GROUP BY t1.x) \n       ON (t1.x = csq_y);\n\n\n\nExample 4 - CSQs connected by OR Clauses\nOriginal Query\n\n\nSELECT * FROM t1 \nWHERE \nx \n (SELECT COUNT(*) FROM t2 WHERE t1.x = t2.x) \nOR x \n (SELECT COUNT(*) FROM t3 WHERE t1.y = t3.y)\n\n\n\nRewrite this query to separate it into two parts with a union on the OR conditions.\n\n\nRewritten Query\n\n\nSELECT * FROM t1 \nWHERE x \n (SELECT count(*) FROM t2 WHERE t1.x = t2.x) \nUNION \nSELECT * FROM t1 \nWHERE x \n (SELECT count(*) FROM t3 WHERE t1.y = t3.y)\n\n\n\nTo view the query plan, use EXPLAIN SELECT or EXPLAIN ANALYZE SELECT. Subplan nodes in the query plan indicate that the query will run on every row of the outer query, and the query is a candidate for rewriting. For more information about these statements, see Query Profiling.\n\n\nAdvanced Table Functions\n\n\nGreenplum Database supports table functions with TABLE value expressions. You can sort input rows for advanced table functions with an ORDER BY clause. You can redistribute them with a SCATTER BY clause to specify one or more columns or an expression for which rows with the specified characteristics are available to the same process. This usage is similar to using a DISTRIBUTED BY clause when creating a table, but the redistribution occurs when the query runs.\n\n\nThe following command uses the TABLE function with the SCATTER BY clause in the the GPText function gptext.index() to populate the index mytest.articles with data from the messages table:\n\n\nSELECT * FROM gptext.index(TABLE(SELECT * FROM messages \nSCATTER BY distrib_id), 'mytest.articles');\n\n\n\nNote:\nBased on the distribution of data, Greenplum Database automatically parallelizes table functions with TABLE value parameters over the nodes of the cluster.\n\n\nFor information about the function gptext.index(), see the Pivotal GPText documentation.\n\n\nArray Constructors\n\n\nAn array constructor is an expression that builds an array value from values for its member elements. A simple array constructor consists of the key word ARRAY, a left square bracket [, one or more expressions separated by commas for the array element values, and a right square bracket ]. For example,\n\n\nSELECT ARRAY[1,2,3+4];\n  array\n---------\n {1,2,7}\n\n\n\nThe array element type is the common type of its member expressions, determined using the same rules as for UNION or CASE constructs.\n\n\nYou can build multidimensional array values by nesting array constructors. In the inner constructors, you can omit the keyword ARRAY. For example, the following two SELECT statements produce the same result:\n\n\nSELECT ARRAY[ARRAY[1,2], ARRAY[3,4]];\nSELECT ARRAY[[1,2],[3,4]];\n     array\n---------------\n {{1,2},{3,4}}\n\n\n\nSince multidimensional arrays must be rectangular, inner constructors at the same level must produce sub-arrays of identical dimensions.\n\n\nMultidimensional array constructor elements are not limited to a sub-ARRAY construct; they are anything that produces an array of the proper kind. For example:\n\n\nCREATE TABLE arr(f1 int[], f2 int[]);\nINSERT INTO arr VALUES (ARRAY[[1,2],[3,4]], \nARRAY[[5,6],[7,8]]);\nSELECT ARRAY[f1, f2, '{{9,10},{11,12}}'::int[]] FROM arr;\n                     array\n------------------------------------------------\n {{{1,2},{3,4}},{{5,6},{7,8}},{{9,10},{11,12}}}\n\n\n\nYou can construct an array from the results of a subquery. Write the array constructor with the keyword ARRAY followed by a subquery in parentheses. For example:\n\n\nSELECT ARRAY(SELECT oid FROM pg_proc WHERE proname LIKE 'bytea%');\n                          ?column?\n-----------------------------------------------------------\n {2011,1954,1948,1952,1951,1244,1950,2005,1949,1953,2006,31}\n\n\n\nThe subquery must return a single column. The resulting one-dimensional array has an element for each row in the subquery result, with an element type matching that of the subquery's output column. The subscripts of an array value built with ARRAY always begin with 1.\n\n\nRow Constructors\n\n\nA row constructor is an expression that builds a row value (also called a composite value) from values for its member fields. For example,\n\n\nSELECT ROW(1,2.5,'this is a test');\n\n\n\nRow constructors have the syntax rowvalue.\n, which expands to a list of the elements of the row value, as when you use the syntax .\n at the top level of a SELECT list. For example, if table t has columns f1 and f2, the following queries are the same:\n\n\nSELECT ROW(t.*, 42) FROM t;\nSELECT ROW(t.f1, t.f2, 42) FROM t;\n\n\n\nBy default, the value created by a ROW expression has an anonymous record type. If necessary, it can be cast to a named composite type \u2014 either the row type of a table, or a composite type created with CREATE TYPE AS. To avoid ambiguity, you can explicitly cast the value if necessary. For example:\n\n\nCREATE TABLE mytable(f1 int, f2 float, f3 text);\nCREATE FUNCTION getf1(mytable) RETURNS int AS 'SELECT $1.f1' \nLANGUAGE SQL;\n\n\n\nIn the following query, you do not need to cast the value because there is only one getf1() function and therefore no ambiguity:\n\n\nSELECT getf1(ROW(1,2.5,'this is a test'));\n getf1\n-------\n     1\nCREATE TYPE myrowtype AS (f1 int, f2 text, f3 numeric);\nCREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT \n$1.f1' LANGUAGE SQL;\n\n\n\nNow we need a cast to indicate which function to call:\n\n\nSELECT getf1(ROW(1,2.5,'this is a test'));\nERROR:  function getf1(record) is not unique\nSELECT getf1(ROW(1,2.5,'this is a test')::mytable);\n getf1\n-------\n     1\nSELECT getf1(CAST(ROW(11,'this is a test',2.5) AS \nmyrowtype));\n getf1\n-------\n    11\n\n\n\nYou can use row constructors to build composite values to be stored in a composite-type table column or to be passed to a function that accepts a composite parameter.\n\n\nExpression Evaluation Rules\n\n\nThe order of evaluation of subexpressions is undefined. The inputs of an operator or function are not necessarily evaluated left-to-right or in any other fixed order.\n\n\nIf you can determine the result of an expression by evaluating only some parts of the expression, then other subexpressions might not be evaluated at all. For example, in the following expression:\n\n\nSELECT true OR somefunc();\n\n\n\nsomefunc() would probably not be called at all. The same is true in the following expression:\n\n\nSELECT somefunc() OR true;\n\n\n\nThis is not the same as the left-to-right evaluation order that Boolean operators enforce in some programming languages.\n\n\nDo not use functions with side effects as part of complex expressions, especially in WHERE and HAVING clauses, because those clauses are extensively reprocessed when developing an execution plan. Boolean expressions (AND/OR/NOT combinations) in those clauses can be reorganized in any manner that Boolean algebra laws allow.\n\n\nUse a CASE construct to force evaluation order. The following example is an untrustworthy way to avoid division by zero in a WHERE clause:\n\n\nSELECT ... WHERE x \n 0 AND y/x \n 1.5;\n\n\n\nThe following example shows a trustworthy evaluation order:\n\n\nSELECT ... WHERE CASE WHEN x \n 0 THEN y/x \n 1.5 ELSE false END;\n\n\n\nThis CASE construct usage defeats optimization attempts; use it only when necessary.\n\n\nUsing Functions and Operators\n\n\nGreenplum Database evaluates functions and operators used in SQL expressions. Some functions and operators are only allowed to execute on the master since they could lead to inconsistencies in segment databases.\n\n\nParent topic: Querying Data\n\n\nUsing Functions in Greenplum Database\n\n\n\n\n\n\n\n\nFunction Type\n\n\nGreenplum Support\n\n\nDescription\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nIMMUTABLE\n\n\nYes\n\n\nRelies only on information directly in its argument list. Given the same argument values, always returns the same result.\n\n\n\n\n\n\n\n\nSTABLE\n\n\nYes, in most cases\n\n\nWithin a single table scan, returns the same result for same argument values, but results change across SQL statements.\n\n\nResults depend on database lookups or parameter values. current_timestamp family of functions is STABLE; values do not change within an execution.\n\n\n\n\n\n\nVOLATILE\n\n\nRestricted\n\n\nFunction values can change within a single table scan. For example: random(), currval(), timeofday().\n\n\nAny function with side effects is volatile, even if its result is predictable. For example: setval().\n\n\n\n\n\n\n\n\nIn Greenplum Database, data is divided up across segments \u2014 each segment is a distinct PostgreSQL database. To prevent inconsistent or unexpected results, do not execute functions classified as VOLATILE at the segment level if they contain SQL commands or modify the database in any way. For example, functions such as setval() are not allowed to execute on distributed data in Greenplum Database because they can cause inconsistent data between segment instances.\n\n\nTo ensure data consistency, you can safely use VOLATILE and STABLE functions in statements that are evaluated on and run from the master. For example, the following statements run on the master (statements without a FROM clause):\n\n\nSELECT setval('myseq', 201);\nSELECT foo();\n\n\n\nIf a statement has a FROM clause containing a distributed table and the function in the FROM clause returns a set of rows, the statement can run on the segments:\n\n\nSELECT * from foo();\n\n\n\nGreenplum Database does not support functions that return a table reference (rangeFuncs) or functions that use the refCursor datatype.\n\n\nUser-Defined Functions\n\n\nGreenplum Database supports user-defined functions. See Extending SQL in the PostgreSQL documentation for more information.\n\n\nUse the CREATE FUNCTION statement to register user-defined functions that are used as described in Using Functions in Greenplum Database. By default, user-defined functions are declared as VOLATILE, so if your user-defined function is IMMUTABLE or STABLE, you must specify the correct volatility level when you register your function.\n\n\nWhen you create user-defined functions, avoid using fatal errors or destructive calls. Greenplum Database may respond to such errors with a sudden shutdown or restart.\n\n\nIn Greenplum Database, the shared library files for user-created functions must reside in the same library path location on every host in the Greenplum Database array (masters, segments, and mirrors).\n\n\nBuilt-in Functions and Operators\n\n\nThe following table lists the categories of built-in functions and operators supported by PostgreSQL. All functions and operators are supported in Greenplum Database as in PostgreSQL with the exception of STABLE and VOLATILE functions, which are subject to the restrictions noted in Using Functions in Greenplum Database. See the Functions and Operators section of the PostgreSQL documentation for more information about these built-in functions and operators.\n\n\nTODO", 
            "title": "\u67e5\u8be2\u6570\u636e"
        }, 
        {
            "location": "/management/management-quering-data/#querying-data", 
            "text": "This topic provides information about using SQL in Greenplum databases.\nYou enter SQL statements called queries to view, change, and analyze data in a database using the psql interactive SQL client and other client tools.   About Greenplum Query Processing  About the Pivotal Query Optimizer  Defining Queries  Using Functions and Operators  Query Performance  Managing Spill Files Generated by Queries  Query Profiling", 
            "title": "Querying Data"
        }, 
        {
            "location": "/management/management-quering-data/#about-greenplum-query-processing", 
            "text": "This topic provides an overview of how Greenplum Database processes queries. Understanding this process can be useful when writing and tuning queries.  Users issue queries to Greenplum Database as they would to any database management system. They connect to the database instance on the Greenplum master host using a client application such as psql and submit SQL statements.  Parent topic: Querying Data", 
            "title": "About Greenplum Query Processing"
        }, 
        {
            "location": "/management/management-quering-data/#understanding-query-planning-and-dispatch", 
            "text": "The master receives, parses, and optimizes the query. The resulting query plan is either parallel or targeted. The master dispatches parallel query plans to all segments, as shown in Figure 1. The master dispatches targeted query plans to a single segment, as shown in Figure 2. Each segment is responsible for executing local database operations on its own set of data.query plans  Most database operations\u2014such as table scans, joins, aggregations, and sorts\u2014execute across all segments in parallel. Each operation is performed on a segment database independent of the data stored in the other segment databases.", 
            "title": "Understanding Query Planning and Dispatch"
        }, 
        {
            "location": "/management/management-quering-data/#todo-pic", 
            "text": "Certain queries may access only data on a single segment, such as single-row INSERT, UPDATE, DELETE, or SELECT operations or queries that filter on the table distribution key column(s). In queries such as these, the query plan is not dispatched to all segments, but is targeted at the segment that contains the affected or relevant row(s).", 
            "title": "TODO pic"
        }, 
        {
            "location": "/management/management-quering-data/#todo-pic_1", 
            "text": "", 
            "title": "TODO pic"
        }, 
        {
            "location": "/management/management-quering-data/#understanding-greenplum-query-plans", 
            "text": "A query plan is the set of operations Greenplum Database will perform to produce the answer to a query. Each node or step in the plan represents a database operation such as a table scan, join, aggregation, or sort. Plans are read and executed from bottom to top.  In addition to common database operations such as tables scans, joins, and so on, Greenplum Database has an additional operation type called motion. A motion operation involves moving tuples between the segments during query processing. Note that not every query requires a motion. For example, a targeted query plan does not require data to move across the interconnect.  To achieve maximum parallelism during query execution, Greenplum divides the work of the query plan into slices. A slice is a portion of the plan that segments can work on independently. A query plan is sliced wherever a motion operation occurs in the plan, with one slice on each side of the motion.  For example, consider the following simple query involving a join between two tables:  SELECT customer, amount\nFROM sales JOIN customer USING (cust_id)\nWHERE dateCol = '04-30-2008';  Figure 3 shows the query plan. Each segment receives a copy of the query plan and works on it in parallel.  The query plan for this example has a redistribute motion that moves tuples between the segments to complete the join. The redistribute motion is necessary because the customer table is distributed across the segments by cust_id, but the sales table is distributed across the segments by sale_id. To perform the join, the sales tuples must be redistributed by cust_id. The plan is sliced on either side of the redistribute motion, creating slice 1 and slice 2.  This query plan has another type of motion operation called a gather motion. A gather motion is when the segments send results back up to the master for presentation to the client. Because a query plan is always sliced wherever a motion occurs, this plan also has an implicit slice at the very top of the plan (slice 3). Not all query plans involve a gather motion. For example, a CREATE TABLE x AS SELECT... statement would not have a gather motion because tuples are sent to the newly created table, not to the master.", 
            "title": "Understanding Greenplum Query Plans"
        }, 
        {
            "location": "/management/management-quering-data/#todo-pic_2", 
            "text": "", 
            "title": "TODO pic"
        }, 
        {
            "location": "/management/management-quering-data/#understanding-parallel-query-execution", 
            "text": "Greenplum creates a number of database processes to handle the work of a query. On the master, the query worker process is called the query dispatcher (QD). The QD is responsible for creating and dispatching the query plan. It also accumulates and presents the final results. On the segments, a query worker process is called a query executor (QE). A QE is responsible for completing its portion of work and communicating its intermediate results to the other worker processes.  There is at least one worker process assigned to each slice of the query plan. A worker process works on its assigned portion of the query plan independently. During query execution, each segment will have a number of processes working on the query in parallel.  Related processes that are working on the same slice of the query plan but on different segments are called gangs. As a portion of work is completed, tuples flow up the query plan from one gang of processes to the next. This inter-process communication between the segments is referred to as the interconnect component of Greenplum Database.  Figure 4 shows the query worker processes on the master and two segment instances for the query plan illustrated in Figure 3.", 
            "title": "Understanding Parallel Query Execution"
        }, 
        {
            "location": "/management/management-quering-data/#todo-pic_3", 
            "text": "", 
            "title": "TODO pic"
        }, 
        {
            "location": "/management/management-quering-data/#defining-queries", 
            "text": "Greenplum Database is based on the PostgreSQL implementation of the SQL standard.  This topic describes how to construct SQL queries in Greenplum Database.   SQL Lexicon  SQL Value Expressions\nParent topic: Querying Data", 
            "title": "Defining Queries"
        }, 
        {
            "location": "/management/management-quering-data/#sql-lexicon", 
            "text": "SQL is a standard language for accessing databases. The language consists of elements that enable data storage, retrieval, analysis, viewing, manipulation, and so on. You use SQL commands to construct queries and commands that the Greenplum Database engine understands. SQL queries consist of a sequence of commands. Commands consist of a sequence of valid tokens in correct syntax order, terminated by a semicolon (;).  For more information about SQL commands, see the Greenplum Database Reference Guide.  Greenplum Database uses PostgreSQL's structure and syntax, with some exceptions. For more information about SQL rules and concepts in PostgreSQL, see \"SQL Syntax\" in the PostgreSQL documentation.", 
            "title": "SQL Lexicon"
        }, 
        {
            "location": "/management/management-quering-data/#sql-value-expressions", 
            "text": "SQL value expressions consist of one or more values, symbols, operators, SQL functions, and data. The expressions compare data or perform calculations and return a value as the result. Calculations include logical, arithmetic, and set operations.  The following are value expressions:   An aggregate expression  An array constructor  A column reference  A constant or literal value  A correlated subquery  A field selection expression  A function call  A new column value in an INSERT or UPDATE  An operator invocation column reference  A positional parameter reference, in the body of a function definition or prepared statement  A row constructor  A scalar subquery  A search condition in a WHERE clause  A target list of a SELECT command  A type cast  A value expression in parentheses, useful to group sub-expressions and override precedence  A window expression\nSQL constructs such as functions and operators are expressions but do not follow any general syntax rules. For more information about these constructs, see Using Functions and Operators.", 
            "title": "SQL Value Expressions"
        }, 
        {
            "location": "/management/management-quering-data/#column-references", 
            "text": "A column reference has the form:  correlation.columnname  Here, correlation is the name of a table (possibly qualified with a schema name) or an alias for a table defined with a FROM clause or one of the keywords NEW or OLD. NEW and OLD can appear only in rewrite rules, but you can use other correlation names in any SQL statement. If the column name is unique across all tables in the query, you can omit the \"correlation.\" part of the column reference.", 
            "title": "Column References"
        }, 
        {
            "location": "/management/management-quering-data/#positional-parameters", 
            "text": "Positional parameters are arguments to SQL statements or functions that you reference by their positions in a series of arguments. For example, $1 refers to the first argument, $2 to the second argument, and so on. The values of positional parameters are set from arguments external to the SQL statement or supplied when SQL functions are invoked. Some client libraries support specifying data values separately from the SQL command, in which case parameters refer to the out-of-line data values. A parameter reference has the form:  $number  For example:  CREATE FUNCTION dept(text) RETURNS dept\n    AS $$ SELECT * FROM dept WHERE name = $1 $$\n    LANGUAGE SQL;  Here, the $1 references the value of the first function argument whenever the function is invoked.", 
            "title": "Positional Parameters"
        }, 
        {
            "location": "/management/management-quering-data/#subscripts", 
            "text": "If an expression yields a value of an array type, you can extract a specific element of the array value as follows:  expression[subscript]  You can extract multiple adjacent elements, called an array slice, as follows (including the brackets):  expression[lower_subscript:upper_subscript]  Each subscript is an expression and yields an integer value.  Array expressions usually must be in parentheses, but you can omit the parentheses when the expression to be subscripted is a column reference or positional parameter. You can concatenate multiple subscripts when the original array is multidimensional. For example (including the parentheses):  mytable.arraycolumn[4]\nmytable.two_d_column[17][34]\n$1[10:42]\n(arrayfunction(a,b))[42]", 
            "title": "Subscripts"
        }, 
        {
            "location": "/management/management-quering-data/#field-selection", 
            "text": "If an expression yields a value of a composite type (row type), you can extract a specific field of the row as follows:  expression.fieldname  The row expression usually must be in parentheses, but you can omit these parentheses when the expression to be selected from is a table reference or positional parameter. For example:  mytable.mycolumn\n$1.somecolumn\n(rowfunction(a,b)).col3  A qualified column reference is a special case of field selection syntax.", 
            "title": "Field Selection"
        }, 
        {
            "location": "/management/management-quering-data/#operator-invocations", 
            "text": "Operator invocations have the following possible syntaxes:  expression operator expression(binary infix operator)\noperator expression(unary prefix operator)\nexpression operator(unary postfix operator)  Where operator is an operator token, one of the key words AND, OR, or NOT, or qualified operator name in the form:  OPERATOR(schema.operatorname)  Available operators and whether they are unary or binary depends on the operators that the system or user defines. For more information about built-in operators, see Built-in Functions and Operators.", 
            "title": "Operator Invocations"
        }, 
        {
            "location": "/management/management-quering-data/#function-calls", 
            "text": "The syntax for a function call is the name of a function (possibly qualified with a schema name), followed by its argument list enclosed in parentheses:  function ([expression [, expression ... ]])  For example, the following function call computes the square root of 2:  sqrt(2)  See the Greenplum Database Reference Guide for lists of the built-in functions by category. You can add custom functions, too.", 
            "title": "Function Calls"
        }, 
        {
            "location": "/management/management-quering-data/#aggregate-expressions", 
            "text": "An aggregate expression applies an aggregate function across the rows that a query selects. An aggregate function performs a calculation on a set of values and returns a single value, such as the sum or average of the set of values. The syntax of an aggregate expression is one of the following:   aggregate_name(expression [ , ... ] ) \u2014 operates across all input rows for which the expected result value is non-null. ALL is the default.  aggregate_name(ALL expression [ , ... ] ) \u2014 operates identically to the first form because ALL is the default.  aggregate_name(DISTINCT expression [ , ... ] ) \u2014 operates across all distinct non-null values of input rows.  aggregate_name( ) \u2014 operates on all rows with values both null and non-null. Generally, this form is most useful for the count( ) aggregate function.\nWhere aggregate_name is a previously defined aggregate (possibly schema-qualified) and expression is any value expression that does not contain an aggregate expression.   For example, count(*) yields the total number of input rows, count(f1) yields the number of input rows in which f1 is non-null, and count(distinct f1) yields the number of distinct non-null values of f1.  For predefined aggregate functions, see Built-in Functions and Operators. You can also add custom aggregate functions.  Greenplum Database provides the MEDIAN aggregate function, which returns the fiftieth percentile of the PERCENTILE_CONT result and special aggregate expressions for inverse distribution functions as follows:  PERCENTILE_CONT(_percentage_) WITHIN GROUP (ORDER BY _expression_)\nPERCENTILE_DISC(_percentage_) WITHIN GROUP (ORDER BY _expression_)  Currently you can use only these two expressions with the keyword WITHIN GROUP.", 
            "title": "Aggregate Expressions"
        }, 
        {
            "location": "/management/management-quering-data/#limitations-of-aggregate-expressions", 
            "text": "The following are current limitations of the aggregate expressions:   Greenplum Database does not support the following keywords: ALL, DISTINCT, FILTER and OVER. See Table 5 for more details.  An aggregate expression can appear only in the result list or HAVING clause of a SELECT command. It is forbidden in other clauses, such as WHERE, because those clauses are logically evaluated before the results of aggregates form. This restriction applies to the query level to which the aggregate belongs.  When an aggregate expression appears in a subquery, the aggregate is normally evaluated over the rows of the subquery. If the aggregate's arguments contain only outer-level variables, the aggregate belongs to the nearest such outer level and evaluates over the rows of that query. The aggregate expression as a whole is then an outer reference for the subquery in which it appears, and the aggregate expression acts as a constant over any one evaluation of that subquery. See Scalar Subqueries and Table 2.  Greenplum Database does not support DISTINCT with multiple input expressions.", 
            "title": "Limitations of Aggregate Expressions"
        }, 
        {
            "location": "/management/management-quering-data/#window-expressions", 
            "text": "Window expressions allow application developers to more easily compose complex online analytical processing (OLAP) queries using standard SQL commands. For example, with window expressions, users can calculate moving averages or sums over various intervals, reset aggregations and ranks as selected column values change, and express complex ratios in simple terms.  A window expression represents the application of a window function applied to a window frame, which is defined in a special OVER() clause. A window partition is a set of rows that are grouped together to apply a window function. Unlike aggregate functions, which return a result value for each group of rows, window functions return a result value for every row, but that value is calculated with respect to the rows in a particular window partition. If no partition is specified, the window function is computed over the complete intermediate result set.  The syntax of a window expression is:  window_function ( [expression [, ...]] ) OVER ( window_specification )  Where window_function is one of the functions listed in Table 3, expression is any value expression that does not contain a window expression, and window_specification is:  [window_name]\n[PARTITION BY expression [, ...]]\n[[ORDER BY expression [ASC | DESC | USING operator] [, ...]\n    [{RANGE | ROWS} \n       { UNBOUNDED PRECEDING\n       | expression PRECEDING\n       | CURRENT ROW\n       | BETWEEN window_frame_bound AND window_frame_bound }]]  and where window_frame_bound can be one of:      UNBOUNDED PRECEDING\n    expression PRECEDING\n    CURRENT ROW\n    expression FOLLOWING\n    UNBOUNDED FOLLOWING  A window expression can appear only in the select list of a SELECT command. For example:  SELECT count(*) OVER(PARTITION BY customer_id), * FROM sales;  The OVER clause differentiates window functions from other aggregate or reporting functions. The OVER clause defines the window_specification to which the window function is applied. A window specification has the following characteristics:   The PARTITION BY clause defines the window partitions to which the window function is applied. If omitted, the entire result set is treated as one partition.   The ORDER BY clause defines the expression(s) for sorting rows within a window partition. The ORDER BY clause of a window specification is separate and distinct from the ORDER BY clause of a regular query expression. The ORDER BY clause is required for the window functions that calculate rankings, as it identifies the measure(s) for the ranking values. For OLAP aggregations, the ORDER BY clause is required to use window frames (the ROWS | RANGE clause).  Note: Columns of data types without a coherent ordering, such as time, are not good candidates for use in the ORDER BY clause of a window specification. Time, with or without a specified time zone, lacks a coherent ordering because addition and subtraction do not have the expected effects. For example, the following is not generally true: x::time   x::time + '2 hour'::interval    The ROWS/RANGE clause defines a window frame for aggregate (non-ranking) window functions. A window frame defines a set of rows within a window partition. When a window frame is defined, the window function computes on the contents of this moving frame rather than the fixed contents of the entire window partition. Window frames are row-based (ROWS) or value-based (RANGE).", 
            "title": "Window Expressions"
        }, 
        {
            "location": "/management/management-quering-data/#type-casts", 
            "text": "A type cast specifies a conversion from one data type to another. Greenplum Database accepts two equivalent syntaxes for type casts:  CAST ( expression AS type )\nexpression::type  The CAST syntax conforms to SQL; the syntax with :: is historical PostgreSQL usage.  A cast applied to a value expression of a known type is a run-time type conversion. The cast succeeds only if a suitable type conversion function is defined. This differs from the use of casts with constants. A cast applied to a string literal represents the initial assignment of a type to a literal constant value, so it succeeds for any type if the contents of the string literal are acceptable input syntax for the data type.  You can usually omit an explicit type cast if there is no ambiguity about the type a value expression must produce; for example, when it is assigned to a table column, the system automatically applies a type cast. The system applies automatic casting only to casts marked \"OK to apply implicitly\" in system catalogs. Other casts must be invoked with explicit casting syntax to prevent unexpected conversions from being applied without the user's knowledge.", 
            "title": "Type Casts"
        }, 
        {
            "location": "/management/management-quering-data/#scalar-subqueries", 
            "text": "A scalar subquery is a SELECT query in parentheses that returns exactly one row with one column. Do not use a SELECT query that returns multiple rows or columns as a scalar subquery. The query runs and uses the returned value in the surrounding value expression. A correlated scalar subquery contains references to the outer query block.", 
            "title": "Scalar Subqueries"
        }, 
        {
            "location": "/management/management-quering-data/#correlated-subqueries", 
            "text": "A correlated subquery (CSQ) is a SELECT query with a WHERE clause or target list that contains references to the parent outer clause. CSQs efficiently express results in terms of results of another query. Greenplum Database supports correlated subqueries that provide compatibility with many existing applications. A CSQ is a scalar or table subquery, depending on whether it returns one or multiple rows. Greenplum Database does not support correlated subqueries with skip-level correlations.  Correlated Subquery Examples\nExample 1 \u2013 Scalar correlated subquery  SELECT * FROM t1 WHERE t1.x \n              (SELECT MAX(t2.x) FROM t2 WHERE t2.y = t1.y);  Example 2 \u2013 Correlated EXISTS subquery  SELECT * FROM t1 WHERE \nEXISTS (SELECT 1 FROM t2 WHERE t2.x = t1.x);  Greenplum Database uses one of the following methods to run CSQs:   Unnest the CSQ into join operations \u2013 This method is most efficient, and it is how Greenplum Database runs most CSQs, including queries from the TPC-H benchmark.  Run the CSQ on every row of the outer query \u2013 This method is relatively inefficient, and it is how Greenplum Database runs queries that contain CSQs in the SELECT list or are connected by OR conditions.\nThe following examples illustrate how to rewrite some of these types of queries to improve performance.   Example 3 - CSQ in the Select List  Original Query  SELECT T1.a,\n      (SELECT COUNT(DISTINCT T2.z) FROM t2 WHERE t1.x = t2.y) dt2 \nFROM t1;  Rewrite this query to perform an inner join with t1 first and then perform a left join with t1 again. The rewrite applies for only an equijoin in the correlated condition.  Rewritten Query  SELECT t1.a, dt2 FROM t1 \n       LEFT JOIN \n        (SELECT t2.y AS csq_y, COUNT(DISTINCT t2.z) AS dt2 \n              FROM t1, t2 WHERE t1.x = t2.y \n              GROUP BY t1.x) \n       ON (t1.x = csq_y);  Example 4 - CSQs connected by OR Clauses\nOriginal Query  SELECT * FROM t1 \nWHERE \nx   (SELECT COUNT(*) FROM t2 WHERE t1.x = t2.x) \nOR x   (SELECT COUNT(*) FROM t3 WHERE t1.y = t3.y)  Rewrite this query to separate it into two parts with a union on the OR conditions.  Rewritten Query  SELECT * FROM t1 \nWHERE x   (SELECT count(*) FROM t2 WHERE t1.x = t2.x) \nUNION \nSELECT * FROM t1 \nWHERE x   (SELECT count(*) FROM t3 WHERE t1.y = t3.y)  To view the query plan, use EXPLAIN SELECT or EXPLAIN ANALYZE SELECT. Subplan nodes in the query plan indicate that the query will run on every row of the outer query, and the query is a candidate for rewriting. For more information about these statements, see Query Profiling.", 
            "title": "Correlated Subqueries"
        }, 
        {
            "location": "/management/management-quering-data/#advanced-table-functions", 
            "text": "Greenplum Database supports table functions with TABLE value expressions. You can sort input rows for advanced table functions with an ORDER BY clause. You can redistribute them with a SCATTER BY clause to specify one or more columns or an expression for which rows with the specified characteristics are available to the same process. This usage is similar to using a DISTRIBUTED BY clause when creating a table, but the redistribution occurs when the query runs.  The following command uses the TABLE function with the SCATTER BY clause in the the GPText function gptext.index() to populate the index mytest.articles with data from the messages table:  SELECT * FROM gptext.index(TABLE(SELECT * FROM messages \nSCATTER BY distrib_id), 'mytest.articles');  Note:\nBased on the distribution of data, Greenplum Database automatically parallelizes table functions with TABLE value parameters over the nodes of the cluster.  For information about the function gptext.index(), see the Pivotal GPText documentation.", 
            "title": "Advanced Table Functions"
        }, 
        {
            "location": "/management/management-quering-data/#array-constructors", 
            "text": "An array constructor is an expression that builds an array value from values for its member elements. A simple array constructor consists of the key word ARRAY, a left square bracket [, one or more expressions separated by commas for the array element values, and a right square bracket ]. For example,  SELECT ARRAY[1,2,3+4];\n  array\n---------\n {1,2,7}  The array element type is the common type of its member expressions, determined using the same rules as for UNION or CASE constructs.  You can build multidimensional array values by nesting array constructors. In the inner constructors, you can omit the keyword ARRAY. For example, the following two SELECT statements produce the same result:  SELECT ARRAY[ARRAY[1,2], ARRAY[3,4]];\nSELECT ARRAY[[1,2],[3,4]];\n     array\n---------------\n {{1,2},{3,4}}  Since multidimensional arrays must be rectangular, inner constructors at the same level must produce sub-arrays of identical dimensions.  Multidimensional array constructor elements are not limited to a sub-ARRAY construct; they are anything that produces an array of the proper kind. For example:  CREATE TABLE arr(f1 int[], f2 int[]);\nINSERT INTO arr VALUES (ARRAY[[1,2],[3,4]], \nARRAY[[5,6],[7,8]]);\nSELECT ARRAY[f1, f2, '{{9,10},{11,12}}'::int[]] FROM arr;\n                     array\n------------------------------------------------\n {{{1,2},{3,4}},{{5,6},{7,8}},{{9,10},{11,12}}}  You can construct an array from the results of a subquery. Write the array constructor with the keyword ARRAY followed by a subquery in parentheses. For example:  SELECT ARRAY(SELECT oid FROM pg_proc WHERE proname LIKE 'bytea%');\n                          ?column?\n-----------------------------------------------------------\n {2011,1954,1948,1952,1951,1244,1950,2005,1949,1953,2006,31}  The subquery must return a single column. The resulting one-dimensional array has an element for each row in the subquery result, with an element type matching that of the subquery's output column. The subscripts of an array value built with ARRAY always begin with 1.", 
            "title": "Array Constructors"
        }, 
        {
            "location": "/management/management-quering-data/#row-constructors", 
            "text": "A row constructor is an expression that builds a row value (also called a composite value) from values for its member fields. For example,  SELECT ROW(1,2.5,'this is a test');  Row constructors have the syntax rowvalue. , which expands to a list of the elements of the row value, as when you use the syntax .  at the top level of a SELECT list. For example, if table t has columns f1 and f2, the following queries are the same:  SELECT ROW(t.*, 42) FROM t;\nSELECT ROW(t.f1, t.f2, 42) FROM t;  By default, the value created by a ROW expression has an anonymous record type. If necessary, it can be cast to a named composite type \u2014 either the row type of a table, or a composite type created with CREATE TYPE AS. To avoid ambiguity, you can explicitly cast the value if necessary. For example:  CREATE TABLE mytable(f1 int, f2 float, f3 text);\nCREATE FUNCTION getf1(mytable) RETURNS int AS 'SELECT $1.f1' \nLANGUAGE SQL;  In the following query, you do not need to cast the value because there is only one getf1() function and therefore no ambiguity:  SELECT getf1(ROW(1,2.5,'this is a test'));\n getf1\n-------\n     1\nCREATE TYPE myrowtype AS (f1 int, f2 text, f3 numeric);\nCREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT \n$1.f1' LANGUAGE SQL;  Now we need a cast to indicate which function to call:  SELECT getf1(ROW(1,2.5,'this is a test'));\nERROR:  function getf1(record) is not unique\nSELECT getf1(ROW(1,2.5,'this is a test')::mytable);\n getf1\n-------\n     1\nSELECT getf1(CAST(ROW(11,'this is a test',2.5) AS \nmyrowtype));\n getf1\n-------\n    11  You can use row constructors to build composite values to be stored in a composite-type table column or to be passed to a function that accepts a composite parameter.", 
            "title": "Row Constructors"
        }, 
        {
            "location": "/management/management-quering-data/#expression-evaluation-rules", 
            "text": "The order of evaluation of subexpressions is undefined. The inputs of an operator or function are not necessarily evaluated left-to-right or in any other fixed order.  If you can determine the result of an expression by evaluating only some parts of the expression, then other subexpressions might not be evaluated at all. For example, in the following expression:  SELECT true OR somefunc();  somefunc() would probably not be called at all. The same is true in the following expression:  SELECT somefunc() OR true;  This is not the same as the left-to-right evaluation order that Boolean operators enforce in some programming languages.  Do not use functions with side effects as part of complex expressions, especially in WHERE and HAVING clauses, because those clauses are extensively reprocessed when developing an execution plan. Boolean expressions (AND/OR/NOT combinations) in those clauses can be reorganized in any manner that Boolean algebra laws allow.  Use a CASE construct to force evaluation order. The following example is an untrustworthy way to avoid division by zero in a WHERE clause:  SELECT ... WHERE x   0 AND y/x   1.5;  The following example shows a trustworthy evaluation order:  SELECT ... WHERE CASE WHEN x   0 THEN y/x   1.5 ELSE false END;  This CASE construct usage defeats optimization attempts; use it only when necessary.", 
            "title": "Expression Evaluation Rules"
        }, 
        {
            "location": "/management/management-quering-data/#using-functions-and-operators", 
            "text": "Greenplum Database evaluates functions and operators used in SQL expressions. Some functions and operators are only allowed to execute on the master since they could lead to inconsistencies in segment databases.  Parent topic: Querying Data", 
            "title": "Using Functions and Operators"
        }, 
        {
            "location": "/management/management-quering-data/#using-functions-in-greenplum-database", 
            "text": "Function Type  Greenplum Support  Description  Comments      IMMUTABLE  Yes  Relies only on information directly in its argument list. Given the same argument values, always returns the same result.     STABLE  Yes, in most cases  Within a single table scan, returns the same result for same argument values, but results change across SQL statements.  Results depend on database lookups or parameter values. current_timestamp family of functions is STABLE; values do not change within an execution.    VOLATILE  Restricted  Function values can change within a single table scan. For example: random(), currval(), timeofday().  Any function with side effects is volatile, even if its result is predictable. For example: setval().     In Greenplum Database, data is divided up across segments \u2014 each segment is a distinct PostgreSQL database. To prevent inconsistent or unexpected results, do not execute functions classified as VOLATILE at the segment level if they contain SQL commands or modify the database in any way. For example, functions such as setval() are not allowed to execute on distributed data in Greenplum Database because they can cause inconsistent data between segment instances.  To ensure data consistency, you can safely use VOLATILE and STABLE functions in statements that are evaluated on and run from the master. For example, the following statements run on the master (statements without a FROM clause):  SELECT setval('myseq', 201);\nSELECT foo();  If a statement has a FROM clause containing a distributed table and the function in the FROM clause returns a set of rows, the statement can run on the segments:  SELECT * from foo();  Greenplum Database does not support functions that return a table reference (rangeFuncs) or functions that use the refCursor datatype.", 
            "title": "Using Functions in Greenplum Database"
        }, 
        {
            "location": "/management/management-quering-data/#user-defined-functions", 
            "text": "Greenplum Database supports user-defined functions. See Extending SQL in the PostgreSQL documentation for more information.  Use the CREATE FUNCTION statement to register user-defined functions that are used as described in Using Functions in Greenplum Database. By default, user-defined functions are declared as VOLATILE, so if your user-defined function is IMMUTABLE or STABLE, you must specify the correct volatility level when you register your function.  When you create user-defined functions, avoid using fatal errors or destructive calls. Greenplum Database may respond to such errors with a sudden shutdown or restart.  In Greenplum Database, the shared library files for user-created functions must reside in the same library path location on every host in the Greenplum Database array (masters, segments, and mirrors).", 
            "title": "User-Defined Functions"
        }, 
        {
            "location": "/management/management-quering-data/#built-in-functions-and-operators", 
            "text": "The following table lists the categories of built-in functions and operators supported by PostgreSQL. All functions and operators are supported in Greenplum Database as in PostgreSQL with the exception of STABLE and VOLATILE functions, which are subject to the restrictions noted in Using Functions in Greenplum Database. See the Functions and Operators section of the PostgreSQL documentation for more information about these built-in functions and operators.", 
            "title": "Built-in Functions and Operators"
        }, 
        {
            "location": "/management/management-quering-data/#todo", 
            "text": "", 
            "title": "TODO"
        }, 
        {
            "location": "/sql-ref/", 
            "text": "SQL \u547d\u4ee4\u53c2\u8003\n\n\nSQL \u8bed\u6cd5\u5217\u8868\n\n\nABORT\n\n\nALTER AGGREGATE\n\n\nALTER CONVERSION\n\n\nALTER DATABASE\n\n\nALTER DOMAIN\n\n\nALTER EXTERNAL TABLE\n\n\nALTER FILESPACE\n\n\nALTER FUNCTION\n\n\nALTER GROUP\n\n\nALTER INDEX\n\n\nALTER LANGUAGE\n\n\nALTER OPERATOR\n\n\nALTER OPERATOR CLASS\n\n\nALTER PROTOCOL\n\n\nALTER RESOURCE QUEUE\n\n\nALTER ROLE\n\n\nALTER SCHEMA\n\n\nALTER SEQUENCE\n\n\nALTER TABLE\n\n\nALTER TABLESPACE\n\n\nALTER TYPE\n\n\nALTER USER\n\n\nANALYZE\n\n\nBEGIN\n\n\nCHECKPOINT\n\n\nCLOSE\n\n\nCLUSTER\n\n\nCOMMENT\n\n\nCOMMIT\n\n\nCOPY\n\n\nCREATE AGGREGATE\n\n\nCREATE CAST\n\n\nCREATE CONVERSION\n\n\nCREATE DATABASE\n\n\nCREATE DOMAIN\n\n\nCREATE EXTERNAL TABLE\n\n\nCREATE FUNCTION\n\n\nCREATE GROUP\n\n\nCREATE INDEX\n\n\nCREATE LANGUAGE\n\n\nCREATE OPERATOR\n\n\nCREATE OPERATOR CLASS\n\n\nCREATE RESOURCE QUEUE\n\n\nCREATE ROLE\n\n\nCREATE RULE\n\n\nCREATE SCHEMA\n\n\nCREATE SEQUENCE\n\n\nCREATE TABLE\n\n\nCREATE TABLE AS\n\n\nCREATE TABLESPACE\n\n\nCREATE TYPE\n\n\nCREATE USER\n\n\nCREATE VIEW\n\n\nDEALLOCATE\n\n\nDECLARE\n\n\nDELETE\n\n\nDROP AGGREGATE\n\n\nDROP CAST\n\n\nDROP CONVERSION\n\n\nDROP DATABASE\n\n\nDROP DOMAIN\n\n\nDROP EXTERNAL TABLE\n\n\nDROP FILESPACE\n\n\nDROP FUNCTION\n\n\nDROP GROUP\n\n\nDROP INDEX\n\n\nDROP LANGUAGE\n\n\nDROP OPERATOR\n\n\nDROP OPERATOR CLASS\n\n\nDROP OWNED\n\n\nDROP RESOURCE QUEUE\n\n\nDROP ROLE\n\n\nDROP RULE\n\n\nDROP SCHEMA\n\n\nDROP SEQUENCE\n\n\nDROP TABLE\n\n\nDROP TABLESPACE\n\n\nDROP TYPE\n\n\nDROP USER\n\n\nDROP VIEW\n\n\nEND\n\n\nEXECUTE\n\n\nEXPLAIN\n\n\nFETCH\n\n\nGRANT\n\n\nINSERT\n\n\nLOAD\n\n\nLOCK\n\n\nMOVE\n\n\nPREPARE\n\n\nREASSIGN OWNED\n\n\nREINDEX\n\n\nRELEASE SAVEPOINT\n\n\nRESET\n\n\nREVOKE\n\n\nROLLBACK\n\n\nROLLBACK TO SAVEPOINT\n\n\nSAVEPOINT\n\n\nSELECT\n\n\nSELECT INTO\n\n\nSET\n\n\nSET ROLE\n\n\nSET SESSION AUTHORIZATION\n\n\nSET TRANSACTION\n\n\nSHOW\n\n\nSTART TRANSACTION\n\n\nTRUNCATE\n\n\nUPDATE\n\n\nVACUUM\n\n\nVALUES", 
            "title": "SQL\u547d\u4ee4\u53c2\u8003"
        }, 
        {
            "location": "/sql-ref/#sql", 
            "text": "", 
            "title": "SQL \u547d\u4ee4\u53c2\u8003"
        }, 
        {
            "location": "/sql-ref/#sql_1", 
            "text": "", 
            "title": "SQL \u8bed\u6cd5\u5217\u8868"
        }, 
        {
            "location": "/sql-ref/#abort", 
            "text": "", 
            "title": "ABORT"
        }, 
        {
            "location": "/sql-ref/#alter-aggregate", 
            "text": "", 
            "title": "ALTER AGGREGATE"
        }, 
        {
            "location": "/sql-ref/#alter-conversion", 
            "text": "", 
            "title": "ALTER CONVERSION"
        }, 
        {
            "location": "/sql-ref/#alter-database", 
            "text": "", 
            "title": "ALTER DATABASE"
        }, 
        {
            "location": "/sql-ref/#alter-domain", 
            "text": "", 
            "title": "ALTER DOMAIN"
        }, 
        {
            "location": "/sql-ref/#alter-external-table", 
            "text": "", 
            "title": "ALTER EXTERNAL TABLE"
        }, 
        {
            "location": "/sql-ref/#alter-filespace", 
            "text": "", 
            "title": "ALTER FILESPACE"
        }, 
        {
            "location": "/sql-ref/#alter-function", 
            "text": "", 
            "title": "ALTER FUNCTION"
        }, 
        {
            "location": "/sql-ref/#alter-group", 
            "text": "", 
            "title": "ALTER GROUP"
        }, 
        {
            "location": "/sql-ref/#alter-index", 
            "text": "", 
            "title": "ALTER INDEX"
        }, 
        {
            "location": "/sql-ref/#alter-language", 
            "text": "", 
            "title": "ALTER LANGUAGE"
        }, 
        {
            "location": "/sql-ref/#alter-operator", 
            "text": "", 
            "title": "ALTER OPERATOR"
        }, 
        {
            "location": "/sql-ref/#alter-operator-class", 
            "text": "", 
            "title": "ALTER OPERATOR CLASS"
        }, 
        {
            "location": "/sql-ref/#alter-protocol", 
            "text": "", 
            "title": "ALTER PROTOCOL"
        }, 
        {
            "location": "/sql-ref/#alter-resource-queue", 
            "text": "", 
            "title": "ALTER RESOURCE QUEUE"
        }, 
        {
            "location": "/sql-ref/#alter-role", 
            "text": "", 
            "title": "ALTER ROLE"
        }, 
        {
            "location": "/sql-ref/#alter-schema", 
            "text": "", 
            "title": "ALTER SCHEMA"
        }, 
        {
            "location": "/sql-ref/#alter-sequence", 
            "text": "", 
            "title": "ALTER SEQUENCE"
        }, 
        {
            "location": "/sql-ref/#alter-table", 
            "text": "", 
            "title": "ALTER TABLE"
        }, 
        {
            "location": "/sql-ref/#alter-tablespace", 
            "text": "", 
            "title": "ALTER TABLESPACE"
        }, 
        {
            "location": "/sql-ref/#alter-type", 
            "text": "", 
            "title": "ALTER TYPE"
        }, 
        {
            "location": "/sql-ref/#alter-user", 
            "text": "", 
            "title": "ALTER USER"
        }, 
        {
            "location": "/sql-ref/#analyze", 
            "text": "", 
            "title": "ANALYZE"
        }, 
        {
            "location": "/sql-ref/#begin", 
            "text": "", 
            "title": "BEGIN"
        }, 
        {
            "location": "/sql-ref/#checkpoint", 
            "text": "", 
            "title": "CHECKPOINT"
        }, 
        {
            "location": "/sql-ref/#close", 
            "text": "", 
            "title": "CLOSE"
        }, 
        {
            "location": "/sql-ref/#cluster", 
            "text": "", 
            "title": "CLUSTER"
        }, 
        {
            "location": "/sql-ref/#comment", 
            "text": "", 
            "title": "COMMENT"
        }, 
        {
            "location": "/sql-ref/#commit", 
            "text": "", 
            "title": "COMMIT"
        }, 
        {
            "location": "/sql-ref/#copy", 
            "text": "", 
            "title": "COPY"
        }, 
        {
            "location": "/sql-ref/#create-aggregate", 
            "text": "", 
            "title": "CREATE AGGREGATE"
        }, 
        {
            "location": "/sql-ref/#create-cast", 
            "text": "", 
            "title": "CREATE CAST"
        }, 
        {
            "location": "/sql-ref/#create-conversion", 
            "text": "", 
            "title": "CREATE CONVERSION"
        }, 
        {
            "location": "/sql-ref/#create-database", 
            "text": "", 
            "title": "CREATE DATABASE"
        }, 
        {
            "location": "/sql-ref/#create-domain", 
            "text": "", 
            "title": "CREATE DOMAIN"
        }, 
        {
            "location": "/sql-ref/#create-external-table", 
            "text": "", 
            "title": "CREATE EXTERNAL TABLE"
        }, 
        {
            "location": "/sql-ref/#create-function", 
            "text": "", 
            "title": "CREATE FUNCTION"
        }, 
        {
            "location": "/sql-ref/#create-group", 
            "text": "", 
            "title": "CREATE GROUP"
        }, 
        {
            "location": "/sql-ref/#create-index", 
            "text": "", 
            "title": "CREATE INDEX"
        }, 
        {
            "location": "/sql-ref/#create-language", 
            "text": "", 
            "title": "CREATE LANGUAGE"
        }, 
        {
            "location": "/sql-ref/#create-operator", 
            "text": "", 
            "title": "CREATE OPERATOR"
        }, 
        {
            "location": "/sql-ref/#create-operator-class", 
            "text": "", 
            "title": "CREATE OPERATOR CLASS"
        }, 
        {
            "location": "/sql-ref/#create-resource-queue", 
            "text": "", 
            "title": "CREATE RESOURCE QUEUE"
        }, 
        {
            "location": "/sql-ref/#create-role", 
            "text": "", 
            "title": "CREATE ROLE"
        }, 
        {
            "location": "/sql-ref/#create-rule", 
            "text": "", 
            "title": "CREATE RULE"
        }, 
        {
            "location": "/sql-ref/#create-schema", 
            "text": "", 
            "title": "CREATE SCHEMA"
        }, 
        {
            "location": "/sql-ref/#create-sequence", 
            "text": "", 
            "title": "CREATE SEQUENCE"
        }, 
        {
            "location": "/sql-ref/#create-table", 
            "text": "", 
            "title": "CREATE TABLE"
        }, 
        {
            "location": "/sql-ref/#create-table-as", 
            "text": "", 
            "title": "CREATE TABLE AS"
        }, 
        {
            "location": "/sql-ref/#create-tablespace", 
            "text": "", 
            "title": "CREATE TABLESPACE"
        }, 
        {
            "location": "/sql-ref/#create-type", 
            "text": "", 
            "title": "CREATE TYPE"
        }, 
        {
            "location": "/sql-ref/#create-user", 
            "text": "", 
            "title": "CREATE USER"
        }, 
        {
            "location": "/sql-ref/#create-view", 
            "text": "", 
            "title": "CREATE VIEW"
        }, 
        {
            "location": "/sql-ref/#deallocate", 
            "text": "", 
            "title": "DEALLOCATE"
        }, 
        {
            "location": "/sql-ref/#declare", 
            "text": "", 
            "title": "DECLARE"
        }, 
        {
            "location": "/sql-ref/#delete", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/sql-ref/#drop-aggregate", 
            "text": "", 
            "title": "DROP AGGREGATE"
        }, 
        {
            "location": "/sql-ref/#drop-cast", 
            "text": "", 
            "title": "DROP CAST"
        }, 
        {
            "location": "/sql-ref/#drop-conversion", 
            "text": "", 
            "title": "DROP CONVERSION"
        }, 
        {
            "location": "/sql-ref/#drop-database", 
            "text": "", 
            "title": "DROP DATABASE"
        }, 
        {
            "location": "/sql-ref/#drop-domain", 
            "text": "", 
            "title": "DROP DOMAIN"
        }, 
        {
            "location": "/sql-ref/#drop-external-table", 
            "text": "", 
            "title": "DROP EXTERNAL TABLE"
        }, 
        {
            "location": "/sql-ref/#drop-filespace", 
            "text": "", 
            "title": "DROP FILESPACE"
        }, 
        {
            "location": "/sql-ref/#drop-function", 
            "text": "", 
            "title": "DROP FUNCTION"
        }, 
        {
            "location": "/sql-ref/#drop-group", 
            "text": "", 
            "title": "DROP GROUP"
        }, 
        {
            "location": "/sql-ref/#drop-index", 
            "text": "", 
            "title": "DROP INDEX"
        }, 
        {
            "location": "/sql-ref/#drop-language", 
            "text": "", 
            "title": "DROP LANGUAGE"
        }, 
        {
            "location": "/sql-ref/#drop-operator", 
            "text": "", 
            "title": "DROP OPERATOR"
        }, 
        {
            "location": "/sql-ref/#drop-operator-class", 
            "text": "", 
            "title": "DROP OPERATOR CLASS"
        }, 
        {
            "location": "/sql-ref/#drop-owned", 
            "text": "", 
            "title": "DROP OWNED"
        }, 
        {
            "location": "/sql-ref/#drop-resource-queue", 
            "text": "", 
            "title": "DROP RESOURCE QUEUE"
        }, 
        {
            "location": "/sql-ref/#drop-role", 
            "text": "", 
            "title": "DROP ROLE"
        }, 
        {
            "location": "/sql-ref/#drop-rule", 
            "text": "", 
            "title": "DROP RULE"
        }, 
        {
            "location": "/sql-ref/#drop-schema", 
            "text": "", 
            "title": "DROP SCHEMA"
        }, 
        {
            "location": "/sql-ref/#drop-sequence", 
            "text": "", 
            "title": "DROP SEQUENCE"
        }, 
        {
            "location": "/sql-ref/#drop-table", 
            "text": "", 
            "title": "DROP TABLE"
        }, 
        {
            "location": "/sql-ref/#drop-tablespace", 
            "text": "", 
            "title": "DROP TABLESPACE"
        }, 
        {
            "location": "/sql-ref/#drop-type", 
            "text": "", 
            "title": "DROP TYPE"
        }, 
        {
            "location": "/sql-ref/#drop-user", 
            "text": "", 
            "title": "DROP USER"
        }, 
        {
            "location": "/sql-ref/#drop-view", 
            "text": "", 
            "title": "DROP VIEW"
        }, 
        {
            "location": "/sql-ref/#end", 
            "text": "", 
            "title": "END"
        }, 
        {
            "location": "/sql-ref/#execute", 
            "text": "", 
            "title": "EXECUTE"
        }, 
        {
            "location": "/sql-ref/#explain", 
            "text": "", 
            "title": "EXPLAIN"
        }, 
        {
            "location": "/sql-ref/#fetch", 
            "text": "", 
            "title": "FETCH"
        }, 
        {
            "location": "/sql-ref/#grant", 
            "text": "", 
            "title": "GRANT"
        }, 
        {
            "location": "/sql-ref/#insert", 
            "text": "", 
            "title": "INSERT"
        }, 
        {
            "location": "/sql-ref/#load", 
            "text": "", 
            "title": "LOAD"
        }, 
        {
            "location": "/sql-ref/#lock", 
            "text": "", 
            "title": "LOCK"
        }, 
        {
            "location": "/sql-ref/#move", 
            "text": "", 
            "title": "MOVE"
        }, 
        {
            "location": "/sql-ref/#prepare", 
            "text": "", 
            "title": "PREPARE"
        }, 
        {
            "location": "/sql-ref/#reassign-owned", 
            "text": "", 
            "title": "REASSIGN OWNED"
        }, 
        {
            "location": "/sql-ref/#reindex", 
            "text": "", 
            "title": "REINDEX"
        }, 
        {
            "location": "/sql-ref/#release-savepoint", 
            "text": "", 
            "title": "RELEASE SAVEPOINT"
        }, 
        {
            "location": "/sql-ref/#reset", 
            "text": "", 
            "title": "RESET"
        }, 
        {
            "location": "/sql-ref/#revoke", 
            "text": "", 
            "title": "REVOKE"
        }, 
        {
            "location": "/sql-ref/#rollback", 
            "text": "", 
            "title": "ROLLBACK"
        }, 
        {
            "location": "/sql-ref/#rollback-to-savepoint", 
            "text": "", 
            "title": "ROLLBACK TO SAVEPOINT"
        }, 
        {
            "location": "/sql-ref/#savepoint", 
            "text": "", 
            "title": "SAVEPOINT"
        }, 
        {
            "location": "/sql-ref/#select", 
            "text": "", 
            "title": "SELECT"
        }, 
        {
            "location": "/sql-ref/#select-into", 
            "text": "", 
            "title": "SELECT INTO"
        }, 
        {
            "location": "/sql-ref/#set", 
            "text": "", 
            "title": "SET"
        }, 
        {
            "location": "/sql-ref/#set-role", 
            "text": "", 
            "title": "SET ROLE"
        }, 
        {
            "location": "/sql-ref/#set-session-authorization", 
            "text": "", 
            "title": "SET SESSION AUTHORIZATION"
        }, 
        {
            "location": "/sql-ref/#set-transaction", 
            "text": "", 
            "title": "SET TRANSACTION"
        }, 
        {
            "location": "/sql-ref/#show", 
            "text": "", 
            "title": "SHOW"
        }, 
        {
            "location": "/sql-ref/#start-transaction", 
            "text": "", 
            "title": "START TRANSACTION"
        }, 
        {
            "location": "/sql-ref/#truncate", 
            "text": "", 
            "title": "TRUNCATE"
        }, 
        {
            "location": "/sql-ref/#update", 
            "text": "", 
            "title": "UPDATE"
        }, 
        {
            "location": "/sql-ref/#vacuum", 
            "text": "", 
            "title": "VACUUM"
        }, 
        {
            "location": "/sql-ref/#values", 
            "text": "", 
            "title": "VALUES"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/", 
            "text": "SQL Syntax Summary\n\n\nABORT\n\n\nAborts the current transaction.\n\n\nABORT [WORK | TRANSACTION]\n\n\n\nSee ABORT for more information.\n\n\nALTER AGGREGATE\n\n\nChanges the definition of an aggregate function\n\n\nALTER AGGREGATE name ( type [ , ... ] ) RENAME TO new_name\n\nALTER AGGREGATE name ( type [ , ... ] ) OWNER TO new_owner\n\nALTER AGGREGATE name ( type [ , ... ] ) SET SCHEMA new_schema\n\n\n\nSee ALTER AGGREGATE for more information.\n\n\nALTER CONVERSION\n\n\nChanges the definition of a conversion.\n\n\nALTER CONVERSION name RENAME TO newname\n\nALTER CONVERSION name OWNER TO newowner\n\n\n\nSee ALTER CONVERSION for more information.\n\n\nALTER DATABASE\n\n\nChanges the attributes of a database.\n\n\nALTER DATABASE name [ WITH CONNECTION LIMIT connlimit ]\n\nALTER DATABASE name SET parameter { TO | = } { value | DEFAULT }\n\nALTER DATABASE name RESET parameter\n\nALTER DATABASE name RENAME TO newname\n\nALTER DATABASE name OWNER TO new_owner\n\n\n\nSee ALTER DATABASE for more information.\n\n\nALTER DOMAIN\n\n\nChanges the definition of a domain.\n\n\nALTER DOMAIN name { SET DEFAULT expression | DROP DEFAULT }\n\nALTER DOMAIN name { SET | DROP } NOT NULL\n\nALTER DOMAIN name ADD domain_constraint\n\nALTER DOMAIN name DROP CONSTRAINT constraint_name [RESTRICT | CASCADE]\n\nALTER DOMAIN name OWNER TO new_owner\n\nALTER DOMAIN name SET SCHEMA new_schema\n\n\n\nSee ALTER DOMAIN for more information.\n\n\nALTER EXTERNAL TABLE\n\n\nChanges the definition of an external table.\n\n\nALTER EXTERNAL TABLE name RENAME [COLUMN] column TO new_column\n\nALTER EXTERNAL TABLE name RENAME TO new_name\n\nALTER EXTERNAL TABLE name SET SCHEMA new_schema\n\nALTER EXTERNAL TABLE name action [, ... ]\n\n\n\nSee ALTER EXTERNAL TABLE for more information.\n\n\nALTER FILESPACE\n\n\nChanges the definition of a filespace.\n\n\nALTER FILESPACE name RENAME TO newname\n\nALTER FILESPACE name OWNER TO newowner\n\n\n\nSee ALTER FILESPACE for more information.\n\n\nALTER FUNCTION\n\n\nChanges the definition of a function.\n\n\nALTER FUNCTION name ( [ [argmode] [argname] argtype [, ...] ] ) \n   action [, ... ] [RESTRICT]\n\nALTER FUNCTION name ( [ [argmode] [argname] argtype [, ...] ] )\n   RENAME TO new_name\n\nALTER FUNCTION name ( [ [argmode] [argname] argtype [, ...] ] ) \n   OWNER TO new_owner\n\nALTER FUNCTION name ( [ [argmode] [argname] argtype [, ...] ] ) \n   SET SCHEMA new_schema\n\n\n\nSee ALTER FUNCTION for more information.\n\n\nALTER GROUP\n\n\nChanges a role name or membership.\n\n\nALTER GROUP groupname ADD USER username [, ... ]\n\nALTER GROUP groupname DROP USER username [, ... ]\n\nALTER GROUP groupname RENAME TO newname\n\n\n\nSee ALTER GROUP for more information.\n\n\nALTER INDEX\n\n\nChanges the definition of an index.\n\n\nALTER INDEX name RENAME TO new_name\n\nALTER INDEX name SET TABLESPACE tablespace_name\n\nALTER INDEX name SET ( FILLFACTOR = value )\n\nALTER INDEX name RESET ( FILLFACTOR )\n\n\n\nSee ALTER INDEX for more information.\n\n\nALTER LANGUAGE\n\n\nChanges the name of a procedural language.\n\n\nALTER LANGUAGE name RENAME TO newname\n\n\n\nSee ALTER LANGUAGE for more information.\n\n\nALTER OPERATOR\n\n\nChanges the definition of an operator.\n\n\nALTER OPERATOR name ( {lefttype | NONE} , {righttype | NONE} ) \n   OWNER TO newowner\n\n\n\nSee ALTER OPERATOR for more information.\n\n\nALTER OPERATOR CLASS\n\n\nChanges the definition of an operator class.\n\n\nALTER OPERATOR CLASS name USING index_method RENAME TO newname\n\nALTER OPERATOR CLASS name USING index_method OWNER TO newowner\n\n\n\nSee ALTER OPERATOR CLASS for more information.\n\n\nALTER PROTOCOL\n\n\nChanges the definition of a protocol.\n\n\nALTER PROTOCOL name RENAME TO newname\n\nALTER PROTOCOL name OWNER TO newowner\n\n\n\nSee ALTER PROTOCOL for more information.\n\n\nALTER RESOURCE QUEUE\n\n\nChanges the limits of a resource queue.\n\n\nALTER RESOURCE QUEUE name WITH ( queue_attribute=value [, ... ] )\n\n\n\nSee ALTER RESOURCE QUEUE for more information.\n\n\nALTER ROLE\n\n\nChanges a database role (user or group).\n\n\nALTER ROLE name RENAME TO newname\n\nALTER ROLE name SET config_parameter {TO | =} {value | DEFAULT}\n\nALTER ROLE name RESET config_parameter\n\nALTER ROLE name RESOURCE QUEUE {queue_name | NONE}\n\nALTER ROLE name [ [WITH] option [ ... ] ]\n\n\n\nSee ALTER ROLE for more information.\n\n\nALTER SCHEMA\n\n\nChanges the definition of a schema.\n\n\nALTER SCHEMA name RENAME TO newname\n\nALTER SCHEMA name OWNER TO newowner\n\n\n\nSee ALTER SCHEMA for more information.\n\n\nALTER SEQUENCE\n\n\nChanges the definition of a sequence generator.\n\n\nALTER SEQUENCE name [INCREMENT [ BY ] increment] \n     [MINVALUE minvalue | NO MINVALUE] \n     [MAXVALUE maxvalue | NO MAXVALUE] \n     [RESTART [ WITH ] start] \n     [CACHE cache] [[ NO ] CYCLE] \n     [OWNED BY {table.column | NONE}]\n\nALTER SEQUENCE name SET SCHEMA new_schema\n\n\n\nSee ALTER SEQUENCE for more information.\n\n\nALTER TABLE\n\n\nChanges the definition of a table.\n\n\nALTER TABLE [ONLY] name RENAME [COLUMN] column TO new_column\n\nALTER TABLE name RENAME TO new_name\n\nALTER TABLE name SET SCHEMA new_schema\n\nALTER TABLE [ONLY] name SET \n     DISTRIBUTED BY (column, [ ... ] ) \n   | DISTRIBUTED RANDOMLY \n   | WITH (REORGANIZE=true|false)\n\nALTER TABLE [ONLY] name action [, ... ]\n\nALTER TABLE name\n   [ ALTER PARTITION { partition_name | FOR (RANK(number)) \n   | FOR (value) } partition_action [...] ] \n   partition_action\n\n\n\nSee ALTER TABLE for more information.\n\n\nALTER TABLESPACE\n\n\nChanges the definition of a tablespace.\n\n\nALTER TABLESPACE name RENAME TO newname\n\nALTER TABLESPACE name OWNER TO newowner\n\n\n\nSee ALTER TABLESPACE for more information.\n\n\nALTER TYPE\n\n\nChanges the definition of a data type.\n\n\nALTER TYPE name\n   OWNER TO new_owner | SET SCHEMA new_schema\n\n\n\nSee ALTER TYPE for more information.\n\n\nALTER USER\n\n\nChanges the definition of a database role (user).\n\n\nALTER USER name RENAME TO newname\n\nALTER USER name SET config_parameter {TO | =} {value | DEFAULT}\n\nALTER USER name RESET config_parameter\n\nALTER USER name [ [WITH] option [ ... ] ]\n\n\n\nSee ALTER USER for more information.\n\n\nANALYZE\n\n\nCollects statistics about a database.\n\n\nANALYZE [VERBOSE] [ROOTPARTITION [ALL] ] \n   [table [ (column [, ...] ) ]]\n\n\n\nSee ANALYZE for more information.\n\n\nBEGIN\n\n\nStarts a transaction block.\n\n\nBEGIN [WORK | TRANSACTION] [transaction_mode]\n      [READ ONLY | READ WRITE]\n\n\n\nSee BEGIN for more information.\n\n\nCHECKPOINT\n\n\nForces a transaction log checkpoint.\n\n\nCHECKPOINT\n\n\n\nSee CHECKPOINT for more information.\n\n\nCLOSE\n\n\nCloses a cursor.\n\n\nCLOSE cursor_name\n\n\n\nSee CLOSE for more information.\n\n\nCLUSTER\n\n\nPhysically reorders a heap storage table on disk according to an index. Not a recommended operation in Greenplum Database.\n\n\nCLUSTER indexname ON tablename\n\nCLUSTER tablename\n\nCLUSTER\n\n\n\nSee CLUSTER for more information.\n\n\nCOMMENT\n\n\nDefines or change the comment of an object.\n\n\nCOMMENT ON\n{ TABLE object_name |\n  COLUMN table_name.column_name |\n  AGGREGATE agg_name (agg_type [, ...]) |\n  CAST (sourcetype AS targettype) |\n  CONSTRAINT constraint_name ON table_name |\n  CONVERSION object_name |\n  DATABASE object_name |\n  DOMAIN object_name |\n  FILESPACE object_name |\n  FUNCTION func_name ([[argmode] [argname] argtype [, ...]]) |\n  INDEX object_name |\n  LARGE OBJECT large_object_oid |\n  OPERATOR op (leftoperand_type, rightoperand_type) |\n  OPERATOR CLASS object_name USING index_method |\n  [PROCEDURAL] LANGUAGE object_name |\n  RESOURCE QUEUE object_name |\n  ROLE object_name |\n  RULE rule_name ON table_name |\n  SCHEMA object_name |\n  SEQUENCE object_name |\n  TABLESPACE object_name |\n  TRIGGER trigger_name ON table_name |\n  TYPE object_name |\n  VIEW object_name } \nIS 'text'\n\n\n\nSee COMMENT for more information.\n\n\nCOMMIT\n\n\nCommits the current transaction.\n\n\nCOMMIT [WORK | TRANSACTION]\n\n\n\nSee COMMIT for more information.\n\n\nCOPY\n\n\nCopies data between a file and a table.\n\n\nCOPY table [(column [, ...])] FROM {'file' | STDIN}\n     [ [WITH] \n       [OIDS]\n       [HEADER]\n       [DELIMITER [ AS ] 'delimiter']\n       [NULL [ AS ] 'null string']\n       [ESCAPE [ AS ] 'escape' | 'OFF']\n       [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n       [CSV [QUOTE [ AS ] 'quote'] \n            [FORCE NOT NULL column [, ...]]\n       [FILL MISSING FIELDS]\n       [[LOG ERRORS [INTO error_table] [KEEP] \n       SEGMENT REJECT LIMIT count [ROWS | PERCENT] ]\n\nCOPY {table [(column [, ...])] | (query)} TO {'file' | STDOUT}\n      [ [WITH] \n        [OIDS]\n        [HEADER]\n        [DELIMITER [ AS ] 'delimiter']\n        [NULL [ AS ] 'null string']\n        [ESCAPE [ AS ] 'escape' | 'OFF']\n        [CSV [QUOTE [ AS ] 'quote'] \n             [FORCE QUOTE column [, ...]] ]\n      [IGNORE EXTERNAL PARTITIONS ]\n\n\n\nSee COPY for more information.\n\n\nCREATE AGGREGATE\n\n\nDefines a new aggregate function.\n\n\nCREATE [ORDERED] AGGREGATE name (input_data_type [ , ... ]) \n      ( SFUNC = sfunc,\n        STYPE = state_data_type\n        [, PREFUNC = prefunc]\n        [, FINALFUNC = ffunc]\n        [, INITCOND = initial_condition]\n        [, SORTOP = sort_operator] )\n\n\n\nSee CREATE AGGREGATE for more information.\n\n\nCREATE CAST\n\n\nDefines a new cast.\n\n\nCREATE CAST (sourcetype AS targettype) \n       WITH FUNCTION funcname (argtypes) \n       [AS ASSIGNMENT | AS IMPLICIT]\n\nCREATE CAST (sourcetype AS targettype) WITHOUT FUNCTION \n       [AS ASSIGNMENT | AS IMPLICIT]\n\n\n\nSee CREATE CAST for more information.\n\n\nCREATE CONVERSION\n\n\nDefines a new encoding conversion.\n\n\nCREATE [DEFAULT] CONVERSION name FOR source_encoding TO \n     dest_encoding FROM funcname\n\n\n\nSee CREATE CONVERSION for more information.\n\n\nCREATE DATABASE\n\n\nCreates a new database.\n\n\nCREATE DATABASE name [ [WITH] [OWNER [=] dbowner]\n                     [TEMPLATE [=] template]\n                     [ENCODING [=] encoding]\n                     [TABLESPACE [=] tablespace]\n                     [CONNECTION LIMIT [=] connlimit ] ]\n\n\n\nSee CREATE DATABASE for more information.\n\n\nCREATE DOMAIN\n\n\nDefines a new domain.\n\n\nCREATE DOMAIN name [AS] data_type [DEFAULT expression] \n       [CONSTRAINT constraint_name\n       | NOT NULL | NULL \n       | CHECK (expression) [...]]\n\n\n\nSee CREATE DOMAIN for more information.\n\n\nCREATE EXTERNAL TABLE\n\n\nDefines a new external table.\n\n\nCREATE [READABLE] EXTERNAL TABLE table_name     \n    ( column_name data_type [, ...] | LIKE other_table )\n      LOCATION ('file://seghost[:port]/path/file' [, ...])\n        | ('gpfdist://filehost[:port]/file_pattern[#transform]'\n        | ('gpfdists://filehost[:port]/file_pattern[#transform]'\n            [, ...])\n        | ('gphdfs://hdfs_host[:port]/path/file')\n      FORMAT 'TEXT' \n            [( [HEADER]\n               [DELIMITER [AS] 'delimiter' | 'OFF']\n               [NULL [AS] 'null string']\n               [ESCAPE [AS] 'escape' | 'OFF']\n               [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n               [FILL MISSING FIELDS] )]\n           | 'CSV'\n            [( [HEADER]\n               [QUOTE [AS] 'quote'] \n               [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [FORCE NOT NULL column [, ...]]\n               [ESCAPE [AS] 'escape']\n               [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n               [FILL MISSING FIELDS] )]\n           | 'AVRO' \n           | 'PARQUET'\n\n           | 'CUSTOM' (Formatter=\nformatter specifications\n)\n     [ ENCODING 'encoding' ]\n     [ [LOG ERRORS [INTO error_table]] SEGMENT REJECT LIMIT count\n       [ROWS | PERCENT] ]\n\nCREATE [READABLE] EXTERNAL WEB TABLE table_name     \n   ( column_name data_type [, ...] | LIKE other_table )\n      LOCATION ('http://webhost[:port]/path/file' [, ...])\n    | EXECUTE 'command' [ON ALL \n                          | MASTER\n                          | number_of_segments\n                          | HOST ['segment_hostname'] \n                          | SEGMENT segment_id ]\n      FORMAT 'TEXT' \n            [( [HEADER]\n               [DELIMITER [AS] 'delimiter' | 'OFF']\n               [NULL [AS] 'null string']\n               [ESCAPE [AS] 'escape' | 'OFF']\n               [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n               [FILL MISSING FIELDS] )]\n           | 'CSV'\n            [( [HEADER]\n               [QUOTE [AS] 'quote'] \n               [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [FORCE NOT NULL column [, ...]]\n               [ESCAPE [AS] 'escape']\n               [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n               [FILL MISSING FIELDS] )]\n           | 'CUSTOM' (Formatter=\nformatter specifications\n)\n     [ ENCODING 'encoding' ]\n     [ [LOG ERRORS [INTO error_table]] SEGMENT REJECT LIMIT count\n       [ROWS | PERCENT] ]\n\nCREATE WRITABLE EXTERNAL TABLE table_name\n    ( column_name data_type [, ...] | LIKE other_table )\n     LOCATION('gpfdist://outputhost[:port]/filename[#transform]'\n      | ('gpfdists://outputhost[:port]/file_pattern[#transform]'\n          [, ...])\n      | ('gphdfs://hdfs_host[:port]/path')\n      FORMAT 'TEXT' \n               [( [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [ESCAPE [AS] 'escape' | 'OFF'] )]\n          | 'CSV'\n               [([QUOTE [AS] 'quote'] \n               [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [FORCE QUOTE column [, ...]] ]\n               [ESCAPE [AS] 'escape'] )]\n           | 'AVRO' \n           | 'PARQUET'\n\n           | 'CUSTOM' (Formatter=\nformatter specifications\n)\n    [ ENCODING 'write_encoding' ]\n    [ DISTRIBUTED BY (column, [ ... ] ) | DISTRIBUTED RANDOMLY ]\n\nCREATE WRITABLE EXTERNAL WEB TABLE table_name\n    ( column_name data_type [, ...] | LIKE other_table )\n    EXECUTE 'command' [ON ALL]\n    FORMAT 'TEXT' \n               [( [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [ESCAPE [AS] 'escape' | 'OFF'] )]\n          | 'CSV'\n               [([QUOTE [AS] 'quote'] \n               [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [FORCE QUOTE column [, ...]] ]\n               [ESCAPE [AS] 'escape'] )]\n           | 'CUSTOM' (Formatter=\nformatter specifications\n)\n    [ ENCODING 'write_encoding' ]\n    [ DISTRIBUTED BY (column, [ ... ] ) | DISTRIBUTED RANDOMLY ]\n\n\n\nSee CREATE EXTERNAL TABLE for more information.\n\n\nCREATE FUNCTION\n\n\nDefines a new function.\n\n\nCREATE [OR REPLACE] FUNCTION name    \n    ( [ [argmode] [argname] argtype [, ...] ] )\n      [ RETURNS { [ SETOF ] rettype \n        | TABLE ([{ argname argtype | LIKE other table }\n          [, ...]])\n        } ]\n    { LANGUAGE langname\n    | IMMUTABLE | STABLE | VOLATILE\n    | CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT\n    | [EXTERNAL] SECURITY INVOKER | [EXTERNAL] SECURITY DEFINER\n    | AS 'definition'\n    | AS 'obj_file', 'link_symbol' } ...\n    [ WITH ({ DESCRIBE = describe_function\n           } [, ...] ) ]\n\n\n\nSee CREATE FUNCTION for more information.\n\n\nCREATE GROUP\n\n\nDefines a new database role.\n\n\nCREATE GROUP name [ [WITH] option [ ... ] ]\n\n\n\nSee CREATE GROUP for more information.\n\n\nCREATE INDEX\n\n\nDefines a new index.\n\n\nCREATE [UNIQUE] INDEX name ON table\n       [USING btree|bitmap|gist]\n       ( {column | (expression)} [opclass] [, ...] )\n       [ WITH ( FILLFACTOR = value ) ]\n       [TABLESPACE tablespace]\n       [WHERE predicate]\n\n\n\nSee CREATE INDEX for more information.\n\n\nCREATE LANGUAGE\n\n\nDefines a new procedural language.\n\n\nCREATE [PROCEDURAL] LANGUAGE name\n\nCREATE [TRUSTED] [PROCEDURAL] LANGUAGE name\n       HANDLER call_handler [VALIDATOR valfunction]\n\n\n\nSee CREATE LANGUAGE for more information.\n\n\nCREATE OPERATOR\n\n\nDefines a new operator.\n\n\nCREATE OPERATOR name ( \n       PROCEDURE = funcname\n       [, LEFTARG = lefttype] [, RIGHTARG = righttype]\n       [, COMMUTATOR = com_op] [, NEGATOR = neg_op]\n       [, RESTRICT = res_proc] [, JOIN = join_proc]\n       [, HASHES] [, MERGES]\n       [, SORT1 = left_sort_op] [, SORT2 = right_sort_op]\n       [, LTCMP = less_than_op] [, GTCMP = greater_than_op] )\n\n\n\nSee CREATE OPERATOR for more information.\n\n\nCREATE OPERATOR CLASS\n\n\nDefines a new operator class.\n\n\nCREATE OPERATOR CLASS name [DEFAULT] FOR TYPE data_type  \n  USING index_method AS \n  { \n  OPERATOR strategy_number op_name [(op_type, op_type)] [RECHECK]\n  | FUNCTION support_number funcname (argument_type [, ...] )\n  | STORAGE storage_type\n  } [, ... ]\n\n\n\nSee CREATE OPERATOR CLASS for more information.\n\n\nCREATE RESOURCE QUEUE\n\n\nDefines a new resource queue.\n\n\nCREATE RESOURCE QUEUE name WITH (queue_attribute=value [, ... ])\n\n\n\nSee CREATE RESOURCE QUEUE for more information.\n\n\nCREATE ROLE\n\n\nDefines a new database role (user or group).\n\n\nCREATE ROLE name [[WITH] option [ ... ]]\n\n\n\nSee CREATE ROLE for more information.\n\n\nCREATE RULE\n\n\nDefines a new rewrite rule.\n\n\nCREATE [OR REPLACE] RULE name AS ON event\n  TO table [WHERE condition] \n  DO [ALSO | INSTEAD] { NOTHING | command | (command; command \n  ...) }\n\n\n\nSee CREATE RULE for more information.\n\n\nCREATE SCHEMA\n\n\nDefines a new schema.\n\n\nCREATE SCHEMA schema_name [AUTHORIZATION username] \n   [schema_element [ ... ]]\n\nCREATE SCHEMA AUTHORIZATION rolename [schema_element [ ... ]]\n\n\n\nSee CREATE SCHEMA for more information.\n\n\nCREATE SEQUENCE\n\n\nDefines a new sequence generator.\n\n\nCREATE [TEMPORARY | TEMP] SEQUENCE name\n       [INCREMENT [BY] value] \n       [MINVALUE minvalue | NO MINVALUE] \n       [MAXVALUE maxvalue | NO MAXVALUE] \n       [START [ WITH ] start] \n       [CACHE cache] \n       [[NO] CYCLE] \n       [OWNED BY { table.column | NONE }]\n\n\n\nSee CREATE SEQUENCE for more information.\n\n\nCREATE TABLE\n\n\nDefines a new table.\n\n\nCREATE [[GLOBAL | LOCAL] {TEMPORARY | TEMP}] TABLE table_name ( \n[ { column_name data_type [ DEFAULT default_expr ] \n   [column_constraint [ ... ]\n[ ENCODING ( storage_directive [,...] ) ]\n] \n   | table_constraint\n   | LIKE other_table [{INCLUDING | EXCLUDING} \n                      {DEFAULTS | CONSTRAINTS}] ...}\n   [, ... ] ]\n   )\n   [ INHERITS ( parent_table [, ... ] ) ]\n   [ WITH ( storage_parameter=value [, ... ] )\n   [ ON COMMIT {PRESERVE ROWS | DELETE ROWS | DROP} ]\n   [ TABLESPACE tablespace ]\n   [ DISTRIBUTED BY (column, [ ... ] ) | DISTRIBUTED RANDOMLY ]\n   [ PARTITION BY partition_type (column)\n       [ SUBPARTITION BY partition_type (column) ] \n          [ SUBPARTITION TEMPLATE ( template_spec ) ]\n       [...]\n    ( partition_spec ) \n        | [ SUBPARTITION BY partition_type (column) ]\n          [...]\n    ( partition_spec\n      [ ( subpartition_spec\n           [(...)] \n         ) ] \n    )\n\n\n\nSee CREATE TABLE for more information.\n\n\nCREATE TABLE AS\n\n\nDefines a new table from the results of a query.\n\n\nCREATE [ [GLOBAL | LOCAL] {TEMPORARY | TEMP} ] TABLE table_name\n   [(column_name [, ...] )]\n   [ WITH ( storage_parameter=value [, ... ] ) ]\n   [ON COMMIT {PRESERVE ROWS | DELETE ROWS | DROP}]\n   [TABLESPACE tablespace]\n   AS query\n   [DISTRIBUTED BY (column, [ ... ] ) | DISTRIBUTED RANDOMLY]\n\n\n\nSee CREATE TABLE AS for more information.\n\n\nCREATE TABLESPACE\n\n\nDefines a new tablespace.\n\n\nCREATE TABLESPACE tablespace_name [OWNER username] \n       FILESPACE filespace_name\n\n\n\nSee CREATE TABLESPACE for more information.\n\n\nCREATE TYPE\n\n\nDefines a new data type.\n\n\nCREATE TYPE name AS ( attribute_name data_type [, ... ] )\n\nCREATE TYPE name (\n    INPUT = input_function,\n    OUTPUT = output_function\n    [, RECEIVE = receive_function]\n    [, SEND = send_function]\n    [, INTERNALLENGTH = {internallength | VARIABLE}]\n    [, PASSEDBYVALUE]\n    [, ALIGNMENT = alignment]\n    [, STORAGE = storage]\n    [, DEFAULT = default]\n    [, ELEMENT = element]\n    [, DELIMITER = delimiter] )\n\nCREATE TYPE name\n\n\n\nSee CREATE TYPE for more information.\n\n\nCREATE USER\n\n\nDefines a new database role with the LOGIN privilege by default.\n\n\nCREATE USER name [ [WITH] option [ ... ] ]\n\n\n\nSee CREATE USER for more information.\n\n\nCREATE VIEW\n\n\nDefines a new view.\n\n\nCREATE [OR REPLACE] [TEMP | TEMPORARY] VIEW name\n       [ ( column_name [, ...] ) ]\n       AS query\n\n\n\nSee CREATE VIEW for more information.\n\n\nDEALLOCATE\n\n\nDeallocates a prepared statement.\n\n\nDEALLOCATE [PREPARE] name\n\n\n\nSee DEALLOCATE for more information.\n\n\nDECLARE\n\n\nDefines a cursor.\n\n\nDECLARE name [BINARY] [INSENSITIVE] [NO SCROLL] CURSOR \n     [{WITH | WITHOUT} HOLD] \n     FOR query [FOR READ ONLY]\n\n\n\nSee DECLARE for more information.\n\n\nDELETE\n\n\nDeletes rows from a table.\n\n\nDELETE FROM [ONLY] table [[AS] alias]\n      [USING usinglist]\n      [WHERE condition | WHERE CURRENT OF cursor_name ]\n\n\n\nSee DELETE for more information.\n\n\nDROP AGGREGATE\n\n\nRemoves an aggregate function.\n\n\nDROP AGGREGATE [IF EXISTS] name ( type [, ...] ) [CASCADE | RESTRICT]\n\n\n\nSee DROP AGGREGATE for more information.\n\n\nDROP CAST\n\n\nRemoves a cast.\n\n\nDROP CAST [IF EXISTS] (sourcetype AS targettype) [CASCADE | RESTRICT]\n\n\n\nSee DROP CAST for more information.\n\n\nDROP CONVERSION\n\n\nRemoves a conversion.\n\n\nDROP CONVERSION [IF EXISTS] name [CASCADE | RESTRICT]\n\n\n\nSee DROP CONVERSION for more information.\n\n\nDROP DATABASE\n\n\nRemoves a database.\n\n\nDROP DATABASE [IF EXISTS] name\n\n\n\nSee DROP DATABASE for more information.\n\n\nDROP DOMAIN\n\n\nRemoves a domain.\n\n\nDROP DOMAIN [IF EXISTS] name [, ...]  [CASCADE | RESTRICT]\n\n\n\nSee DROP DOMAIN for more information.\n\n\nDROP EXTERNAL TABLE\n\n\nRemoves an external table definition.\n\n\nDROP EXTERNAL [WEB] TABLE [IF EXISTS] name [CASCADE | RESTRICT]\n\n\n\nSee DROP EXTERNAL TABLE for more information.\n\n\nDROP FILESPACE\n\n\nRemoves a filespace.\n\n\nDROP FILESPACE [IF EXISTS] filespacename\n\n\n\nSee DROP FILESPACE for more information.\n\n\nDROP FUNCTION\n\n\nRemoves a function.\n\n\nDROP FUNCTION [IF EXISTS] name ( [ [argmode] [argname] argtype \n    [, ...] ] ) [CASCADE | RESTRICT]\n\n\n\nSee DROP FUNCTION for more information.\n\n\nDROP GROUP\n\n\nRemoves a database role.\n\n\nDROP GROUP [IF EXISTS] name [, ...]\n\n\n\nSee DROP GROUP for more information.\n\n\nDROP INDEX\n\n\nRemoves an index.\n\n\nDROP INDEX [IF EXISTS] name [, ...] [CASCADE | RESTRICT]\n\n\n\nSee DROP INDEX for more information.\n\n\nDROP LANGUAGE\n\n\nRemoves a procedural language.\n\n\nDROP [PROCEDURAL] LANGUAGE [IF EXISTS] name [CASCADE | RESTRICT]\n\n\n\nSee DROP LANGUAGE for more information.\n\n\nDROP OPERATOR\n\n\nRemoves an operator.\n\n\nDROP OPERATOR [IF EXISTS] name ( {lefttype | NONE} , \n    {righttype | NONE} ) [CASCADE | RESTRICT]\n\n\n\nSee DROP OPERATOR for more information.\n\n\nDROP OPERATOR CLASS\n\n\nRemoves an operator class.\n\n\nDROP OPERATOR CLASS [IF EXISTS] name USING index_method [CASCADE | RESTRICT]\n\n\n\nSee DROP OPERATOR CLASS for more information.\n\n\nDROP OWNED\n\n\nRemoves database objects owned by a database role.\n\n\nDROP OWNED BY name [, ...] [CASCADE | RESTRICT]\n\n\n\nSee DROP OWNED for more information.\n\n\nDROP RESOURCE QUEUE\n\n\nRemoves a resource queue.\n\n\nDROP RESOURCE QUEUE queue_name\n\n\n\nSee DROP RESOURCE QUEUE for more information.\n\n\nDROP ROLE\n\n\nRemoves a database role.\n\n\nDROP ROLE [IF EXISTS] name [, ...]\n\n\n\nSee DROP ROLE for more information.\n\n\nDROP RULE\n\n\nRemoves a rewrite rule.\n\n\nDROP RULE [IF EXISTS] name ON relation [CASCADE | RESTRICT]\n\n\n\nSee DROP RULE for more information.\n\n\nDROP SCHEMA\n\n\nRemoves a schema.\n\n\nDROP SCHEMA [IF EXISTS] name [, ...] [CASCADE | RESTRICT]\n\n\n\nSee DROP SCHEMA for more information.\n\n\nDROP SEQUENCE\n\n\nRemoves a sequence.\n\n\nDROP SEQUENCE [IF EXISTS] name [, ...] [CASCADE | RESTRICT]\n\n\n\nSee DROP SEQUENCE for more information.\n\n\nDROP TABLE\n\n\nRemoves a table.\n\n\nDROP TABLE [IF EXISTS] name [, ...] [CASCADE | RESTRICT]\n\n\n\nSee DROP TABLE for more information.\n\n\nDROP TABLESPACE\n\n\nRemoves a tablespace.\n\n\nDROP TABLESPACE [IF EXISTS] tablespacename\n\n\n\nSee DROP TABLESPACE for more information.\n\n\nDROP TYPE\n\n\nRemoves a data type.\n\n\nDROP TYPE [IF EXISTS] name [, ...] [CASCADE | RESTRICT]\n\n\n\nSee DROP TYPE for more information.\n\n\nDROP USER\n\n\nRemoves a database role.\n\n\nDROP USER [IF EXISTS] name [, ...]\n\n\n\nSee DROP USER for more information.\n\n\nDROP VIEW\n\n\nRemoves a view.\n\n\nDROP VIEW [IF EXISTS] name [, ...] [CASCADE | RESTRICT]\n\n\n\nSee DROP VIEW for more information.\n\n\nEND\n\n\nCommits the current transaction.\n\n\nEND [WORK | TRANSACTION]\n\n\n\nSee END for more information.\n\n\nEXECUTE\n\n\nExecutes a prepared SQL statement.\n\n\nEXECUTE name [ (parameter [, ...] ) ]\n\n\n\nSee EXECUTE for more information.\n\n\nEXPLAIN\n\n\nShows the query plan of a statement.\n\n\nEXPLAIN [ANALYZE] [VERBOSE] statement\n\n\n\nSee EXPLAIN for more information.\n\n\nFETCH\n\n\nRetrieves rows from a query using a cursor.\n\n\nFETCH [ forward_direction { FROM | IN } ] cursorname\n\n\n\nSee FETCH for more information.\n\n\nGRANT\n\n\nDefines access privileges.\n\n\nGRANT { {SELECT | INSERT | UPDATE | DELETE | REFERENCES | \nTRIGGER | TRUNCATE } [,...] | ALL [PRIVILEGES] }\n    ON [TABLE] tablename [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { {USAGE | SELECT | UPDATE} [,...] | ALL [PRIVILEGES] }\n    ON SEQUENCE sequencename [, ...]\n    TO { rolename | PUBLIC } [, ...] [WITH GRANT OPTION]\n\nGRANT { {CREATE | CONNECT | TEMPORARY | TEMP} [,...] | ALL \n[PRIVILEGES] }\n    ON DATABASE dbname [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { EXECUTE | ALL [PRIVILEGES] }\n    ON FUNCTION funcname ( [ [argmode] [argname] argtype [, ...] \n] ) [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { USAGE | ALL [PRIVILEGES] }\n    ON LANGUAGE langname [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { {CREATE | USAGE} [,...] | ALL [PRIVILEGES] }\n    ON SCHEMA schemaname [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { CREATE | ALL [PRIVILEGES] }\n    ON TABLESPACE tablespacename [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT parent_role [, ...] \n    TO member_role [, ...] [WITH ADMIN OPTION]\n\nGRANT { SELECT | INSERT | ALL [PRIVILEGES] } \n    ON PROTOCOL protocolname\n    TO username\n\n\n\nSee GRANT for more information.\n\n\nINSERT\n\n\nCreates new rows in a table.\n\n\nINSERT INTO table [( column [, ...] )]\n   {DEFAULT VALUES | VALUES ( {expression | DEFAULT} [, ...] ) \n   [, ...] | query}\n\n\n\nSee INSERT for more information.\n\n\nLOAD\n\n\nLoads or reloads a shared library file.\n\n\nLOAD 'filename'\n\n\n\nSee LOAD for more information.\n\n\nLOCK\n\n\nLocks a table.\n\n\nLOCK [TABLE] name [, ...] [IN lockmode MODE] [NOWAIT]\n\n\n\nSee LOCK for more information.\n\n\nMOVE\n\n\nPositions a cursor.\n\n\nMOVE [ forward_direction {FROM | IN} ] cursorname\n\n\n\nSee MOVE for more information.\n\n\nPREPARE\n\n\nPrepare a statement for execution.\n\n\nPREPARE name [ (datatype [, ...] ) ] AS statement\n\n\n\nSee PREPARE for more information.\n\n\nREASSIGN OWNED\n\n\nChanges the ownership of database objects owned by a database role.\n\n\nREASSIGN OWNED BY old_role [, ...] TO new_role\n\n\n\nSee REASSIGN OWNED for more information.\n\n\nREINDEX\n\n\nRebuilds indexes.\n\n\nREINDEX {INDEX | TABLE | DATABASE | SYSTEM} name\n\n\n\nSee REINDEX for more information.\n\n\nRELEASE SAVEPOINT\n\n\nDestroys a previously defined savepoint.\n\n\nRELEASE [SAVEPOINT] savepoint_name\n\n\n\nSee RELEASE SAVEPOINT for more information.\n\n\nRESET\n\n\nRestores the value of a system configuration parameter to the default value.\n\n\nRESET configuration_parameter\n\nRESET ALL\n\n\n\nSee RESET for more information.\n\n\nREVOKE\n\n\nRemoves access privileges.\n\n\nREVOKE [GRANT OPTION FOR] { {SELECT | INSERT | UPDATE | DELETE \n       | REFERENCES | TRIGGER | TRUNCATE } [,...] | ALL [PRIVILEGES] }\n       ON [TABLE] tablename [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] { {USAGE | SELECT | UPDATE} [,...] \n       | ALL [PRIVILEGES] }\n       ON SEQUENCE sequencename [, ...]\n       FROM { rolename | PUBLIC } [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] { {CREATE | CONNECT \n       | TEMPORARY | TEMP} [,...] | ALL [PRIVILEGES] }\n       ON DATABASE dbname [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] {EXECUTE | ALL [PRIVILEGES]}\n       ON FUNCTION funcname ( [[argmode] [argname] argtype\n                              [, ...]] ) [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] {USAGE | ALL [PRIVILEGES]}\n       ON LANGUAGE langname [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [ CASCADE | RESTRICT ]\n\nREVOKE [GRANT OPTION FOR] { {CREATE | USAGE} [,...] \n       | ALL [PRIVILEGES] }\n       ON SCHEMA schemaname [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] { CREATE | ALL [PRIVILEGES] }\n       ON TABLESPACE tablespacename [, ...]\n       FROM { rolename | PUBLIC } [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [ADMIN OPTION FOR] parent_role [, ...] \n       FROM member_role [, ...]\n       [CASCADE | RESTRICT]\n\n\n\nSee REVOKE for more information.\n\n\nROLLBACK\n\n\nAborts the current transaction.\n\n\nROLLBACK [WORK | TRANSACTION]\n\n\n\nSee ROLLBACK for more information.\n\n\nROLLBACK TO SAVEPOINT\n\n\nRolls back the current transaction to a savepoint.\n\n\nROLLBACK [WORK | TRANSACTION] TO [SAVEPOINT] savepoint_name\n\n\n\nSee ROLLBACK TO SAVEPOINT for more information.\n\n\nSAVEPOINT\n\n\nDefines a new savepoint within the current transaction.\n\n\nSAVEPOINT savepoint_name\n\n\n\nSee SAVEPOINT for more information.\n\n\nSELECT\n\n\nRetrieves rows from a table or view.\n\n\nSELECT [ALL | DISTINCT [ON (expression [, ...])]]\n  * | expression [[AS] output_name] [, ...]\n  [FROM from_item [, ...]]\n  [WHERE condition]\n  [GROUP BY grouping_element [, ...]]\n  [HAVING condition [, ...]]\n  [WINDOW window_name AS (window_specification)]\n  [{UNION | INTERSECT | EXCEPT} [ALL] select]\n  [ORDER BY expression [ASC | DESC | USING operator] [, ...]]\n  [LIMIT {count | ALL}]\n  [OFFSET start]\n  [FOR {UPDATE | SHARE} [OF table_name [, ...]] [NOWAIT] [...]]\n\n\n\nSee SELECT for more information.\n\n\nSELECT INTO\n\n\nDefines a new table from the results of a query.\n\n\nSELECT [ALL | DISTINCT [ON ( expression [, ...] )]]\n    * | expression [AS output_name] [, ...]\n    INTO [TEMPORARY | TEMP] [TABLE] new_table\n    [FROM from_item [, ...]]\n    [WHERE condition]\n    [GROUP BY expression [, ...]]\n    [HAVING condition [, ...]]\n    [{UNION | INTERSECT | EXCEPT} [ALL] select]\n    [ORDER BY expression [ASC | DESC | USING operator] [, ...]]\n    [LIMIT {count | ALL}]\n    [OFFSET start]\n    [FOR {UPDATE | SHARE} [OF table_name [, ...]] [NOWAIT] \n    [...]]\n\n\n\nSee SELECT INTO for more information.\n\n\nSET\n\n\nChanges the value of a Greenplum Database configuration parameter.\n\n\nSET [SESSION | LOCAL] configuration_parameter {TO | =} value | \n    'value' | DEFAULT}\n\nSET [SESSION | LOCAL] TIME ZONE {timezone | LOCAL | DEFAULT}\n\n\n\nSee SET for more information.\n\n\nSET ROLE\n\n\nSets the current role identifier of the current session.\n\n\nSET [SESSION | LOCAL] ROLE rolename\n\nSET [SESSION | LOCAL] ROLE NONE\n\nRESET ROLE\n\n\n\nSee SET ROLE for more information.\n\n\nSET SESSION AUTHORIZATION\n\n\nSets the session role identifier and the current role identifier of the current session.\n\n\nSET [SESSION | LOCAL] SESSION AUTHORIZATION rolename\n\nSET [SESSION | LOCAL] SESSION AUTHORIZATION DEFAULT\n\nRESET SESSION AUTHORIZATION\n\n\n\nSee SET SESSION AUTHORIZATION for more information.\n\n\nSET TRANSACTION\n\n\nSets the characteristics of the current transaction.\n\n\nSET TRANSACTION [transaction_mode] [READ ONLY | READ WRITE]\n\nSET SESSION CHARACTERISTICS AS TRANSACTION transaction_mode \n     [READ ONLY | READ WRITE]\n\n\n\nSee SET TRANSACTION for more information.\n\n\nSHOW\n\n\nShows the value of a system configuration parameter.\n\n\nSHOW configuration_parameter\n\nSHOW ALL\n\n\n\nSee SHOW for more information.\n\n\nSTART TRANSACTION\n\n\nStarts a transaction block.\n\n\nSTART TRANSACTION [SERIALIZABLE | READ COMMITTED | READ UNCOMMITTED]\n                  [READ WRITE | READ ONLY]\n\n\n\nSee START TRANSACTION for more information.\n\n\nTRUNCATE\n\n\nEmpties a table of all rows.\n\n\nTRUNCATE [TABLE] name [, ...] [CASCADE | RESTRICT]\n\n\n\nSee TRUNCATE for more information.\n\n\nUPDATE\n\n\nUpdates rows of a table.\n\n\nUPDATE [ONLY] table [[AS] alias]\n   SET {column = {expression | DEFAULT} |\n   (column [, ...]) = ({expression | DEFAULT} [, ...])} [, ...]\n   [FROM fromlist]\n   [WHERE condition | WHERE CURRENT OF cursor_name ]\n\n\n\nSee UPDATE for more information.\n\n\nVACUUM\n\n\nGarbage-collects and optionally analyzes a database.\n\n\nVACUUM [FULL] [FREEZE] [VERBOSE] [table]\n\nVACUUM [FULL] [FREEZE] [VERBOSE] ANALYZE\n              [table [(column [, ...] )]]\n\n\n\nSee VACUUM for more information.\n\n\nVALUES\n\n\nComputes a set of rows.\n\n\nVALUES ( expression [, ...] ) [, ...]\n   [ORDER BY sort_expression [ASC | DESC | USING operator] [, ...]]\n   [LIMIT {count | ALL}] [OFFSET start]\n\n\n\nSee VALUES for more information.", 
            "title": "\u5217\u8868"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#sql-syntax-summary", 
            "text": "", 
            "title": "SQL Syntax Summary"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#abort", 
            "text": "Aborts the current transaction.  ABORT [WORK | TRANSACTION]  See ABORT for more information.", 
            "title": "ABORT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-aggregate", 
            "text": "Changes the definition of an aggregate function  ALTER AGGREGATE name ( type [ , ... ] ) RENAME TO new_name\n\nALTER AGGREGATE name ( type [ , ... ] ) OWNER TO new_owner\n\nALTER AGGREGATE name ( type [ , ... ] ) SET SCHEMA new_schema  See ALTER AGGREGATE for more information.", 
            "title": "ALTER AGGREGATE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-conversion", 
            "text": "Changes the definition of a conversion.  ALTER CONVERSION name RENAME TO newname\n\nALTER CONVERSION name OWNER TO newowner  See ALTER CONVERSION for more information.", 
            "title": "ALTER CONVERSION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-database", 
            "text": "Changes the attributes of a database.  ALTER DATABASE name [ WITH CONNECTION LIMIT connlimit ]\n\nALTER DATABASE name SET parameter { TO | = } { value | DEFAULT }\n\nALTER DATABASE name RESET parameter\n\nALTER DATABASE name RENAME TO newname\n\nALTER DATABASE name OWNER TO new_owner  See ALTER DATABASE for more information.", 
            "title": "ALTER DATABASE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-domain", 
            "text": "Changes the definition of a domain.  ALTER DOMAIN name { SET DEFAULT expression | DROP DEFAULT }\n\nALTER DOMAIN name { SET | DROP } NOT NULL\n\nALTER DOMAIN name ADD domain_constraint\n\nALTER DOMAIN name DROP CONSTRAINT constraint_name [RESTRICT | CASCADE]\n\nALTER DOMAIN name OWNER TO new_owner\n\nALTER DOMAIN name SET SCHEMA new_schema  See ALTER DOMAIN for more information.", 
            "title": "ALTER DOMAIN"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-external-table", 
            "text": "Changes the definition of an external table.  ALTER EXTERNAL TABLE name RENAME [COLUMN] column TO new_column\n\nALTER EXTERNAL TABLE name RENAME TO new_name\n\nALTER EXTERNAL TABLE name SET SCHEMA new_schema\n\nALTER EXTERNAL TABLE name action [, ... ]  See ALTER EXTERNAL TABLE for more information.", 
            "title": "ALTER EXTERNAL TABLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-filespace", 
            "text": "Changes the definition of a filespace.  ALTER FILESPACE name RENAME TO newname\n\nALTER FILESPACE name OWNER TO newowner  See ALTER FILESPACE for more information.", 
            "title": "ALTER FILESPACE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-function", 
            "text": "Changes the definition of a function.  ALTER FUNCTION name ( [ [argmode] [argname] argtype [, ...] ] ) \n   action [, ... ] [RESTRICT]\n\nALTER FUNCTION name ( [ [argmode] [argname] argtype [, ...] ] )\n   RENAME TO new_name\n\nALTER FUNCTION name ( [ [argmode] [argname] argtype [, ...] ] ) \n   OWNER TO new_owner\n\nALTER FUNCTION name ( [ [argmode] [argname] argtype [, ...] ] ) \n   SET SCHEMA new_schema  See ALTER FUNCTION for more information.", 
            "title": "ALTER FUNCTION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-group", 
            "text": "Changes a role name or membership.  ALTER GROUP groupname ADD USER username [, ... ]\n\nALTER GROUP groupname DROP USER username [, ... ]\n\nALTER GROUP groupname RENAME TO newname  See ALTER GROUP for more information.", 
            "title": "ALTER GROUP"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-index", 
            "text": "Changes the definition of an index.  ALTER INDEX name RENAME TO new_name\n\nALTER INDEX name SET TABLESPACE tablespace_name\n\nALTER INDEX name SET ( FILLFACTOR = value )\n\nALTER INDEX name RESET ( FILLFACTOR )  See ALTER INDEX for more information.", 
            "title": "ALTER INDEX"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-language", 
            "text": "Changes the name of a procedural language.  ALTER LANGUAGE name RENAME TO newname  See ALTER LANGUAGE for more information.", 
            "title": "ALTER LANGUAGE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-operator", 
            "text": "Changes the definition of an operator.  ALTER OPERATOR name ( {lefttype | NONE} , {righttype | NONE} ) \n   OWNER TO newowner  See ALTER OPERATOR for more information.", 
            "title": "ALTER OPERATOR"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-operator-class", 
            "text": "Changes the definition of an operator class.  ALTER OPERATOR CLASS name USING index_method RENAME TO newname\n\nALTER OPERATOR CLASS name USING index_method OWNER TO newowner  See ALTER OPERATOR CLASS for more information.", 
            "title": "ALTER OPERATOR CLASS"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-protocol", 
            "text": "Changes the definition of a protocol.  ALTER PROTOCOL name RENAME TO newname\n\nALTER PROTOCOL name OWNER TO newowner  See ALTER PROTOCOL for more information.", 
            "title": "ALTER PROTOCOL"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-resource-queue", 
            "text": "Changes the limits of a resource queue.  ALTER RESOURCE QUEUE name WITH ( queue_attribute=value [, ... ] )  See ALTER RESOURCE QUEUE for more information.", 
            "title": "ALTER RESOURCE QUEUE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-role", 
            "text": "Changes a database role (user or group).  ALTER ROLE name RENAME TO newname\n\nALTER ROLE name SET config_parameter {TO | =} {value | DEFAULT}\n\nALTER ROLE name RESET config_parameter\n\nALTER ROLE name RESOURCE QUEUE {queue_name | NONE}\n\nALTER ROLE name [ [WITH] option [ ... ] ]  See ALTER ROLE for more information.", 
            "title": "ALTER ROLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-schema", 
            "text": "Changes the definition of a schema.  ALTER SCHEMA name RENAME TO newname\n\nALTER SCHEMA name OWNER TO newowner  See ALTER SCHEMA for more information.", 
            "title": "ALTER SCHEMA"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-sequence", 
            "text": "Changes the definition of a sequence generator.  ALTER SEQUENCE name [INCREMENT [ BY ] increment] \n     [MINVALUE minvalue | NO MINVALUE] \n     [MAXVALUE maxvalue | NO MAXVALUE] \n     [RESTART [ WITH ] start] \n     [CACHE cache] [[ NO ] CYCLE] \n     [OWNED BY {table.column | NONE}]\n\nALTER SEQUENCE name SET SCHEMA new_schema  See ALTER SEQUENCE for more information.", 
            "title": "ALTER SEQUENCE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-table", 
            "text": "Changes the definition of a table.  ALTER TABLE [ONLY] name RENAME [COLUMN] column TO new_column\n\nALTER TABLE name RENAME TO new_name\n\nALTER TABLE name SET SCHEMA new_schema\n\nALTER TABLE [ONLY] name SET \n     DISTRIBUTED BY (column, [ ... ] ) \n   | DISTRIBUTED RANDOMLY \n   | WITH (REORGANIZE=true|false)\n\nALTER TABLE [ONLY] name action [, ... ]\n\nALTER TABLE name\n   [ ALTER PARTITION { partition_name | FOR (RANK(number)) \n   | FOR (value) } partition_action [...] ] \n   partition_action  See ALTER TABLE for more information.", 
            "title": "ALTER TABLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-tablespace", 
            "text": "Changes the definition of a tablespace.  ALTER TABLESPACE name RENAME TO newname\n\nALTER TABLESPACE name OWNER TO newowner  See ALTER TABLESPACE for more information.", 
            "title": "ALTER TABLESPACE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-type", 
            "text": "Changes the definition of a data type.  ALTER TYPE name\n   OWNER TO new_owner | SET SCHEMA new_schema  See ALTER TYPE for more information.", 
            "title": "ALTER TYPE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#alter-user", 
            "text": "Changes the definition of a database role (user).  ALTER USER name RENAME TO newname\n\nALTER USER name SET config_parameter {TO | =} {value | DEFAULT}\n\nALTER USER name RESET config_parameter\n\nALTER USER name [ [WITH] option [ ... ] ]  See ALTER USER for more information.", 
            "title": "ALTER USER"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#analyze", 
            "text": "Collects statistics about a database.  ANALYZE [VERBOSE] [ROOTPARTITION [ALL] ] \n   [table [ (column [, ...] ) ]]  See ANALYZE for more information.", 
            "title": "ANALYZE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#begin", 
            "text": "Starts a transaction block.  BEGIN [WORK | TRANSACTION] [transaction_mode]\n      [READ ONLY | READ WRITE]  See BEGIN for more information.", 
            "title": "BEGIN"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#checkpoint", 
            "text": "Forces a transaction log checkpoint.  CHECKPOINT  See CHECKPOINT for more information.", 
            "title": "CHECKPOINT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#close", 
            "text": "Closes a cursor.  CLOSE cursor_name  See CLOSE for more information.", 
            "title": "CLOSE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#cluster", 
            "text": "Physically reorders a heap storage table on disk according to an index. Not a recommended operation in Greenplum Database.  CLUSTER indexname ON tablename\n\nCLUSTER tablename\n\nCLUSTER  See CLUSTER for more information.", 
            "title": "CLUSTER"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#comment", 
            "text": "Defines or change the comment of an object.  COMMENT ON\n{ TABLE object_name |\n  COLUMN table_name.column_name |\n  AGGREGATE agg_name (agg_type [, ...]) |\n  CAST (sourcetype AS targettype) |\n  CONSTRAINT constraint_name ON table_name |\n  CONVERSION object_name |\n  DATABASE object_name |\n  DOMAIN object_name |\n  FILESPACE object_name |\n  FUNCTION func_name ([[argmode] [argname] argtype [, ...]]) |\n  INDEX object_name |\n  LARGE OBJECT large_object_oid |\n  OPERATOR op (leftoperand_type, rightoperand_type) |\n  OPERATOR CLASS object_name USING index_method |\n  [PROCEDURAL] LANGUAGE object_name |\n  RESOURCE QUEUE object_name |\n  ROLE object_name |\n  RULE rule_name ON table_name |\n  SCHEMA object_name |\n  SEQUENCE object_name |\n  TABLESPACE object_name |\n  TRIGGER trigger_name ON table_name |\n  TYPE object_name |\n  VIEW object_name } \nIS 'text'  See COMMENT for more information.", 
            "title": "COMMENT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#commit", 
            "text": "Commits the current transaction.  COMMIT [WORK | TRANSACTION]  See COMMIT for more information.", 
            "title": "COMMIT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#copy", 
            "text": "Copies data between a file and a table.  COPY table [(column [, ...])] FROM {'file' | STDIN}\n     [ [WITH] \n       [OIDS]\n       [HEADER]\n       [DELIMITER [ AS ] 'delimiter']\n       [NULL [ AS ] 'null string']\n       [ESCAPE [ AS ] 'escape' | 'OFF']\n       [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n       [CSV [QUOTE [ AS ] 'quote'] \n            [FORCE NOT NULL column [, ...]]\n       [FILL MISSING FIELDS]\n       [[LOG ERRORS [INTO error_table] [KEEP] \n       SEGMENT REJECT LIMIT count [ROWS | PERCENT] ]\n\nCOPY {table [(column [, ...])] | (query)} TO {'file' | STDOUT}\n      [ [WITH] \n        [OIDS]\n        [HEADER]\n        [DELIMITER [ AS ] 'delimiter']\n        [NULL [ AS ] 'null string']\n        [ESCAPE [ AS ] 'escape' | 'OFF']\n        [CSV [QUOTE [ AS ] 'quote'] \n             [FORCE QUOTE column [, ...]] ]\n      [IGNORE EXTERNAL PARTITIONS ]  See COPY for more information.", 
            "title": "COPY"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-aggregate", 
            "text": "Defines a new aggregate function.  CREATE [ORDERED] AGGREGATE name (input_data_type [ , ... ]) \n      ( SFUNC = sfunc,\n        STYPE = state_data_type\n        [, PREFUNC = prefunc]\n        [, FINALFUNC = ffunc]\n        [, INITCOND = initial_condition]\n        [, SORTOP = sort_operator] )  See CREATE AGGREGATE for more information.", 
            "title": "CREATE AGGREGATE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-cast", 
            "text": "Defines a new cast.  CREATE CAST (sourcetype AS targettype) \n       WITH FUNCTION funcname (argtypes) \n       [AS ASSIGNMENT | AS IMPLICIT]\n\nCREATE CAST (sourcetype AS targettype) WITHOUT FUNCTION \n       [AS ASSIGNMENT | AS IMPLICIT]  See CREATE CAST for more information.", 
            "title": "CREATE CAST"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-conversion", 
            "text": "Defines a new encoding conversion.  CREATE [DEFAULT] CONVERSION name FOR source_encoding TO \n     dest_encoding FROM funcname  See CREATE CONVERSION for more information.", 
            "title": "CREATE CONVERSION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-database", 
            "text": "Creates a new database.  CREATE DATABASE name [ [WITH] [OWNER [=] dbowner]\n                     [TEMPLATE [=] template]\n                     [ENCODING [=] encoding]\n                     [TABLESPACE [=] tablespace]\n                     [CONNECTION LIMIT [=] connlimit ] ]  See CREATE DATABASE for more information.", 
            "title": "CREATE DATABASE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-domain", 
            "text": "Defines a new domain.  CREATE DOMAIN name [AS] data_type [DEFAULT expression] \n       [CONSTRAINT constraint_name\n       | NOT NULL | NULL \n       | CHECK (expression) [...]]  See CREATE DOMAIN for more information.", 
            "title": "CREATE DOMAIN"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-external-table", 
            "text": "Defines a new external table.  CREATE [READABLE] EXTERNAL TABLE table_name     \n    ( column_name data_type [, ...] | LIKE other_table )\n      LOCATION ('file://seghost[:port]/path/file' [, ...])\n        | ('gpfdist://filehost[:port]/file_pattern[#transform]'\n        | ('gpfdists://filehost[:port]/file_pattern[#transform]'\n            [, ...])\n        | ('gphdfs://hdfs_host[:port]/path/file')\n      FORMAT 'TEXT' \n            [( [HEADER]\n               [DELIMITER [AS] 'delimiter' | 'OFF']\n               [NULL [AS] 'null string']\n               [ESCAPE [AS] 'escape' | 'OFF']\n               [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n               [FILL MISSING FIELDS] )]\n           | 'CSV'\n            [( [HEADER]\n               [QUOTE [AS] 'quote'] \n               [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [FORCE NOT NULL column [, ...]]\n               [ESCAPE [AS] 'escape']\n               [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n               [FILL MISSING FIELDS] )]\n           | 'AVRO' \n           | 'PARQUET'\n\n           | 'CUSTOM' (Formatter= formatter specifications )\n     [ ENCODING 'encoding' ]\n     [ [LOG ERRORS [INTO error_table]] SEGMENT REJECT LIMIT count\n       [ROWS | PERCENT] ]\n\nCREATE [READABLE] EXTERNAL WEB TABLE table_name     \n   ( column_name data_type [, ...] | LIKE other_table )\n      LOCATION ('http://webhost[:port]/path/file' [, ...])\n    | EXECUTE 'command' [ON ALL \n                          | MASTER\n                          | number_of_segments\n                          | HOST ['segment_hostname'] \n                          | SEGMENT segment_id ]\n      FORMAT 'TEXT' \n            [( [HEADER]\n               [DELIMITER [AS] 'delimiter' | 'OFF']\n               [NULL [AS] 'null string']\n               [ESCAPE [AS] 'escape' | 'OFF']\n               [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n               [FILL MISSING FIELDS] )]\n           | 'CSV'\n            [( [HEADER]\n               [QUOTE [AS] 'quote'] \n               [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [FORCE NOT NULL column [, ...]]\n               [ESCAPE [AS] 'escape']\n               [NEWLINE [ AS ] 'LF' | 'CR' | 'CRLF']\n               [FILL MISSING FIELDS] )]\n           | 'CUSTOM' (Formatter= formatter specifications )\n     [ ENCODING 'encoding' ]\n     [ [LOG ERRORS [INTO error_table]] SEGMENT REJECT LIMIT count\n       [ROWS | PERCENT] ]\n\nCREATE WRITABLE EXTERNAL TABLE table_name\n    ( column_name data_type [, ...] | LIKE other_table )\n     LOCATION('gpfdist://outputhost[:port]/filename[#transform]'\n      | ('gpfdists://outputhost[:port]/file_pattern[#transform]'\n          [, ...])\n      | ('gphdfs://hdfs_host[:port]/path')\n      FORMAT 'TEXT' \n               [( [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [ESCAPE [AS] 'escape' | 'OFF'] )]\n          | 'CSV'\n               [([QUOTE [AS] 'quote'] \n               [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [FORCE QUOTE column [, ...]] ]\n               [ESCAPE [AS] 'escape'] )]\n           | 'AVRO' \n           | 'PARQUET'\n\n           | 'CUSTOM' (Formatter= formatter specifications )\n    [ ENCODING 'write_encoding' ]\n    [ DISTRIBUTED BY (column, [ ... ] ) | DISTRIBUTED RANDOMLY ]\n\nCREATE WRITABLE EXTERNAL WEB TABLE table_name\n    ( column_name data_type [, ...] | LIKE other_table )\n    EXECUTE 'command' [ON ALL]\n    FORMAT 'TEXT' \n               [( [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [ESCAPE [AS] 'escape' | 'OFF'] )]\n          | 'CSV'\n               [([QUOTE [AS] 'quote'] \n               [DELIMITER [AS] 'delimiter']\n               [NULL [AS] 'null string']\n               [FORCE QUOTE column [, ...]] ]\n               [ESCAPE [AS] 'escape'] )]\n           | 'CUSTOM' (Formatter= formatter specifications )\n    [ ENCODING 'write_encoding' ]\n    [ DISTRIBUTED BY (column, [ ... ] ) | DISTRIBUTED RANDOMLY ]  See CREATE EXTERNAL TABLE for more information.", 
            "title": "CREATE EXTERNAL TABLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-function", 
            "text": "Defines a new function.  CREATE [OR REPLACE] FUNCTION name    \n    ( [ [argmode] [argname] argtype [, ...] ] )\n      [ RETURNS { [ SETOF ] rettype \n        | TABLE ([{ argname argtype | LIKE other table }\n          [, ...]])\n        } ]\n    { LANGUAGE langname\n    | IMMUTABLE | STABLE | VOLATILE\n    | CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT\n    | [EXTERNAL] SECURITY INVOKER | [EXTERNAL] SECURITY DEFINER\n    | AS 'definition'\n    | AS 'obj_file', 'link_symbol' } ...\n    [ WITH ({ DESCRIBE = describe_function\n           } [, ...] ) ]  See CREATE FUNCTION for more information.", 
            "title": "CREATE FUNCTION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-group", 
            "text": "Defines a new database role.  CREATE GROUP name [ [WITH] option [ ... ] ]  See CREATE GROUP for more information.", 
            "title": "CREATE GROUP"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-index", 
            "text": "Defines a new index.  CREATE [UNIQUE] INDEX name ON table\n       [USING btree|bitmap|gist]\n       ( {column | (expression)} [opclass] [, ...] )\n       [ WITH ( FILLFACTOR = value ) ]\n       [TABLESPACE tablespace]\n       [WHERE predicate]  See CREATE INDEX for more information.", 
            "title": "CREATE INDEX"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-language", 
            "text": "Defines a new procedural language.  CREATE [PROCEDURAL] LANGUAGE name\n\nCREATE [TRUSTED] [PROCEDURAL] LANGUAGE name\n       HANDLER call_handler [VALIDATOR valfunction]  See CREATE LANGUAGE for more information.", 
            "title": "CREATE LANGUAGE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-operator", 
            "text": "Defines a new operator.  CREATE OPERATOR name ( \n       PROCEDURE = funcname\n       [, LEFTARG = lefttype] [, RIGHTARG = righttype]\n       [, COMMUTATOR = com_op] [, NEGATOR = neg_op]\n       [, RESTRICT = res_proc] [, JOIN = join_proc]\n       [, HASHES] [, MERGES]\n       [, SORT1 = left_sort_op] [, SORT2 = right_sort_op]\n       [, LTCMP = less_than_op] [, GTCMP = greater_than_op] )  See CREATE OPERATOR for more information.", 
            "title": "CREATE OPERATOR"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-operator-class", 
            "text": "Defines a new operator class.  CREATE OPERATOR CLASS name [DEFAULT] FOR TYPE data_type  \n  USING index_method AS \n  { \n  OPERATOR strategy_number op_name [(op_type, op_type)] [RECHECK]\n  | FUNCTION support_number funcname (argument_type [, ...] )\n  | STORAGE storage_type\n  } [, ... ]  See CREATE OPERATOR CLASS for more information.", 
            "title": "CREATE OPERATOR CLASS"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-resource-queue", 
            "text": "Defines a new resource queue.  CREATE RESOURCE QUEUE name WITH (queue_attribute=value [, ... ])  See CREATE RESOURCE QUEUE for more information.", 
            "title": "CREATE RESOURCE QUEUE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-role", 
            "text": "Defines a new database role (user or group).  CREATE ROLE name [[WITH] option [ ... ]]  See CREATE ROLE for more information.", 
            "title": "CREATE ROLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-rule", 
            "text": "Defines a new rewrite rule.  CREATE [OR REPLACE] RULE name AS ON event\n  TO table [WHERE condition] \n  DO [ALSO | INSTEAD] { NOTHING | command | (command; command \n  ...) }  See CREATE RULE for more information.", 
            "title": "CREATE RULE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-schema", 
            "text": "Defines a new schema.  CREATE SCHEMA schema_name [AUTHORIZATION username] \n   [schema_element [ ... ]]\n\nCREATE SCHEMA AUTHORIZATION rolename [schema_element [ ... ]]  See CREATE SCHEMA for more information.", 
            "title": "CREATE SCHEMA"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-sequence", 
            "text": "Defines a new sequence generator.  CREATE [TEMPORARY | TEMP] SEQUENCE name\n       [INCREMENT [BY] value] \n       [MINVALUE minvalue | NO MINVALUE] \n       [MAXVALUE maxvalue | NO MAXVALUE] \n       [START [ WITH ] start] \n       [CACHE cache] \n       [[NO] CYCLE] \n       [OWNED BY { table.column | NONE }]  See CREATE SEQUENCE for more information.", 
            "title": "CREATE SEQUENCE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-table", 
            "text": "Defines a new table.  CREATE [[GLOBAL | LOCAL] {TEMPORARY | TEMP}] TABLE table_name ( \n[ { column_name data_type [ DEFAULT default_expr ] \n   [column_constraint [ ... ]\n[ ENCODING ( storage_directive [,...] ) ]\n] \n   | table_constraint\n   | LIKE other_table [{INCLUDING | EXCLUDING} \n                      {DEFAULTS | CONSTRAINTS}] ...}\n   [, ... ] ]\n   )\n   [ INHERITS ( parent_table [, ... ] ) ]\n   [ WITH ( storage_parameter=value [, ... ] )\n   [ ON COMMIT {PRESERVE ROWS | DELETE ROWS | DROP} ]\n   [ TABLESPACE tablespace ]\n   [ DISTRIBUTED BY (column, [ ... ] ) | DISTRIBUTED RANDOMLY ]\n   [ PARTITION BY partition_type (column)\n       [ SUBPARTITION BY partition_type (column) ] \n          [ SUBPARTITION TEMPLATE ( template_spec ) ]\n       [...]\n    ( partition_spec ) \n        | [ SUBPARTITION BY partition_type (column) ]\n          [...]\n    ( partition_spec\n      [ ( subpartition_spec\n           [(...)] \n         ) ] \n    )  See CREATE TABLE for more information.", 
            "title": "CREATE TABLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-table-as", 
            "text": "Defines a new table from the results of a query.  CREATE [ [GLOBAL | LOCAL] {TEMPORARY | TEMP} ] TABLE table_name\n   [(column_name [, ...] )]\n   [ WITH ( storage_parameter=value [, ... ] ) ]\n   [ON COMMIT {PRESERVE ROWS | DELETE ROWS | DROP}]\n   [TABLESPACE tablespace]\n   AS query\n   [DISTRIBUTED BY (column, [ ... ] ) | DISTRIBUTED RANDOMLY]  See CREATE TABLE AS for more information.", 
            "title": "CREATE TABLE AS"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-tablespace", 
            "text": "Defines a new tablespace.  CREATE TABLESPACE tablespace_name [OWNER username] \n       FILESPACE filespace_name  See CREATE TABLESPACE for more information.", 
            "title": "CREATE TABLESPACE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-type", 
            "text": "Defines a new data type.  CREATE TYPE name AS ( attribute_name data_type [, ... ] )\n\nCREATE TYPE name (\n    INPUT = input_function,\n    OUTPUT = output_function\n    [, RECEIVE = receive_function]\n    [, SEND = send_function]\n    [, INTERNALLENGTH = {internallength | VARIABLE}]\n    [, PASSEDBYVALUE]\n    [, ALIGNMENT = alignment]\n    [, STORAGE = storage]\n    [, DEFAULT = default]\n    [, ELEMENT = element]\n    [, DELIMITER = delimiter] )\n\nCREATE TYPE name  See CREATE TYPE for more information.", 
            "title": "CREATE TYPE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-user", 
            "text": "Defines a new database role with the LOGIN privilege by default.  CREATE USER name [ [WITH] option [ ... ] ]  See CREATE USER for more information.", 
            "title": "CREATE USER"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#create-view", 
            "text": "Defines a new view.  CREATE [OR REPLACE] [TEMP | TEMPORARY] VIEW name\n       [ ( column_name [, ...] ) ]\n       AS query  See CREATE VIEW for more information.", 
            "title": "CREATE VIEW"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#deallocate", 
            "text": "Deallocates a prepared statement.  DEALLOCATE [PREPARE] name  See DEALLOCATE for more information.", 
            "title": "DEALLOCATE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#declare", 
            "text": "Defines a cursor.  DECLARE name [BINARY] [INSENSITIVE] [NO SCROLL] CURSOR \n     [{WITH | WITHOUT} HOLD] \n     FOR query [FOR READ ONLY]  See DECLARE for more information.", 
            "title": "DECLARE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#delete", 
            "text": "Deletes rows from a table.  DELETE FROM [ONLY] table [[AS] alias]\n      [USING usinglist]\n      [WHERE condition | WHERE CURRENT OF cursor_name ]  See DELETE for more information.", 
            "title": "DELETE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-aggregate", 
            "text": "Removes an aggregate function.  DROP AGGREGATE [IF EXISTS] name ( type [, ...] ) [CASCADE | RESTRICT]  See DROP AGGREGATE for more information.", 
            "title": "DROP AGGREGATE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-cast", 
            "text": "Removes a cast.  DROP CAST [IF EXISTS] (sourcetype AS targettype) [CASCADE | RESTRICT]  See DROP CAST for more information.", 
            "title": "DROP CAST"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-conversion", 
            "text": "Removes a conversion.  DROP CONVERSION [IF EXISTS] name [CASCADE | RESTRICT]  See DROP CONVERSION for more information.", 
            "title": "DROP CONVERSION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-database", 
            "text": "Removes a database.  DROP DATABASE [IF EXISTS] name  See DROP DATABASE for more information.", 
            "title": "DROP DATABASE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-domain", 
            "text": "Removes a domain.  DROP DOMAIN [IF EXISTS] name [, ...]  [CASCADE | RESTRICT]  See DROP DOMAIN for more information.", 
            "title": "DROP DOMAIN"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-external-table", 
            "text": "Removes an external table definition.  DROP EXTERNAL [WEB] TABLE [IF EXISTS] name [CASCADE | RESTRICT]  See DROP EXTERNAL TABLE for more information.", 
            "title": "DROP EXTERNAL TABLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-filespace", 
            "text": "Removes a filespace.  DROP FILESPACE [IF EXISTS] filespacename  See DROP FILESPACE for more information.", 
            "title": "DROP FILESPACE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-function", 
            "text": "Removes a function.  DROP FUNCTION [IF EXISTS] name ( [ [argmode] [argname] argtype \n    [, ...] ] ) [CASCADE | RESTRICT]  See DROP FUNCTION for more information.", 
            "title": "DROP FUNCTION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-group", 
            "text": "Removes a database role.  DROP GROUP [IF EXISTS] name [, ...]  See DROP GROUP for more information.", 
            "title": "DROP GROUP"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-index", 
            "text": "Removes an index.  DROP INDEX [IF EXISTS] name [, ...] [CASCADE | RESTRICT]  See DROP INDEX for more information.", 
            "title": "DROP INDEX"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-language", 
            "text": "Removes a procedural language.  DROP [PROCEDURAL] LANGUAGE [IF EXISTS] name [CASCADE | RESTRICT]  See DROP LANGUAGE for more information.", 
            "title": "DROP LANGUAGE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-operator", 
            "text": "Removes an operator.  DROP OPERATOR [IF EXISTS] name ( {lefttype | NONE} , \n    {righttype | NONE} ) [CASCADE | RESTRICT]  See DROP OPERATOR for more information.", 
            "title": "DROP OPERATOR"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-operator-class", 
            "text": "Removes an operator class.  DROP OPERATOR CLASS [IF EXISTS] name USING index_method [CASCADE | RESTRICT]  See DROP OPERATOR CLASS for more information.", 
            "title": "DROP OPERATOR CLASS"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-owned", 
            "text": "Removes database objects owned by a database role.  DROP OWNED BY name [, ...] [CASCADE | RESTRICT]  See DROP OWNED for more information.", 
            "title": "DROP OWNED"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-resource-queue", 
            "text": "Removes a resource queue.  DROP RESOURCE QUEUE queue_name  See DROP RESOURCE QUEUE for more information.", 
            "title": "DROP RESOURCE QUEUE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-role", 
            "text": "Removes a database role.  DROP ROLE [IF EXISTS] name [, ...]  See DROP ROLE for more information.", 
            "title": "DROP ROLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-rule", 
            "text": "Removes a rewrite rule.  DROP RULE [IF EXISTS] name ON relation [CASCADE | RESTRICT]  See DROP RULE for more information.", 
            "title": "DROP RULE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-schema", 
            "text": "Removes a schema.  DROP SCHEMA [IF EXISTS] name [, ...] [CASCADE | RESTRICT]  See DROP SCHEMA for more information.", 
            "title": "DROP SCHEMA"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-sequence", 
            "text": "Removes a sequence.  DROP SEQUENCE [IF EXISTS] name [, ...] [CASCADE | RESTRICT]  See DROP SEQUENCE for more information.", 
            "title": "DROP SEQUENCE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-table", 
            "text": "Removes a table.  DROP TABLE [IF EXISTS] name [, ...] [CASCADE | RESTRICT]  See DROP TABLE for more information.", 
            "title": "DROP TABLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-tablespace", 
            "text": "Removes a tablespace.  DROP TABLESPACE [IF EXISTS] tablespacename  See DROP TABLESPACE for more information.", 
            "title": "DROP TABLESPACE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-type", 
            "text": "Removes a data type.  DROP TYPE [IF EXISTS] name [, ...] [CASCADE | RESTRICT]  See DROP TYPE for more information.", 
            "title": "DROP TYPE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-user", 
            "text": "Removes a database role.  DROP USER [IF EXISTS] name [, ...]  See DROP USER for more information.", 
            "title": "DROP USER"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#drop-view", 
            "text": "Removes a view.  DROP VIEW [IF EXISTS] name [, ...] [CASCADE | RESTRICT]  See DROP VIEW for more information.", 
            "title": "DROP VIEW"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#end", 
            "text": "Commits the current transaction.  END [WORK | TRANSACTION]  See END for more information.", 
            "title": "END"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#execute", 
            "text": "Executes a prepared SQL statement.  EXECUTE name [ (parameter [, ...] ) ]  See EXECUTE for more information.", 
            "title": "EXECUTE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#explain", 
            "text": "Shows the query plan of a statement.  EXPLAIN [ANALYZE] [VERBOSE] statement  See EXPLAIN for more information.", 
            "title": "EXPLAIN"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#fetch", 
            "text": "Retrieves rows from a query using a cursor.  FETCH [ forward_direction { FROM | IN } ] cursorname  See FETCH for more information.", 
            "title": "FETCH"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#grant", 
            "text": "Defines access privileges.  GRANT { {SELECT | INSERT | UPDATE | DELETE | REFERENCES | \nTRIGGER | TRUNCATE } [,...] | ALL [PRIVILEGES] }\n    ON [TABLE] tablename [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { {USAGE | SELECT | UPDATE} [,...] | ALL [PRIVILEGES] }\n    ON SEQUENCE sequencename [, ...]\n    TO { rolename | PUBLIC } [, ...] [WITH GRANT OPTION]\n\nGRANT { {CREATE | CONNECT | TEMPORARY | TEMP} [,...] | ALL \n[PRIVILEGES] }\n    ON DATABASE dbname [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { EXECUTE | ALL [PRIVILEGES] }\n    ON FUNCTION funcname ( [ [argmode] [argname] argtype [, ...] \n] ) [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { USAGE | ALL [PRIVILEGES] }\n    ON LANGUAGE langname [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { {CREATE | USAGE} [,...] | ALL [PRIVILEGES] }\n    ON SCHEMA schemaname [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT { CREATE | ALL [PRIVILEGES] }\n    ON TABLESPACE tablespacename [, ...]\n    TO {rolename | PUBLIC} [, ...] [WITH GRANT OPTION]\n\nGRANT parent_role [, ...] \n    TO member_role [, ...] [WITH ADMIN OPTION]\n\nGRANT { SELECT | INSERT | ALL [PRIVILEGES] } \n    ON PROTOCOL protocolname\n    TO username  See GRANT for more information.", 
            "title": "GRANT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#insert", 
            "text": "Creates new rows in a table.  INSERT INTO table [( column [, ...] )]\n   {DEFAULT VALUES | VALUES ( {expression | DEFAULT} [, ...] ) \n   [, ...] | query}  See INSERT for more information.", 
            "title": "INSERT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#load", 
            "text": "Loads or reloads a shared library file.  LOAD 'filename'  See LOAD for more information.", 
            "title": "LOAD"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#lock", 
            "text": "Locks a table.  LOCK [TABLE] name [, ...] [IN lockmode MODE] [NOWAIT]  See LOCK for more information.", 
            "title": "LOCK"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#move", 
            "text": "Positions a cursor.  MOVE [ forward_direction {FROM | IN} ] cursorname  See MOVE for more information.", 
            "title": "MOVE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#prepare", 
            "text": "Prepare a statement for execution.  PREPARE name [ (datatype [, ...] ) ] AS statement  See PREPARE for more information.", 
            "title": "PREPARE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#reassign-owned", 
            "text": "Changes the ownership of database objects owned by a database role.  REASSIGN OWNED BY old_role [, ...] TO new_role  See REASSIGN OWNED for more information.", 
            "title": "REASSIGN OWNED"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#reindex", 
            "text": "Rebuilds indexes.  REINDEX {INDEX | TABLE | DATABASE | SYSTEM} name  See REINDEX for more information.", 
            "title": "REINDEX"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#release-savepoint", 
            "text": "Destroys a previously defined savepoint.  RELEASE [SAVEPOINT] savepoint_name  See RELEASE SAVEPOINT for more information.", 
            "title": "RELEASE SAVEPOINT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#reset", 
            "text": "Restores the value of a system configuration parameter to the default value.  RESET configuration_parameter\n\nRESET ALL  See RESET for more information.", 
            "title": "RESET"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#revoke", 
            "text": "Removes access privileges.  REVOKE [GRANT OPTION FOR] { {SELECT | INSERT | UPDATE | DELETE \n       | REFERENCES | TRIGGER | TRUNCATE } [,...] | ALL [PRIVILEGES] }\n       ON [TABLE] tablename [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] { {USAGE | SELECT | UPDATE} [,...] \n       | ALL [PRIVILEGES] }\n       ON SEQUENCE sequencename [, ...]\n       FROM { rolename | PUBLIC } [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] { {CREATE | CONNECT \n       | TEMPORARY | TEMP} [,...] | ALL [PRIVILEGES] }\n       ON DATABASE dbname [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] {EXECUTE | ALL [PRIVILEGES]}\n       ON FUNCTION funcname ( [[argmode] [argname] argtype\n                              [, ...]] ) [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] {USAGE | ALL [PRIVILEGES]}\n       ON LANGUAGE langname [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [ CASCADE | RESTRICT ]\n\nREVOKE [GRANT OPTION FOR] { {CREATE | USAGE} [,...] \n       | ALL [PRIVILEGES] }\n       ON SCHEMA schemaname [, ...]\n       FROM {rolename | PUBLIC} [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [GRANT OPTION FOR] { CREATE | ALL [PRIVILEGES] }\n       ON TABLESPACE tablespacename [, ...]\n       FROM { rolename | PUBLIC } [, ...]\n       [CASCADE | RESTRICT]\n\nREVOKE [ADMIN OPTION FOR] parent_role [, ...] \n       FROM member_role [, ...]\n       [CASCADE | RESTRICT]  See REVOKE for more information.", 
            "title": "REVOKE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#rollback", 
            "text": "Aborts the current transaction.  ROLLBACK [WORK | TRANSACTION]  See ROLLBACK for more information.", 
            "title": "ROLLBACK"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#rollback-to-savepoint", 
            "text": "Rolls back the current transaction to a savepoint.  ROLLBACK [WORK | TRANSACTION] TO [SAVEPOINT] savepoint_name  See ROLLBACK TO SAVEPOINT for more information.", 
            "title": "ROLLBACK TO SAVEPOINT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#savepoint", 
            "text": "Defines a new savepoint within the current transaction.  SAVEPOINT savepoint_name  See SAVEPOINT for more information.", 
            "title": "SAVEPOINT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#select", 
            "text": "Retrieves rows from a table or view.  SELECT [ALL | DISTINCT [ON (expression [, ...])]]\n  * | expression [[AS] output_name] [, ...]\n  [FROM from_item [, ...]]\n  [WHERE condition]\n  [GROUP BY grouping_element [, ...]]\n  [HAVING condition [, ...]]\n  [WINDOW window_name AS (window_specification)]\n  [{UNION | INTERSECT | EXCEPT} [ALL] select]\n  [ORDER BY expression [ASC | DESC | USING operator] [, ...]]\n  [LIMIT {count | ALL}]\n  [OFFSET start]\n  [FOR {UPDATE | SHARE} [OF table_name [, ...]] [NOWAIT] [...]]  See SELECT for more information.", 
            "title": "SELECT"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#select-into", 
            "text": "Defines a new table from the results of a query.  SELECT [ALL | DISTINCT [ON ( expression [, ...] )]]\n    * | expression [AS output_name] [, ...]\n    INTO [TEMPORARY | TEMP] [TABLE] new_table\n    [FROM from_item [, ...]]\n    [WHERE condition]\n    [GROUP BY expression [, ...]]\n    [HAVING condition [, ...]]\n    [{UNION | INTERSECT | EXCEPT} [ALL] select]\n    [ORDER BY expression [ASC | DESC | USING operator] [, ...]]\n    [LIMIT {count | ALL}]\n    [OFFSET start]\n    [FOR {UPDATE | SHARE} [OF table_name [, ...]] [NOWAIT] \n    [...]]  See SELECT INTO for more information.", 
            "title": "SELECT INTO"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#set", 
            "text": "Changes the value of a Greenplum Database configuration parameter.  SET [SESSION | LOCAL] configuration_parameter {TO | =} value | \n    'value' | DEFAULT}\n\nSET [SESSION | LOCAL] TIME ZONE {timezone | LOCAL | DEFAULT}  See SET for more information.", 
            "title": "SET"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#set-role", 
            "text": "Sets the current role identifier of the current session.  SET [SESSION | LOCAL] ROLE rolename\n\nSET [SESSION | LOCAL] ROLE NONE\n\nRESET ROLE  See SET ROLE for more information.", 
            "title": "SET ROLE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#set-session-authorization", 
            "text": "Sets the session role identifier and the current role identifier of the current session.  SET [SESSION | LOCAL] SESSION AUTHORIZATION rolename\n\nSET [SESSION | LOCAL] SESSION AUTHORIZATION DEFAULT\n\nRESET SESSION AUTHORIZATION  See SET SESSION AUTHORIZATION for more information.", 
            "title": "SET SESSION AUTHORIZATION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#set-transaction", 
            "text": "Sets the characteristics of the current transaction.  SET TRANSACTION [transaction_mode] [READ ONLY | READ WRITE]\n\nSET SESSION CHARACTERISTICS AS TRANSACTION transaction_mode \n     [READ ONLY | READ WRITE]  See SET TRANSACTION for more information.", 
            "title": "SET TRANSACTION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#show", 
            "text": "Shows the value of a system configuration parameter.  SHOW configuration_parameter\n\nSHOW ALL  See SHOW for more information.", 
            "title": "SHOW"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#start-transaction", 
            "text": "Starts a transaction block.  START TRANSACTION [SERIALIZABLE | READ COMMITTED | READ UNCOMMITTED]\n                  [READ WRITE | READ ONLY]  See START TRANSACTION for more information.", 
            "title": "START TRANSACTION"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#truncate", 
            "text": "Empties a table of all rows.  TRUNCATE [TABLE] name [, ...] [CASCADE | RESTRICT]  See TRUNCATE for more information.", 
            "title": "TRUNCATE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#update", 
            "text": "Updates rows of a table.  UPDATE [ONLY] table [[AS] alias]\n   SET {column = {expression | DEFAULT} |\n   (column [, ...]) = ({expression | DEFAULT} [, ...])} [, ...]\n   [FROM fromlist]\n   [WHERE condition | WHERE CURRENT OF cursor_name ]  See UPDATE for more information.", 
            "title": "UPDATE"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#vacuum", 
            "text": "Garbage-collects and optionally analyzes a database.  VACUUM [FULL] [FREEZE] [VERBOSE] [table]\n\nVACUUM [FULL] [FREEZE] [VERBOSE] ANALYZE\n              [table [(column [, ...] )]]  See VACUUM for more information.", 
            "title": "VACUUM"
        }, 
        {
            "location": "/sql-ref/sql-ref-summary/#values", 
            "text": "Computes a set of rows.  VALUES ( expression [, ...] ) [, ...]\n   [ORDER BY sort_expression [ASC | DESC | USING operator] [, ...]]\n   [LIMIT {count | ALL}] [OFFSET start]  See VALUES for more information.", 
            "title": "VALUES"
        }, 
        {
            "location": "/meta-ref/", 
            "text": "System Catalog Reference\n\n\nThis reference describes the Greenplum Database system catalog tables and views. System tables prefixed with \ngp_\n relate to the parallel features of Greenplum Database. Tables prefixed with \npg_\n are either standard PostgreSQL system catalog tables supported in Greenplum Database, or are related to features Greenplum that provides to enhance PostgreSQL for data warehousing workloads. Note that the global system catalog for Greenplum Database resides on the master instance.\n\n\nSystem Tables\n\n\nSystem Views\n\n\nSystem Catalogs Definitions\n\n\ngp_configuration_history\n\n\ngp_db_interfaces\n\n\ngp_distributed_log\n\n\ngp_distributed_xacts\n\n\ngp_distribution_policy\n\n\ngpexpand.expansion_progress\n\n\ngpexpand.status\n\n\ngpexpand.status_detail\n\n\ngp_fastsequence\n\n\ngp_fault_strategy\n\n\ngp_global_sequence\n\n\ngp_id\n\n\ngp_interfaces\n\n\ngp_persistent_database_node\n\n\ngp_persistent_filespace_node\n\n\ngp_persistent_relation_node\n\n\ngp_persistent_tablespace_node\n\n\ngp_pgdatabase\n\n\ngp_relation_node\n\n\ngp_resqueue_status\n\n\ngp_san_configuration\n\n\ngp_segment_configuration\n\n\ngp_transaction_log\n\n\ngp_version_at_initdb\n\n\npg_aggregate\n\n\npg_am\n\n\npg_amop\n\n\npg_amproc\n\n\npg_appendonly\n\n\npg_attrdef\n\n\npg_attribute\n\n\npg_attribute_encoding\n\n\npg_auth_members\n\n\npg_authid\n\n\npg_cast\n\n\npg_class\n\n\npg_compression\n\n\npg_constraint\n\n\npg_conversion\n\n\npg_database\n\n\npg_depend\n\n\npg_description\n\n\npg_exttable\n\n\npg_filespace\n\n\npg_filespace_entry\n\n\npg_index\n\n\npg_inherits\n\n\npg_language\n\n\npg_largeobject\n\n\npg_listener\n\n\npg_locks\n\n\npg_namespace\n\n\npg_opclass\n\n\npg_operator\n\n\npg_partition\n\n\npg_partition_columns\n\n\npg_partition_encoding\n\n\npg_partition_rule\n\n\npg_partition_templates\n\n\npg_partitions\n\n\npg_pltemplate\n\n\npg_proc\n\n\npg_resourcetype\n\n\npg_resqueue\n\n\npg_resqueue_attributes\n\n\npg_resqueuecapability\n\n\npg_rewrite\n\n\npg_roles\n\n\npg_shdepend\n\n\npg_shdescription\n\n\npg_stat_activity\n\n\npg_stat_last_operation\n\n\npg_stat_last_shoperation\n\n\npg_stat_operations\n\n\npg_stat_partition_operations\n\n\npg_stat_replication\n\n\npg_statistic\n\n\npg_stat_resqueues\n\n\npg_tablespace\n\n\npg_trigger\n\n\npg_type\n\n\npg_type_encoding\n\n\npg_user_mapping\n\n\npg_window", 
            "title": "\u7cfb\u7edf\u8868\u53c2\u8003"
        }, 
        {
            "location": "/meta-ref/#system-catalog-reference", 
            "text": "This reference describes the Greenplum Database system catalog tables and views. System tables prefixed with  gp_  relate to the parallel features of Greenplum Database. Tables prefixed with  pg_  are either standard PostgreSQL system catalog tables supported in Greenplum Database, or are related to features Greenplum that provides to enhance PostgreSQL for data warehousing workloads. Note that the global system catalog for Greenplum Database resides on the master instance.", 
            "title": "System Catalog Reference"
        }, 
        {
            "location": "/meta-ref/#system-tables", 
            "text": "", 
            "title": "System Tables"
        }, 
        {
            "location": "/meta-ref/#system-views", 
            "text": "", 
            "title": "System Views"
        }, 
        {
            "location": "/meta-ref/#system-catalogs-definitions", 
            "text": "", 
            "title": "System Catalogs Definitions"
        }, 
        {
            "location": "/meta-ref/#gp_configuration_history", 
            "text": "", 
            "title": "gp_configuration_history"
        }, 
        {
            "location": "/meta-ref/#gp_db_interfaces", 
            "text": "", 
            "title": "gp_db_interfaces"
        }, 
        {
            "location": "/meta-ref/#gp_distributed_log", 
            "text": "", 
            "title": "gp_distributed_log"
        }, 
        {
            "location": "/meta-ref/#gp_distributed_xacts", 
            "text": "", 
            "title": "gp_distributed_xacts"
        }, 
        {
            "location": "/meta-ref/#gp_distribution_policy", 
            "text": "", 
            "title": "gp_distribution_policy"
        }, 
        {
            "location": "/meta-ref/#gpexpandexpansion_progress", 
            "text": "", 
            "title": "gpexpand.expansion_progress"
        }, 
        {
            "location": "/meta-ref/#gpexpandstatus", 
            "text": "", 
            "title": "gpexpand.status"
        }, 
        {
            "location": "/meta-ref/#gpexpandstatus_detail", 
            "text": "", 
            "title": "gpexpand.status_detail"
        }, 
        {
            "location": "/meta-ref/#gp_fastsequence", 
            "text": "", 
            "title": "gp_fastsequence"
        }, 
        {
            "location": "/meta-ref/#gp_fault_strategy", 
            "text": "", 
            "title": "gp_fault_strategy"
        }, 
        {
            "location": "/meta-ref/#gp_global_sequence", 
            "text": "", 
            "title": "gp_global_sequence"
        }, 
        {
            "location": "/meta-ref/#gp_id", 
            "text": "", 
            "title": "gp_id"
        }, 
        {
            "location": "/meta-ref/#gp_interfaces", 
            "text": "", 
            "title": "gp_interfaces"
        }, 
        {
            "location": "/meta-ref/#gp_persistent_database_node", 
            "text": "", 
            "title": "gp_persistent_database_node"
        }, 
        {
            "location": "/meta-ref/#gp_persistent_filespace_node", 
            "text": "", 
            "title": "gp_persistent_filespace_node"
        }, 
        {
            "location": "/meta-ref/#gp_persistent_relation_node", 
            "text": "", 
            "title": "gp_persistent_relation_node"
        }, 
        {
            "location": "/meta-ref/#gp_persistent_tablespace_node", 
            "text": "", 
            "title": "gp_persistent_tablespace_node"
        }, 
        {
            "location": "/meta-ref/#gp_pgdatabase", 
            "text": "", 
            "title": "gp_pgdatabase"
        }, 
        {
            "location": "/meta-ref/#gp_relation_node", 
            "text": "", 
            "title": "gp_relation_node"
        }, 
        {
            "location": "/meta-ref/#gp_resqueue_status", 
            "text": "", 
            "title": "gp_resqueue_status"
        }, 
        {
            "location": "/meta-ref/#gp_san_configuration", 
            "text": "", 
            "title": "gp_san_configuration"
        }, 
        {
            "location": "/meta-ref/#gp_segment_configuration", 
            "text": "", 
            "title": "gp_segment_configuration"
        }, 
        {
            "location": "/meta-ref/#gp_transaction_log", 
            "text": "", 
            "title": "gp_transaction_log"
        }, 
        {
            "location": "/meta-ref/#gp_version_at_initdb", 
            "text": "", 
            "title": "gp_version_at_initdb"
        }, 
        {
            "location": "/meta-ref/#pg_aggregate", 
            "text": "", 
            "title": "pg_aggregate"
        }, 
        {
            "location": "/meta-ref/#pg_am", 
            "text": "", 
            "title": "pg_am"
        }, 
        {
            "location": "/meta-ref/#pg_amop", 
            "text": "", 
            "title": "pg_amop"
        }, 
        {
            "location": "/meta-ref/#pg_amproc", 
            "text": "", 
            "title": "pg_amproc"
        }, 
        {
            "location": "/meta-ref/#pg_appendonly", 
            "text": "", 
            "title": "pg_appendonly"
        }, 
        {
            "location": "/meta-ref/#pg_attrdef", 
            "text": "", 
            "title": "pg_attrdef"
        }, 
        {
            "location": "/meta-ref/#pg_attribute", 
            "text": "", 
            "title": "pg_attribute"
        }, 
        {
            "location": "/meta-ref/#pg_attribute_encoding", 
            "text": "", 
            "title": "pg_attribute_encoding"
        }, 
        {
            "location": "/meta-ref/#pg_auth_members", 
            "text": "", 
            "title": "pg_auth_members"
        }, 
        {
            "location": "/meta-ref/#pg_authid", 
            "text": "", 
            "title": "pg_authid"
        }, 
        {
            "location": "/meta-ref/#pg_cast", 
            "text": "", 
            "title": "pg_cast"
        }, 
        {
            "location": "/meta-ref/#pg_class", 
            "text": "", 
            "title": "pg_class"
        }, 
        {
            "location": "/meta-ref/#pg_compression", 
            "text": "", 
            "title": "pg_compression"
        }, 
        {
            "location": "/meta-ref/#pg_constraint", 
            "text": "", 
            "title": "pg_constraint"
        }, 
        {
            "location": "/meta-ref/#pg_conversion", 
            "text": "", 
            "title": "pg_conversion"
        }, 
        {
            "location": "/meta-ref/#pg_database", 
            "text": "", 
            "title": "pg_database"
        }, 
        {
            "location": "/meta-ref/#pg_depend", 
            "text": "", 
            "title": "pg_depend"
        }, 
        {
            "location": "/meta-ref/#pg_description", 
            "text": "", 
            "title": "pg_description"
        }, 
        {
            "location": "/meta-ref/#pg_exttable", 
            "text": "", 
            "title": "pg_exttable"
        }, 
        {
            "location": "/meta-ref/#pg_filespace", 
            "text": "", 
            "title": "pg_filespace"
        }, 
        {
            "location": "/meta-ref/#pg_filespace_entry", 
            "text": "", 
            "title": "pg_filespace_entry"
        }, 
        {
            "location": "/meta-ref/#pg_index", 
            "text": "", 
            "title": "pg_index"
        }, 
        {
            "location": "/meta-ref/#pg_inherits", 
            "text": "", 
            "title": "pg_inherits"
        }, 
        {
            "location": "/meta-ref/#pg_language", 
            "text": "", 
            "title": "pg_language"
        }, 
        {
            "location": "/meta-ref/#pg_largeobject", 
            "text": "", 
            "title": "pg_largeobject"
        }, 
        {
            "location": "/meta-ref/#pg_listener", 
            "text": "", 
            "title": "pg_listener"
        }, 
        {
            "location": "/meta-ref/#pg_locks", 
            "text": "", 
            "title": "pg_locks"
        }, 
        {
            "location": "/meta-ref/#pg_namespace", 
            "text": "", 
            "title": "pg_namespace"
        }, 
        {
            "location": "/meta-ref/#pg_opclass", 
            "text": "", 
            "title": "pg_opclass"
        }, 
        {
            "location": "/meta-ref/#pg_operator", 
            "text": "", 
            "title": "pg_operator"
        }, 
        {
            "location": "/meta-ref/#pg_partition", 
            "text": "", 
            "title": "pg_partition"
        }, 
        {
            "location": "/meta-ref/#pg_partition_columns", 
            "text": "", 
            "title": "pg_partition_columns"
        }, 
        {
            "location": "/meta-ref/#pg_partition_encoding", 
            "text": "", 
            "title": "pg_partition_encoding"
        }, 
        {
            "location": "/meta-ref/#pg_partition_rule", 
            "text": "", 
            "title": "pg_partition_rule"
        }, 
        {
            "location": "/meta-ref/#pg_partition_templates", 
            "text": "", 
            "title": "pg_partition_templates"
        }, 
        {
            "location": "/meta-ref/#pg_partitions", 
            "text": "", 
            "title": "pg_partitions"
        }, 
        {
            "location": "/meta-ref/#pg_pltemplate", 
            "text": "", 
            "title": "pg_pltemplate"
        }, 
        {
            "location": "/meta-ref/#pg_proc", 
            "text": "", 
            "title": "pg_proc"
        }, 
        {
            "location": "/meta-ref/#pg_resourcetype", 
            "text": "", 
            "title": "pg_resourcetype"
        }, 
        {
            "location": "/meta-ref/#pg_resqueue", 
            "text": "", 
            "title": "pg_resqueue"
        }, 
        {
            "location": "/meta-ref/#pg_resqueue_attributes", 
            "text": "", 
            "title": "pg_resqueue_attributes"
        }, 
        {
            "location": "/meta-ref/#pg_resqueuecapability", 
            "text": "", 
            "title": "pg_resqueuecapability"
        }, 
        {
            "location": "/meta-ref/#pg_rewrite", 
            "text": "", 
            "title": "pg_rewrite"
        }, 
        {
            "location": "/meta-ref/#pg_roles", 
            "text": "", 
            "title": "pg_roles"
        }, 
        {
            "location": "/meta-ref/#pg_shdepend", 
            "text": "", 
            "title": "pg_shdepend"
        }, 
        {
            "location": "/meta-ref/#pg_shdescription", 
            "text": "", 
            "title": "pg_shdescription"
        }, 
        {
            "location": "/meta-ref/#pg_stat_activity", 
            "text": "", 
            "title": "pg_stat_activity"
        }, 
        {
            "location": "/meta-ref/#pg_stat_last_operation", 
            "text": "", 
            "title": "pg_stat_last_operation"
        }, 
        {
            "location": "/meta-ref/#pg_stat_last_shoperation", 
            "text": "", 
            "title": "pg_stat_last_shoperation"
        }, 
        {
            "location": "/meta-ref/#pg_stat_operations", 
            "text": "", 
            "title": "pg_stat_operations"
        }, 
        {
            "location": "/meta-ref/#pg_stat_partition_operations", 
            "text": "", 
            "title": "pg_stat_partition_operations"
        }, 
        {
            "location": "/meta-ref/#pg_stat_replication", 
            "text": "", 
            "title": "pg_stat_replication"
        }, 
        {
            "location": "/meta-ref/#pg_statistic", 
            "text": "", 
            "title": "pg_statistic"
        }, 
        {
            "location": "/meta-ref/#pg_stat_resqueues", 
            "text": "", 
            "title": "pg_stat_resqueues"
        }, 
        {
            "location": "/meta-ref/#pg_tablespace", 
            "text": "", 
            "title": "pg_tablespace"
        }, 
        {
            "location": "/meta-ref/#pg_trigger", 
            "text": "", 
            "title": "pg_trigger"
        }, 
        {
            "location": "/meta-ref/#pg_type", 
            "text": "", 
            "title": "pg_type"
        }, 
        {
            "location": "/meta-ref/#pg_type_encoding", 
            "text": "", 
            "title": "pg_type_encoding"
        }, 
        {
            "location": "/meta-ref/#pg_user_mapping", 
            "text": "", 
            "title": "pg_user_mapping"
        }, 
        {
            "location": "/meta-ref/#pg_window", 
            "text": "", 
            "title": "pg_window"
        }, 
        {
            "location": "/meta-ref/meta-ref-all/", 
            "text": "System Catalog Reference\n\n\nThis reference describes the Greenplum Database system catalog tables and views. System tables prefixed with gp_ relate to the parallel features of Greenplum Database. Tables prefixed with pg_ are either standard PostgreSQL system catalog tables supported in Greenplum Database, or are related to features Greenplum that provides to enhance PostgreSQL for data warehousing workloads. Note that the global system catalog for Greenplum Database resides on the master instance.\n\n\nSystem Tables\n\n\n\n\ngp_configuration (Deprecated. See gp_segment_configuration.)\n\n\ngp_configuration_history\n\n\ngp_db_interfaces\n\n\ngp_distribution_policy\n\n\ngp_fastsequence\n\n\ngp_fault_strategy\n\n\ngp_global_sequence\n\n\ngp_id\n\n\ngp_interfaces\n\n\ngp_master_mirroring (Deprecated. See pg_stat_replication.)\n\n\ngp_persistent_database_node\n\n\ngp_persistent_filespace_node\n\n\ngp_persistent_relation_node\n\n\ngp_persistent_tablespace_node\n\n\ngp_relation_node\n\n\ngp_san_configuration\n\n\ngp_segment_configuration\n\n\ngp_version_at_initdb\n\n\ngpexpand.status\n\n\ngpexpand.status_detail\n\n\npg_aggregate\n\n\npg_am\n\n\npg_amop\n\n\npg_amproc\n\n\npg_appendonly\n\n\npg_appendonly_alter_column (not supported in 4.3)\n\n\npg_attrdef\n\n\npg_attribute\n\n\npg_auth_members\n\n\npg_authid\n\n\npg_autovacuum (not supported in 4.2.5 and later)\n\n\npg_cast\n\n\npg_class\n\n\npg_constraint\n\n\npg_conversion\n\n\npg_database\n\n\npg_depend\n\n\npg_description\n\n\npg_exttable\n\n\npg_filespace\n\n\npg_filespace_entry\n\n\npg_foreign_data_wrapper (not supported in 4.3)\n\n\npg_foreign_server (not supported in 4.3)\n\n\npg_foreign_table (not supported in 4.3)\n\n\npg_index\n\n\npg_inherits\n\n\npg_language\n\n\npg_largeobject\n\n\npg_listener\n\n\npg_namespace\n\n\npg_opclass\n\n\npg_operator\n\n\npg_partition\n\n\npg_partition_rule\n\n\npg_pltemplate\n\n\npg_proc\n\n\npg_resourcetype\n\n\npg_resqueue\n\n\npg_resqueuecapability\n\n\npg_rewrite\n\n\npg_shdepend\n\n\npg_shdescription\n\n\npg_stat_last_operation\n\n\npg_stat_last_shoperation\n\n\npg_statistic\n\n\npg_tablespace\n\n\npg_trigger\n\n\npg_type\n\n\npg_user_mapping (not supported in 4.3)\n\n\npg_window\n\n\n\n\nSystem Views\n\n\nGreenplum Database provides the following system views not available in PostgreSQL.\n\n gp_distributed_log\n\n gp_distributed_xacts\n\n gp_pgdatabase\n\n gp_resqueue_status\n\n gp_transaction_log\n\n gpexpand.expansion_progress\n\n pg_max_external_files (shows number of external table files allowed per segment host when using the file protocol)\n\n pg_partition_columns\n\n pg_partition_templates\n\n pg_partitions\n\n pg_stat_activity\n\n pg_stat_replication\n\n pg_resqueue_attributes\n\n pg_resqueue_status (Deprecated. Use gp_toolkit.gp_resqueue_status.)\n\n pg_stat_resqueues\n\n pg_user_mappings (not supported)\n* session_level_memory_consumption 4.3.4.0\n\n\nFor more information about the standard system views supported in PostgreSQL and Greenplum Database, see the following sections of the PostgreSQL documentation:\n\n\n\n\nSystem Views\n\n\nStatistics Collector Views\n\n\nThe Information Schema\n\n\n\n\nSystem Catalogs Definitions\n\n\nSystem catalog table and view definitions in alphabetical order.\n\n\ngp_configuration_history\n\n\nThe \ngp_configuration_history\n table contains information about system changes related to fault detection and recovery operations. The fts_probe process logs data to this table, as do certain related management utilities such as gpcheck, gprecoverseg, and gpinitsystem. For example, when you add a new segment and mirror segment to the system, records for these events are logged to gp_configuration_history.\nThe event descriptions stored in this table may be helpful for troubleshooting serious system issues in collaboration with Greenplum support technicians.\n\n\nThis table is populated only on the master. This table is defined in the pg_global tablespace, meaning it is globally shared across all databases in the system.\n\n\n\n\n\n\n\n\ncolumn\n\n\ntype\n\n\nreferences\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntime\n\n\ntimestamp with time zone\n\n\nTimestamp for the event recorded.\n\n\n\n\n\n\n\n\ndbid\n\n\nsmallint\n\n\ngp_segment _ configuration.dbid\n\n\nSystem-assigned ID. The unique identifier of a segment (or master) instance.\n\n\n\n\n\n\ndesc\n\n\ntext\n\n\nText description of the event.\n\n\n\n\n\n\n\n\n\n\npg_partition_columns\n\n\nThe pg_partition_columns system view is used to show the partition key columns of a partitioned table.\n\n\n\n\n\n\n\n\ncolumn\n\n\ntype\n\n\nreferences\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nschemaname\n\n\nname\n\n\nThe name of the schema the partitioned table is in.\n\n\n\n\n\n\n\n\ntablename\n\n\nname\n\n\nThe table name of the top-level parent table.\n\n\n\n\n\n\n\n\ncolumnname\n\n\nname\n\n\n\n\nThe name of the partition key column.\n\n\n\n\n\n\npartitionleve\n\n\nsmallint\n\n\n\n\nThe level of this subpartition in the hierarchy.\n\n\n\n\n\n\nposition_in_partition_key\n\n\ninteger\n\n\nFor list partitions you can have a composite (multi-column) partition key. This shows the position of the column in a composite key.", 
            "title": "\u7cfb\u7edf\u8868"
        }, 
        {
            "location": "/meta-ref/meta-ref-all/#system-catalog-reference", 
            "text": "This reference describes the Greenplum Database system catalog tables and views. System tables prefixed with gp_ relate to the parallel features of Greenplum Database. Tables prefixed with pg_ are either standard PostgreSQL system catalog tables supported in Greenplum Database, or are related to features Greenplum that provides to enhance PostgreSQL for data warehousing workloads. Note that the global system catalog for Greenplum Database resides on the master instance.", 
            "title": "System Catalog Reference"
        }, 
        {
            "location": "/meta-ref/meta-ref-all/#system-tables", 
            "text": "gp_configuration (Deprecated. See gp_segment_configuration.)  gp_configuration_history  gp_db_interfaces  gp_distribution_policy  gp_fastsequence  gp_fault_strategy  gp_global_sequence  gp_id  gp_interfaces  gp_master_mirroring (Deprecated. See pg_stat_replication.)  gp_persistent_database_node  gp_persistent_filespace_node  gp_persistent_relation_node  gp_persistent_tablespace_node  gp_relation_node  gp_san_configuration  gp_segment_configuration  gp_version_at_initdb  gpexpand.status  gpexpand.status_detail  pg_aggregate  pg_am  pg_amop  pg_amproc  pg_appendonly  pg_appendonly_alter_column (not supported in 4.3)  pg_attrdef  pg_attribute  pg_auth_members  pg_authid  pg_autovacuum (not supported in 4.2.5 and later)  pg_cast  pg_class  pg_constraint  pg_conversion  pg_database  pg_depend  pg_description  pg_exttable  pg_filespace  pg_filespace_entry  pg_foreign_data_wrapper (not supported in 4.3)  pg_foreign_server (not supported in 4.3)  pg_foreign_table (not supported in 4.3)  pg_index  pg_inherits  pg_language  pg_largeobject  pg_listener  pg_namespace  pg_opclass  pg_operator  pg_partition  pg_partition_rule  pg_pltemplate  pg_proc  pg_resourcetype  pg_resqueue  pg_resqueuecapability  pg_rewrite  pg_shdepend  pg_shdescription  pg_stat_last_operation  pg_stat_last_shoperation  pg_statistic  pg_tablespace  pg_trigger  pg_type  pg_user_mapping (not supported in 4.3)  pg_window", 
            "title": "System Tables"
        }, 
        {
            "location": "/meta-ref/meta-ref-all/#system-views", 
            "text": "Greenplum Database provides the following system views not available in PostgreSQL.  gp_distributed_log  gp_distributed_xacts  gp_pgdatabase  gp_resqueue_status  gp_transaction_log  gpexpand.expansion_progress  pg_max_external_files (shows number of external table files allowed per segment host when using the file protocol)  pg_partition_columns  pg_partition_templates  pg_partitions  pg_stat_activity  pg_stat_replication  pg_resqueue_attributes  pg_resqueue_status (Deprecated. Use gp_toolkit.gp_resqueue_status.)  pg_stat_resqueues  pg_user_mappings (not supported)\n* session_level_memory_consumption 4.3.4.0  For more information about the standard system views supported in PostgreSQL and Greenplum Database, see the following sections of the PostgreSQL documentation:   System Views  Statistics Collector Views  The Information Schema", 
            "title": "System Views"
        }, 
        {
            "location": "/meta-ref/meta-ref-all/#system-catalogs-definitions", 
            "text": "System catalog table and view definitions in alphabetical order.", 
            "title": "System Catalogs Definitions"
        }, 
        {
            "location": "/meta-ref/meta-ref-all/#gp_configuration_history", 
            "text": "The  gp_configuration_history  table contains information about system changes related to fault detection and recovery operations. The fts_probe process logs data to this table, as do certain related management utilities such as gpcheck, gprecoverseg, and gpinitsystem. For example, when you add a new segment and mirror segment to the system, records for these events are logged to gp_configuration_history.\nThe event descriptions stored in this table may be helpful for troubleshooting serious system issues in collaboration with Greenplum support technicians.  This table is populated only on the master. This table is defined in the pg_global tablespace, meaning it is globally shared across all databases in the system.     column  type  references  description      time  timestamp with time zone  Timestamp for the event recorded.     dbid  smallint  gp_segment _ configuration.dbid  System-assigned ID. The unique identifier of a segment (or master) instance.    desc  text  Text description of the event.", 
            "title": "gp_configuration_history"
        }, 
        {
            "location": "/meta-ref/meta-ref-all/#pg_partition_columns", 
            "text": "The pg_partition_columns system view is used to show the partition key columns of a partitioned table.     column  type  references  description      schemaname  name  The name of the schema the partitioned table is in.     tablename  name  The table name of the top-level parent table.     columnname  name   The name of the partition key column.    partitionleve  smallint   The level of this subpartition in the hierarchy.    position_in_partition_key  integer  For list partitions you can have a composite (multi-column) partition key. This shows the position of the column in a composite key.", 
            "title": "pg_partition_columns"
        }, 
        {
            "location": "/history/", 
            "text": "\u6587\u6863\u5386\u53f2", 
            "title": "\u6587\u6863\u5386\u53f2"
        }, 
        {
            "location": "/history/#_1", 
            "text": "", 
            "title": "\u6587\u6863\u5386\u53f2"
        }
    ]
}